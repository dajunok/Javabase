----------------------------------------DoubleBuffer--------------------------------------------------------------------------------------------------------------
DoubleBuffer：double缓冲器	【Since:JDK1.4】
	此类定义了对Double缓冲区的四类操作：
		● 读写单double的绝对和相对的get和put方法；
		● 相对批量get方法，将连续的double序列从此缓冲区传输到数组中；以及
		● 将连续的double序列从double数组或其他double缓冲区传输到此缓冲区的相对大容量put方法；以及
		● 压缩（compacting）、复制（duplicating）和切片（slicing）Double缓冲器的方法。
	可以通过分配（为缓冲区的内容分配空间）、将现有的double数组包装到缓冲区中或创建现有字节缓冲区的视图来创建Double缓冲区。
	与字节缓冲区类似，Double缓冲区既可以是直接缓冲区，也可以是非直接缓冲区。通过此类的wrap方法创建的Double缓冲区将是非直接缓冲区。创建为字节缓冲区视图的double缓冲区在字节缓冲区本身是直接缓冲区的情况下是直接缓冲区。Double缓冲区是否直接缓冲区可以通过调用isDirect方法来确定。
	此类中没有要返回的值的方法被指定为返回调用它们的缓冲区。这允许方法调用被链接。	
	
	
	
	类定义	：public abstract class FloatBuffer extends Buffer implements Comparable<FloatBuffer>
	实现接口	：Comparable<FloatBuffer>
------------------------------------------------------------------------------------------------------------------------------------------------------
Method Summary（方法概要）：
	allocate(int capacity):static DoubleBuffer 
		capacity - 新缓冲区容量（double）。
		分配新的double缓冲区。
		新缓冲区的位置（position）将为零，其限制（limit）将等于其容量，其标记（mark）将未定义，并且其每个元素都将初始化为零。它将有一个支持数组，其数组偏移量将为零。
		返回新的double缓冲器。
		【Throws】：
			IllegalArgumentException 如果容量为负整数。
	wrap(double[] array):static DoubleBuffer 
		array - 缓冲区的支持数组。
		将double数组包装到缓冲区中。
		新的缓冲区将由给定的double数组支持；也就是说，对缓冲区的修改将导致数组被修改，反之亦然。新缓冲区的容量（capacity ）和限制（limit ）将等于array.length，其位置（position）将为零，其标记（mark）将未定义。它的支持数组将是给定的数组，其数组偏移量>0。
		返回新的double缓冲器。
	wrap(double[] array,int offset, int length):static DoubleBuffer 
		array - 新缓冲区的支持数组
		offset - 要使用的子数组的偏移量;必须是非负的，且不大于array.length。新缓冲区的位置将设置为这个值。
		length - 要使用的子数组的长度；必须为非负且不大于array.length-offset。新缓冲区的限制将设置为偏移量 + 长度。
		将double数组封装到缓冲区中。
		新的缓冲区将由给定的字节数组支持;也就是说，对缓冲区的修改将导致数组被修改，反之亦然。新缓冲区的容量（capacity ）将是array.length，其位置（position）将是offset，其限制（limit ）将是offset+length，其标记（mark）将未定义。它的支持数组将是给定的数组，它的数组偏移量为零。
		返回新的double缓冲器。
		【Throws】：
			IndexOutOfBoundsException  如果offset和length参数上的前提条件不成立。
	array():final double[] 
		△  返回此缓冲区支持的double数组（可选操作）。
		 对该缓冲区内容的修改将导致返回的数组内容被修改，反之亦然。
		 在调用此方法之前调用hasArray方法，以确保此缓冲区具有可访问的支持数组。
		 【Throws】：
			ReadOnlyBufferException 如果此缓冲区由数组支持，但为只读
			UnsupportedOperationException 如果此缓冲区没有可访问的数组支持。
	arrayOffset():final int 
		△ 返回缓冲区第一个元素（可选操作）的缓冲区的支持数组中的偏移量。
		如果此缓冲区由数组支持，则缓冲区位置p对应于数组索引p+arrayOffset()。
		在调用此方法之前调用hasArray方法，以确保此缓冲区具有可访问的支持数组。
		【Throws】：
			ReadOnlyBufferException 如果此缓冲区由数组支持，但为只读
			UnsupportedOperationException 如果此缓冲区没有可访问的数组支持。
	asReadOnlyBuffer():abstract DoubleBuffer
		★ 创建共享此缓冲区内容的新只读double缓冲区。
		新缓冲区的内容就是这个缓冲区的内容。对该缓冲区内容的更改将在新缓冲区中可见；但是，新缓冲区本身将是只读的，不允许修改共享内容。两个缓冲器的位置、限值和标记值是独立的。
		新缓冲区的容量、限制、位置和标记值将与此缓冲区的相同。
		如果此缓冲区本身是只读的，则此方法的行为方式与复制方法完全相同。
		返回新的只读缓冲器。 
	compact():abstract DoubleBuffer 
		★ 压缩此缓冲区（可选操作）。
		缓冲区的当前位置与其限制（如果有）之间的double值将被复制到缓冲区的开头。也就是说，在索引p=position()处的字节被复制到索引0处，在索引p+1处的double值被复制到索引1处，依此类推，直到在索引limit()-1处的double值被复制到索引n=limit()-1-p处为止。然后缓冲区的位置被设置为n+1，其限制被设置为其容量。如果定义了该标记，则该标记将被丢弃。
		缓冲区的位置被设置为复制的double值数量，而不是设置为零，因此可以在调用此方法之后立即调用另一个相对的put方法。
		返回此缓冲器。
		【Throws】：
			ReadOnlyBufferException 如果此缓冲区为只读
	compareTo(DoubleBuffer that):int 
		that - 要比较的对象。
		△ 将此缓冲区与另一个缓冲区进行比较。
		比较两个双缓冲区，方法是将其剩余元素的序列按字典顺序进行比较，而不考虑每个序列在其相应缓冲区中的起始位置。通过调用Byte.compare(byte,byte)对double元素进行比较，但-0.0和0.0被认为是相等的。Double.NaN被此方法视为等于自身，并且大于所有其他double值（包括Double.POSITIVE_INFINITY）。
		double缓冲区与任何其他类型的对象都不可比较。
		返回负整数、零或正整数，因为此缓冲区小于、等于或大于给定缓冲区。
	duplicate():abstract DoubleBuffer 
		★ 创建共享此缓冲区内容的新Double缓冲区。
		新缓冲区的内容就是这个缓冲区的内容。对该缓冲区内容的更改将在新缓冲区中可见，反之亦然；两个缓冲区的位置、限制和标记值将是独立的。
		新缓冲区的容量、限制、位置和标记值将与此缓冲区的相同。新的缓冲区将是直接缓冲区，如果并且仅当此缓冲区是直接缓冲区，并且只有当此缓冲区是只读的时才是只读的。
		返回新的Double缓冲器。
	equals(Object ob):boolean 
		ob - 要与此缓冲区进行比较的对象。
		△ 指示此缓冲区是否等于另一个对象。
		如果且仅当
			1、它们具有相同的元素类型，
			2、它们具有相同数量的剩余元素，以及
			3、其余两个元素的序列，独立于它们的起始位置，是点相等的。如果(a == b) || (Double.isNaN(a) && Double.isNaN(b))，该方法认为两个Double元素a和b相等。与Double.equals(Object)不同，值-0.0和+0.0被认为是相等的。
		double缓冲区不等于任何其他类型的对象。
		如果且仅当此缓冲区等于给定对象时返回true。
	get():abstract double 
		★ 相对get方法。读取缓冲区当前位置的double值，然后增加该位置。
		返回缓冲区当前位置的double值。
		【Throws】：
			BufferUnderflowException 如果缓冲器的当前位置不小于其极限值。
	get(double[] dst):DoubleBuffer 
		dst - 目标数组
		相对批量get方法。
		此方法将double值从该缓冲区传输到给定的目标数组。对src.get(a)形式的此方法的调用与下面调用的行为完全相同：
			 src.get(a, 0, a.length) 
		返回此缓冲器。
		【Throws】：
			BufferUnderflowException 如果此缓冲区中的剩余长度小于double。
	get(double[] dst, int offset, int length):DoubleBuffer 
		dst - 要写入double值的数组
		offset - 要写入的第一个double值数组中的偏移量；必须为非负且不大于dst.length。
		length - 要写入给定数组的最大字节数；必须为非负且不大于dst.length-offset。
		相对批量get方法。
		此方法将double值从该缓冲区传输到给定的目标数组。如果缓冲区中剩余的double值数量少于满足请求所需的double值数，即，如果length>remaining()，则不会传输任何double值，并引发BufferUnderflowException异常。
		否则，此方法会将此缓冲区中的length字节复制到给定的数组中，从该缓冲区的当前位置开始，并在数组中的给定偏移量处开始。然后，这个缓冲区的位置按length递增。
		换句话说，对src.get(dst，off，len)形式的此方法的调用与下面循环具有完全相同的效果：
		     for (int i = off; i < off + len; i++)
		         dst[i] = src.get():
		除了它首先检查缓冲区中是否有足够的double，而且它的效率可能更高。
		返回此缓冲器。
		【Throws】：
			BufferUnderflowException  如果此缓冲区中剩余的double值少于length。
			IndexOutOfBoundsException 如果offset和length参数上的前提条件不成立。
	get(int index):abstract double 
		index - 从中读取double值的索引
		★ 绝对get方法。读取给定索引处的double值。
		【Throws】：
			IndexOutOfBoundsException 如果索引为负或不小于缓冲区的限制。
	hasArray():final boolean 
		△ 指示此缓冲区是否由可访问的double数组支持。
		如果此方法返回true，则可以安全地调用数组和ArrayOffset方法。
		如果且仅当此缓冲区由数组支持且不是只读时返回true。
	hashCode():int 
		△  返回此缓冲区的当前哈希代码。
		double缓冲区的散列代码只依赖于其剩余的元素；也就是说，取决于从position()到limit()-1的元素（包括元素）。
		 由于缓冲区哈希代码依赖于内容，因此不建议将缓冲区用作哈希图或类似数据结构中的键，除非知道缓冲区的内容不会更改。
	isDirect():abstract boolean
		△ ★ 指示此double缓冲区是否为直接缓冲区。
		如果且仅当此缓冲区是直接缓冲区，则返回true。 
	order():abstract ByteOrder 
		★ 检索此缓冲区的字节顺序。
		通过分配或包装现有double数组创建的double缓冲区的字节顺序是底层硬件的本机顺序。创建为字节缓冲区视图的double缓冲区的字节顺序是创建视图时字节缓冲区的字节顺序。
		返回此缓冲区字节顺序。
	put(double d):abstract DoubleBuffer 
		d - 要写的double值
		★ 相对put方法（可选操作）。
		在当前位置将给定的double值写入缓冲区，然后增加位置。
		返回此缓冲器。
		【Throws】：
			BufferOverflowException 如果缓冲区的当前位置不小于其限制
			ReadOnlyBufferException 如果此缓冲区是只读的
	put(double[] src):final DoubleBuffer 
		src - 源数组
		相对批量put方法（可选操作）。
		此方法将给定源double数组的全部内容传输到此缓冲区。对dst.put(a)形式的此方法的调用与下面调用的行为完全相同
			 dst.put(a, 0, a.length) 
		返回此缓冲器。
		【Throws】：
			BufferOverflowException 如果缓冲区中没有足够的空间
			ReadOnlyBufferException 如果此缓冲区是只读的
	put(double[] src, int offset, int length):DoubleBuffer 
		src - 从中读取double值的数组
		offset - 要读取的第一个double值的数组内的偏移量；必须为非负且不大于array.length。
		length - 要从给定数组中读取的double数量；必须为非负且不大于array.length-offset
		相对批量put方法（可选操作）。
		此方法将double从给定的源数组传输到此缓冲区。如果要从数组中复制的double比保留在此缓冲区中的多，即，如果length>remaining()，则不会传输任何double值，并引发BufferOverflowException异常。
		否则，此方法将给定数组中的length字符复制到此缓冲区中，从数组中的给定偏移量（offset）开始，并在此缓冲区的当前位置开始。然后，这个缓冲区的位置按length递增。
		换句话说，对dst.put(src, off, len)形式的此方法的调用与下面循环具有完全相同的效果
		     for (int i = off; i < off + len; i++)
		         dst.put(a[i]);	
		但它首先检查缓冲区中是否有足够的空间，并且可能更高效。
		返回此缓冲器。
		【Throws】：
			BufferOverflowException 如果缓冲区中没有足够的空间
			IndexOutOfBoundsException 如果offset和length参数上的前提条件不成立。
			ReadOnlyBufferException 如果此缓冲区是只读的
	put(int index, double d):abstract DoubleBuffer 
		index - 写入double值的索引。
		d - 要写入的double值
		★ 绝对put方法（可选操作）。	
		在给定索引处将给定double值写入此缓冲区。
		返回此缓冲器。
		【Throws】：
			IndexOutOfBoundsException 如果index为负数或者不小于缓冲区的限制。
			ReadOnlyBufferException 如果此缓冲区是只读的
	put(DoubleBuffer src):DoubleBuffer 
		src - 要从中读取double值的源缓冲区；不能是此缓冲区
		相对批量put方法（可选操作）。
		此方法将给定源缓冲区剩余的double值的传输到此缓冲区。如果源缓冲区中剩余的double值比此缓冲区中的多，也就是说，如果src.remaining()>remaining()，则不会传输double值，并引发BufferOverflowException异常。
		否则，此方法将n=src.remaining() doubles从给定缓冲区复制到此缓冲区，从每个缓冲区的当前位置开始。然后两个缓冲区的位置都会增加n。
		换句话说，对dst.put(src, start, end)形式的此方法的调用与下面循环的效果完全相同
			while (src.hasRemaining())
        		 dst.put(src.get()); 
		但它首先检查缓冲区中是否有足够的空间，并且可能更高效。
		返回此缓冲器。
		【Throws】：
			IndexOutOfBoundsException 如果index为负数或者不小于缓冲区的限制。
			ReadOnlyBufferException 如果此缓冲区是只读的
	slice():abstract DoubleBuffer 
		★ 创建一个新的double缓冲区，其内容是该缓冲区内容的共享子序列。
		新缓冲区的内容将在此缓冲区的当前位置开始。对该缓冲区内容的更改将在新缓冲区中可见，反之亦然；两个缓冲区的位置、限制和标记值将是独立的。
		新缓冲区的位置将为零，其容量和限制将是该缓冲区中剩余的double数，其标记将未定义。新的缓冲区将是直接缓冲区，如果并且仅当此缓冲区是直接缓冲区，并且只有当此缓冲区是只读的时才是只读的。
	toString():String 
		△ 返回汇总此缓冲区状态的字符串。
	
	
	
		
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
附录：
	1、注：文档中的△符号表示覆盖重写方法，✘符号表示已淘汰的方法。	
	2、注：文档中的★符号表示抽象方法或者直接抛出UnsupportedOperationException异常的方法，总之没有实现具体功能代码的方法。	
	3、java8中nio直接缓冲区与非直接缓冲区的区别：
		非直接缓冲区：通过allocate方法分配缓冲区，将缓冲区建立在JVM的内存中。
		直接缓冲区：通过allocateDirect方法分配直接缓冲区，将缓冲区建立在物理内存中，可以提供更高效率。
		












		