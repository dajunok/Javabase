----------------------------------------ByteBuffer--------------------------------------------------------------------------------------------------------------
ByteBuffer：字节缓冲器	【Since:JDK1.4】
	此类定义了对字节缓冲区的六类操作：	
		● 读写单个字节的绝对和相对的get和put方法；
		● 相对批量获取（get）方法，将连续的字节序列从此缓冲区传输到数组中；
		● 将字节数组或其他字节缓冲区中的连续字节序列传输到此缓冲区的相对大容量放置（put）方法；
		● 绝对和相对的get和put方法，用于读取和写入其他原始类型的值，并按特定的字节顺序将这些值与字节序列进行转换；
		● 创建视图缓冲区的方法，该方法允许将字节缓冲区视为包含某些其他原始类型值的缓冲区；以及
		● 压缩（compacting）、复制（duplicating）和切片（slicing）字节缓冲区的方法。
	字节缓冲区可以通过分配（为缓冲区的内容分配空间）或将现有的字节数组包装到缓冲区中来创建。
	
	Direct vs. non-direct buffers（直接缓冲区与非直接缓冲区）：
		字节缓冲区可以是直接缓冲区，也可以是非直接缓冲区。给定一个直接字节缓冲区，Java虚拟机将尽最大努力在其上直接执行本地I/O操作。也就是说，在每次调用底层操作系统的一个本机I/O操作之前（或之后），它将尝试避免将缓冲区的内容复制到（或从）中间缓冲区。
		可以通过调用此类的allocateDirect工厂方法来创建直接字节缓冲区。此方法返回的缓冲区通常比非直接缓冲区具有更高的分配和释放成本。直接缓冲区的内容可能位于正常垃圾收集堆之外，因此它们对应用程序内存占用的影响可能不明显。因此，建议将直接缓冲区主要分配给受底层系统本机I/O操作影响的大型长期缓冲区。一般来说，最好是在只有当直接缓冲区在程序性能上产生可测量的收益时，才分配直接缓冲区。
		直接字节缓冲区也可以通过将文件的一个区域直接映射到内存中来创建。Java平台的实现可以可选地支持通过JNI从本机代码创建直接字节缓冲区。如果这类缓冲区的一个实例引用了一个不可访问的内存区域，那么访问该区域的尝试将不会更改缓冲区的内容，并将导致在访问时或稍后某个时间引发不确定的异常。
		字节缓冲区是直接缓冲区还是非直接缓冲区可以通过调用其is direct方法来确定。提供了这种方法，以便在性能关键的代码中进行显式缓冲区管理。
		
	Access to binary data（访问二进制数据）：	
		此类定义了用于读取和写入除布尔值以外的所有其他原始类型的值的方法。根据缓冲区的当前字节顺序，将原始值转换为（或从）字节序列，这些字节顺序可以通过order方法进行检索和修改。特定的字节顺序由ByteOrder类的实例表示。字节缓冲区的初始顺序总是BIG_ENDIAN。
		对于访问异构二进制数据（即不同类型的值序列），该类为每种类型定义一系列绝对和相对的get和put方法。例如，对于32位浮点值，此类定义：
			 float  getFloat()
			 float  getFloat(int index)
			 void  putFloat(float f)
			 void  putFloat(int index, float f)	
		为char、short、int、long和double类型定义了相应的方法。绝对get和put方法的索引参数是以字节为单位的，而不是以正在读取或写入的类型为单位的。	
		对于对同构二进制数据（即相同类型的值序列）的访问，该类定义可以创建给定字节缓冲区视图的方法。视图缓冲区只是另一个内容由字节缓冲区支持的缓冲区。对字节缓冲区内容的更改将在视图缓冲区中可见，反之亦然；两个缓冲区的位置（position）、限制（limit）和标记（mark）值是独立的。例如，asFloatBuffer方法创建FloatBuffer类的实例，该实例由调用该方法的字节缓冲区支持。为char、short、int、long和double类型定义了相应的视图创建方法。
		与上面描述的特定于类型的get和put方法相比，视图缓冲区有三个重要优势：
			● 视图缓冲区不是按字节索引的，而是按其值的类型特定大小索引的；
			● 视图缓冲区提供了相对批量的get和put方法，这些方法可以在缓冲区和数组或其他相同类型的缓冲区之间传输连续的值序列；以及
			● 视图缓冲区的效率可能更高，因为只有当其支持字节缓冲区是直接的时，它才是直接的。
		视图缓冲区的字节顺序固定为创建视图时其字节缓冲区的字节顺序。
	
	Invocation chaining（调用链接）
		此类中没有要返回值的方法被指定为返回调用它们的缓冲区。这允许将方法调用链接起来。语句的顺序：
			 bb.putInt(0xCAFEBABE);
			 bb.putShort(3);
			 bb.putShort(45);
		例如，可以用单个语句替换：
			 bb.putInt(0xCAFEBABE).putShort(3).putShort(45);			
		
		
	
	类定义	：public abstract class ByteBuffer extends Buffer implements Comparable<ByteBuffer>
	实现接口	：Comparable<ByteBuffer>
	直接子类	：MappedByteBuffer
------------------------------------------------------------------------------------------------------------------------------------------------------
Method Summary（方法概要）：
	allocate(int capacity):static ByteBuffer 
		capacity - 新缓冲区容量（字节）。
		分配新的字节缓冲区。
		新缓冲区的位置（position）将为零，其限制（limit）将等于其容量，其标记（mark）将未定义，并且其每个元素都将初始化为零。它将有一个支持数组，其数组偏移量将为零。
		返回新的字节缓冲器。
		【Throws】：
			IllegalArgumentException 如果容量为负整数。
	allocateDirect(int capacity):static ByteBuffer 
		capacity - 新缓冲区容量（字节）。
		分配新的直接字节缓冲区。
		新缓冲区的位置（position）将为零，其限制（limit）将等于其容量，其标记（mark）将未定义，并且其每个元素都将初始化为零。它是否有一个支持数组是不确定的。
		返回新的字节缓冲器。
		【Throws】：
			IllegalArgumentException 如果容量为负整数。
	wrap(byte[] array):static ByteBuffer 
		array - 缓冲区的支持数组。
		将字节数组包装到缓冲区中。
		新的缓冲区将由给定的字节数组支持；也就是说，对缓冲区的修改将导致数组被修改，反之亦然。新缓冲区的容量（capacity ）和限制（limit ）将等于array.length，其位置（position）将为零，其标记（mark）将未定义。它的支持数组将是给定的数组，其数组偏移量>0。
		返回新的字节缓冲器。
	wrap(byte[] array,int offset, int length):static ByteBuffer 
		array - 新缓冲区的支持数组
		offset - 要使用的子数组的偏移量;必须是非负的，且不大于array.length。新缓冲区的位置将设置为这个值。
		length - 要使用的子数组的长度；必须为非负且不大于array.length-offset。新缓冲区的限制将设置为偏移量 + 长度。
		将字节数组封装到缓冲区中。
		新的缓冲区将由给定的字节数组支持;也就是说，对缓冲区的修改将导致数组被修改，反之亦然。新缓冲区的容量（capacity ）将是array.length，其位置（position）将是offset，其限制（limit ）将是offset+length，其标记（mark）将未定义。它的支持数组将是给定的数组，它的数组偏移量为零。
		返回新的字节缓冲器。
		【Throws】：
			IndexOutOfBoundsException  如果offset和length参数上的前提条件不成立。
	array():final byte[]
		△  返回此缓冲区支持的字节数组（可选操作）。
		 对该缓冲区内容的修改将导致返回的数组内容被修改，反之亦然。
		 在调用此方法之前调用hasArray方法，以确保此缓冲区具有可访问的支持数组。
		 【Throws】：
			ReadOnlyBufferException 如果此缓冲区由数组支持，但为只读
			UnsupportedOperationException 如果此缓冲区没有可访问的数组支持。
	arrayOffset():final int 
		△ 返回缓冲区第一个元素（可选操作）的缓冲区的支持数组中的偏移量。
		如果此缓冲区由数组支持，则缓冲区位置p对应于数组索引p+arrayOffset()。
		在调用此方法之前调用hasArray方法，以确保此缓冲区具有可访问的支持数组。
		【Throws】：
			ReadOnlyBufferException 如果此缓冲区由数组支持，但为只读
			UnsupportedOperationException 如果此缓冲区没有可访问的数组支持。
	asCharBuffer():abstract CharBuffer 
		将此字节缓冲区的视图创建为字符缓冲区。
		新缓冲区的内容将在此缓冲区的当前位置开始。对该缓冲区内容的更改将在新缓冲区中可见，反之亦然；两个缓冲区的位置、限制和标记值将是独立的。
		新缓冲区的位置将为零，其容量及其限制将是该缓冲区中剩余字节数除以2，并且其标记将未定义。新的缓冲区将是直接缓冲区，如果并且仅当此缓冲区是直接缓冲区，并且只有当此缓冲区是只读的时才是只读的。
		返回新的字符缓冲器。
	asDoubleBuffer():abstract DoubleBuffer 
		将此字节缓冲区的视图创建为double缓冲区。
		新缓冲区的内容将在此缓冲区的当前位置开始。对该缓冲区内容的更改将在新缓冲区中可见，反之亦然；两个缓冲区的位置、限制和标记值将是独立的。
		新缓冲区的位置将为零，其容量及其限制将是该缓冲区中剩余字节数除以8，并且其标记将未定义。新的缓冲区将是直接缓冲区，如果并且仅当此缓冲区是直接缓冲区，并且只有当此缓冲区是只读的时才是只读的。
		返回新的double缓冲器。
	asFloatBuffer():abstract FloatBuffer 
		将此字节缓冲区的视图创建为float缓冲区。
		新缓冲区的内容将在此缓冲区的当前位置开始。对该缓冲区内容的更改将在新缓冲区中可见，反之亦然；两个缓冲区的位置、限制和标记值将是独立的。
		新缓冲区的位置将为零，其容量及其限制将是该缓冲区中剩余字节数除以4，并且其标记将未定义。新的缓冲区将是直接缓冲区，如果并且仅当此缓冲区是直接缓冲区，并且只有当此缓冲区是只读的时才是只读的。
		返回新的float缓冲器。
	asIntBuffer():abstract IntBuffer 
		将此字节缓冲区的视图创建为int缓冲区。
		新缓冲区的内容将在此缓冲区的当前位置开始。对该缓冲区内容的更改将在新缓冲区中可见，反之亦然；两个缓冲区的位置、限制和标记值将是独立的。
		新缓冲区的位置将为零，其容量及其限制将是该缓冲区中剩余字节数除以4，并且其标记将未定义。新的缓冲区将是直接缓冲区，如果并且仅当此缓冲区是直接缓冲区，并且只有当此缓冲区是只读的时才是只读的。
		返回新的int缓冲器。
	asLongBuffer():abstract LongBuffer 
		将此字节缓冲区的视图创建为long缓冲区。
		新缓冲区的内容将在此缓冲区的当前位置开始。对该缓冲区内容的更改将在新缓冲区中可见，反之亦然；两个缓冲区的位置、限制和标记值将是独立的。
		新缓冲区的位置将为零，其容量及其限制将是该缓冲区中剩余字节数除以8，并且其标记将未定义。新的缓冲区将是直接缓冲区，如果并且仅当此缓冲区是直接缓冲区，并且只有当此缓冲区是只读的时才是只读的。
		返回新的long缓冲器。
	asReadOnlyBuffer():abstract ByteBuffer 
		创建共享此缓冲区内容的新只读字节缓冲区。
		新缓冲区的内容就是这个缓冲区的内容。对该缓冲区内容的更改将在新缓冲区中可见；但是，新缓冲区本身将是只读的，不允许修改共享内容。两个缓冲器的位置、限值和标记值是独立的。
		新缓冲区的容量、限制、位置和标记值将与此缓冲区的相同。
		如果此缓冲区本身是只读的，则此方法的行为方式与复制方法完全相同。
		返回新的只读缓冲器。
	asShortBuffer():abstract ShortBuffer 
		将此字节缓冲区的视图创建为short缓冲区。
		新缓冲区的内容将在此缓冲区的当前位置开始。对该缓冲区内容的更改将在新缓冲区中可见，反之亦然；两个缓冲区的位置、限制和标记值将是独立的。
		新缓冲区的位置将为零，其容量及其限制将是该缓冲区中剩余字节数除以2，并且其标记将未定义。新的缓冲区将是直接缓冲区，如果并且仅当此缓冲区是直接缓冲区，并且只有当此缓冲区是只读的时才是只读的。
		返回新的long缓冲器。
	compact():abstract ByteBuffer 
		压缩此缓冲区（可选操作）。
		缓冲区的当前位置与其限制（如果有）之间的字节将被复制到缓冲区的开头。也就是说，在索引p=position()处的字节被复制到索引0处，在索引p+1处的字节被复制到索引1处，依此类推，直到在索引limit()-1处的字节被复制到索引n=limit()-1-p处为止。然后缓冲区的位置被设置为n+1，其限制被设置为其容量。如果定义了该标记，则该标记将被丢弃。
		缓冲区的位置被设置为复制的字节数，而不是设置为零，这样，对该方法的调用之后，可以立即调用另一个相对的put方法。
		如果写入未完成，请在从缓冲区写入数据后调用此方法。例如，下面的循环通过缓冲区buf将字节从一个通道复制到另一个通道：
		   buf.clear();          // Prepare buffer for use
		   while (in.read(buf) >= 0 || buf.position != 0) {
		       buf.flip();
		       out.write(buf);
		       buf.compact();    // In case of partial write
		   }
		返回此缓冲器。
		【Throws】：
			ReadOnlyBufferException 如果此缓冲区为只读
	compareTo(ByteBuffer that):int 
		that - 要比较的对象。
		△ 将此缓冲区与另一个缓冲区进行比较。
		两个字节的缓冲区通过在词典中比较其剩余元素的序列来进行比较，而不考虑每个序列在其相应缓冲区中的起始位置。通过调用Byte.compare(byte,byte)对字节元素进行比较。
		字节缓冲区与任何其他类型的对象都不可比较。
		返回负整数、零或正整数，因为此缓冲区小于、等于或大于给定缓冲区。
	duplicate():abstract ByteBuffer 
		创建共享此缓冲区内容的新字节缓冲区。
		新缓冲区的内容就是这个缓冲区的内容。对该缓冲区内容的更改将在新缓冲区中可见，反之亦然；两个缓冲区的位置、限制和标记值将是独立的。
		新缓冲区的容量、限制、位置和标记值将与此缓冲区的相同。新的缓冲区将是直接缓冲区，如果并且仅当此缓冲区是直接缓冲区，并且只有当此缓冲区是只读的时才是只读的。
		返回新的字节缓冲器。
	equals(Object ob):boolean 
		ob - 要与此缓冲区进行比较的对象。
		△ 指示此缓冲区是否等于另一个对象。
		如果且仅当
			1、它们具有相同的元素类型，
			2、它们具有相同数量的剩余元素，以及
			3、其余两个元素的序列，独立于它们的起始位置，是点相等的。
		字节缓冲区不等于任何其他类型的对象。
		如果且仅当此缓冲区等于给定对象时返回true。
	get():abstract byte 
		相对get方法。读取缓冲区当前位置的字节，然后增加该位置。
		返回缓冲区当前位置的字节。
		【Throws】：
			BufferUnderflowException 如果缓冲器的当前位置不小于其极限值。
	get(byte[] dst):ByteBuffer 
		dst - 目标数组
		相对批量get方法。
		此方法将字节从该缓冲区传输到给定的目标数组。对src.get(a)形式的此方法的调用与下面调用的行为完全相同：
			 src.get(a, 0, a.length) 
		返回此缓冲器。
		【Throws】：
			BufferUnderflowException 如果此缓冲区中剩余的字节少于length。
	get(byte[] dst, int offset, int length):ByteBuffer 
		dst - 要写入字节的数组
		offset - 要写入的第一个字节数组中的偏移量；必须为非负且不大于dst.length。
		length - 要写入给定数组的最大字节数；必须为非负且不大于dst.length-offset。
		相对批量get方法。
		此方法将字节从该缓冲区传输到给定的目标数组。如果缓冲区中剩余的字节数少于满足请求所需的字节数，即，如果length>remaining()，则不会传输任何字节，并引发BufferUnderflowException异常。
		否则，此方法会将此缓冲区中的length字节复制到给定的数组中，从该缓冲区的当前位置开始，并在数组中的给定偏移量处开始。然后，这个缓冲区的位置按length递增。
		换句话说，对src.get(dst，off，len)形式的此方法的调用与下面循环具有完全相同的效果：
		     for (int i = off; i < off + len; i++)
		         dst[i] = src.get():
		除了它首先检查缓冲区中是否有足够的字节，而且它的效率可能更高。
		返回此缓冲器。
		【Throws】：
			BufferUnderflowException  如果此缓冲区中剩余的字节少于length。
			IndexOutOfBoundsException 如果offset和length参数上的前提条件不成立。
	get(int index):abstract byte 
		index - 从中读取字节的索引
		绝对get方法。读取给定索引处的字节。
		【Throws】：
			IndexOutOfBoundsException 如果索引为负或不小于缓冲区的限制。
	getChar():abstract char 
		读取char值的相对get方法。
		在这个缓冲区的当前位置读取接下来的两个字节，根据当前字节顺序将它们组合成一个char值，然后将位置增加两个。
		返回缓冲区当前位置的char值
		【Throws】：
			IndexOutOfBoundsException 如果此缓冲区中剩余的少于两个字节。
	getChar(int index):abstract char 
		index - 从中读取字节的索引。
		用于读取char值的绝对get方法。
		在给定索引处读取两个字节，并根据当前字节顺序将它们组合成一个char值。
		返回给定索引处的char值。
		【Throws】：
			IndexOutOfBoundsException 如果索引为负或不小于缓冲区的限制，则减去1
	getDouble():abstract double 
		读取double值的相对get方法。
		在这个缓冲区的当前位置读取接下来的8个字节，根据当前字节顺序将它们组合成一个double值，然后将位置增加8个。
		返回缓冲区当前位置的double值
		【Throws】：
			IndexOutOfBoundsException 如果此缓冲区中剩余的少于八个字节。
	getDouble(int index):abstract double 
		index - 从中读取字节的索引。
		用于读取double值的绝对get方法。
		在给定索引处读取8个字节，并根据当前字节顺序将它们组合成一个double值。
		返回给定索引处的double值。
		【Throws】：
			IndexOutOfBoundsException 如果索引为负或不小于缓冲区的限制，则减去7
	getFloat():abstract float 
		读取float值的相对get方法。
		在这个缓冲区的当前位置读取接下来的4个字节，根据当前字节顺序将它们组合成一个float值，然后将位置增加4个。
		返回缓冲区当前位置的float值
		【Throws】：
			IndexOutOfBoundsException 如果此缓冲区中剩余的少于四个字节。
	getFloat(int index):abstract float 
		index - 从中读取字节的索引。
		用于读取float值的绝对get方法。
		在给定索引处读取4个字节，并根据当前字节顺序将它们组合成一个float值。
		返回给定索引处的float值。
		【Throws】：
			IndexOutOfBoundsException 如果索引为负或不小于缓冲区的限制，则减3
	getInt():abstract int 
		读取int值的相对get方法。
		在这个缓冲区的当前位置读取接下来的4个字节，根据当前字节顺序将它们组合成一个int值，然后将位置增加4个。
		返回缓冲区当前位置的int值
		【Throws】：
			IndexOutOfBoundsException 如果此缓冲区中剩余的少于四个字节。
	getInt(int index):abstract int 
		index - 从中读取字节的索引。
		用于读取int值的绝对get方法。
		在给定索引处读取4个字节，并根据当前字节顺序将它们组合成一个int值。
		返回给定索引处的int值。
		【Throws】：
			IndexOutOfBoundsException 如果索引为负或不小于缓冲区的限制，则减3
	getLong():abstract long 
		读取long值的相对get方法。
		在这个缓冲区的当前位置读取接下来的8个字节，根据当前字节顺序将它们组合成一个long值，然后将位置增加8个。
		返回缓冲区当前位置的long值
		【Throws】：
			IndexOutOfBoundsException 如果此缓冲区中剩余的少于八个字节。
	getLong(int index):abstract long 
		index - 从中读取字节的索引。
		用于读取long值的绝对get方法。
		在给定索引处读取8个字节，并根据当前字节顺序将它们组合成一个long值。
		返回给定索引处的long值。
		【Throws】：
			IndexOutOfBoundsException 如果索引为负或不小于缓冲区的限制，则减7
	getShort():abstract short 
		读取short值的相对get方法。
		在这个缓冲区的当前位置读取接下来的2个字节，根据当前字节顺序将它们组合成一个short值，然后将位置增加2个。
		返回缓冲区当前位置的short值
		【Throws】：
			IndexOutOfBoundsException 如果此缓冲区中剩余的少于两个字节。
	getShort(int index):abstract short 
		index - 从中读取字节的索引。
		用于读取short值的绝对get方法。
		在给定索引处读取2个字节，并根据当前字节顺序将它们组合成一个short值。
		返回给定索引处的short值。
		【Throws】：
			IndexOutOfBoundsException 如果索引为负或不小于缓冲区的限制，则减1
	hasArray():inal boolean 
		指示此缓冲区是否由可访问的字节数组支持。
		△ 如果此方法返回true，则可以安全地调用数组和arrayOffset方法。
		如果且仅当此缓冲区由数组支持且不是只读时返回true。
	hashCode():int 
		△ 返回此缓冲区的当前哈希代码。
		字节缓冲区的散列代码仅取决于其剩余的元素；也就是说，取决于从position()到limit()-1的元素（包括元素）。
		由于缓冲区哈希代码依赖于内容，因此不建议将缓冲区用作哈希图或类似数据结构中的键，除非知道缓冲区的内容不会更改。
		返回此缓冲区的当前哈希代码。
	isDirect():abstract boolean 
		△ 指示此字节缓冲区是否为直接缓冲区。
		如果且仅当此缓冲区是直接的，则返回true。
	order():final ByteOrder 
		检索此缓冲区的字节顺序。
		字节顺序用于读取或写入多字节值，以及创建作为此字节缓冲区视图的缓冲区。新创建的字节缓冲区的顺序总是BIG_ENDIAN。
		返回这个缓冲区的字节顺序。
	order(ByteOrder bo):final ByteBuffer 
		bo - 新的字节顺序， BIG_ENDIAN或者LITTLE_ENDIAN。
		修改此缓冲区的字节顺序。
		返回此缓冲器。
	put(byte b):abstract ByteBuffer 
		b - 要写入的字节
		相对put方法（可选操作）。
		在当前位置将给定的字节写入缓冲区，然后增加该位置。
		返回此缓冲器。
		【Throws】：
			BufferOverflowException 如果缓冲区的当前位置不小于其限制
			ReadOnlyBufferException 如果此缓冲区是只读的
	put(byte[] src):final ByteBuffer 
		src - 源数组
		相对批量put方法（可选操作）。
		此方法将给定源字节数组的全部内容传输到此缓冲区。对dst.put(a)形式的此方法的调用与下面调用的行为完全相同
			 dst.put(a, 0, a.length) 
		【Throws】：
			BufferOverflowException 如果缓冲区中没有足够的空间
			ReadOnlyBufferException 如果此缓冲区是只读的
	put(byte[] src, int offset, int length):ByteBuffer 
		src - 从中读取字节的数组
		offset - 要读取的第一个字节的数组内的偏移量；必须为非负且不大于array.length。
		length - 要从给定数组中读取的字节数；必须为非负且不大于array.length-offset
		相对批量put方法（可选操作）。
		此方法将字节从给定的源数组传输到此缓冲区。如果要从数组中复制的字节大于此缓冲区中的剩余字节空间，即，如果length>remaining()，则不会传输任何字节，并引发BufferOverflowException异常。
		否则，此方法将给定数组中的length字节复制到此缓冲区中，从数组中的给定偏移量（offset）开始，并在此缓冲区的当前位置开始。然后，这个缓冲区的位置按length递增。
		换句话说，对dst.put(src, off, len)形式的此方法的调用与下面循环具有完全相同的效果
		     for (int i = off; i < off + len; i++)
		         dst.put(a[i]);	
		但它首先检查缓冲区中是否有足够的空间，并且可能更高效。
		返回此缓冲器。
		【Throws】：
			BufferOverflowException 如果缓冲区中没有足够的空间
			IndexOutOfBoundsException 如果offset和length参数上的前提条件不成立。
			ReadOnlyBufferException 如果此缓冲区是只读的
	put(int index, byte b):abstract ByteBuffer 
		index - 写入字节的索引
		b - 要写入的字节值
		绝对put方法（可选操作）。	
		在给定索引处将给定字节写入此缓冲区。
		返回此缓冲器。
		【Throws】：
			IndexOutOfBoundsException 如果index为负数或者不小于缓冲区的限制。
			ReadOnlyBufferException 如果此缓冲区是只读的
	put(ByteBuffer src):ByteBuffer 
		src - 要从中读取字节的源缓冲区；不能是此缓冲区
		相对批量put方法（可选操作）。
		此方法将给定源缓冲区中剩余的字节传输到此缓冲区。如果源缓冲区中的剩余字节多于此缓冲区中的剩余字节，也就是说，如果src.remaining()>remaining()，则不会传输任何字节，并引发BufferOverflowException异常。
		否则，此方法将n=src.remaining()字节从给定缓冲区复制到此缓冲区，从此缓冲区的当前位置开始。然后两个缓冲区的位置都会增加n。
		换句话说，对dst.put(src)形式的此方法的调用与下面循环具有完全相同的效果
		     while (src.hasRemaining())
		         dst.put(src.get()); 			
		但它首先检查缓冲区中是否有足够的空间，并且可能更高效。
		返回此缓冲器。
		【Throws】：
			BufferOverflowException 如果此缓冲区中没有足够的空间容纳源缓冲区中的剩余字节
			IllegalArgumentException 如果源缓冲区是此缓冲区
			ReadOnlyBufferException 如果此缓冲区是只读的
	putChar(char value):abstract ByteBuffer 
		value - 要写入的char值
		用于写入char值的相对put方法（可选操作）。
		以当前字节顺序将包含给定char值的两个字节写入当前位置的缓冲区，然后将该位置增加两个字节。
		返回此缓冲器。
		【Throws】：
			BufferOverflowException 如果此缓冲区中剩余的字节少于两个
			ReadOnlyBufferException 如果此缓冲区是只读的
	putChar(int index, char value):abstract ByteBuffer 
		index - 写入字节的索引
		value - 要写入的char值
		用于写入char值的绝对put方法（可选操作）。	
		按当前字节顺序将包含给定char值的两个字节写入给定索引处的缓冲区。
		【Throws】：
			IndexOutOfBoundsException 如果索引为负或不小于缓冲区的限制，则减去1。
			ReadOnlyBufferException 如果此缓冲区是只读的
	putDouble(double value):abstract ByteBuffer 
		value - 要写入的double值
		用于写入double值的相对put方法（可选操作）。
		以当前字节顺序将包含给定double值的8个字节写入当前位置的缓冲区，然后将该位置增加8个字节。
		返回此缓冲器。
		【Throws】：
			BufferOverflowException 如果此缓冲区中剩余的字节少于8个
			ReadOnlyBufferException 如果此缓冲区是只读的
	putDouble(int index, double value):abstract ByteBuffer 
		index - 写入字节的索引
		value - 要写入的double值
		用于写入double值的绝对put方法（可选操作）。	
		按当前字节顺序将包含给定double值的8个字节写入给定索引处的缓冲区。
		【Throws】：
			IndexOutOfBoundsException 如果索引为负或不小于缓冲区的限制，则减去7。
			ReadOnlyBufferException 如果此缓冲区是只读的
	putFloat(float value):abstract ByteBuffer 
		value - 要写入的float值
		用于写入float值的相对put方法（可选操作）。
		以当前字节顺序将包含给定float值的4个字节写入当前位置的缓冲区，然后将该位置增加4个字节。
		返回此缓冲器。
		【Throws】：
			BufferOverflowException 如果此缓冲区中剩余的字节少于4个
			ReadOnlyBufferException 如果此缓冲区是只读的
	putFloat(int index, float value):abstract ByteBuffer 
		index - 写入字节的索引
		value - 要写入的float值
		用于写入float值的绝对put方法（可选操作）。	
		按当前字节顺序将包含给定float值的4个字节写入给定索引处的缓冲区。
		【Throws】：
			IndexOutOfBoundsException 如果索引为负或不小于缓冲区的限制，则减去3。
			ReadOnlyBufferException 如果此缓冲区是只读的
	putInt(int value):abstract ByteBuffer 
		value - 要写入的int值
		用于写入int值的相对put方法（可选操作）。
		以当前字节顺序将包含给定int值的4个字节写入当前位置的缓冲区，然后将该位置增加4个字节。
		返回此缓冲器。
		【Throws】：
			BufferOverflowException 如果此缓冲区中剩余的字节少于4个
			ReadOnlyBufferException 如果此缓冲区是只读的
	putInt(int index, int value):abstract ByteBuffer 
		index - 写入字节的索引
		value - 要写入的int值
		用于写入int值的绝对put方法（可选操作）。	
		按当前字节顺序将包含给定int值的4个字节写入给定索引处的缓冲区。
		【Throws】：
			IndexOutOfBoundsException 如果索引为负或不小于缓冲区的限制，则减去3。
			ReadOnlyBufferException 如果此缓冲区是只读的
	putLong(int index, long value):abstract ByteBuffer 
		value - 要写入的int值
		用于写入long值的相对put方法（可选操作）。
		以当前字节顺序将包含给定long值的8个字节写入当前位置的缓冲区，然后将该位置增加8个字节。
		返回此缓冲器。
		【Throws】：
			BufferOverflowException 如果此缓冲区中剩余的字节少于8个
			ReadOnlyBufferException 如果此缓冲区是只读的
	putLong(long value):abstract ByteBuffer 
		index - 写入字节的索引
		value - 要写入的long值
		用于写入long值的绝对put方法（可选操作）。	
		按当前字节顺序将包含给定long值的8个字节写入给定索引处的缓冲区。
		【Throws】：
			IndexOutOfBoundsException 如果索引为负或不小于缓冲区的限制，则减去7。
			ReadOnlyBufferException 如果此缓冲区是只读的
	putShort(int index, short value):abstract ByteBuffer 
		value - 要写入的int值
		用于写入short值的相对put方法（可选操作）。
		以当前字节顺序将包含给定short值的两个字节写入当前位置的缓冲区，然后将该位置增加两个字节。
		返回此缓冲器。
		【Throws】：
			BufferOverflowException 如果此缓冲区中剩余的字节少于两个
			ReadOnlyBufferException 如果此缓冲区是只读的
	putShort(short value):abstract ByteBuffer 
		index - 写入字节的索引
		value - 要写入的short值
		用于写入short值的绝对put方法（可选操作）。	
		按当前字节顺序将包含给定short值的两个字节写入给定索引处的缓冲区。
		【Throws】：
			IndexOutOfBoundsException 如果索引为负或不小于缓冲区的限制，则减去1。
			ReadOnlyBufferException 如果此缓冲区是只读的
	slice():abstract ByteBuffer 
		创建一个新的字节缓冲区，其内容是该缓冲区内容的共享子序列。
		新缓冲区的内容将在此缓冲区的当前位置开始。对该缓冲区内容的更改将在新缓冲区中可见，反之亦然；两个缓冲区的位置、限制和标记值将是独立的。
		新缓冲区的位置将为零，其容量和限制将是该缓冲区中剩余的字节数，其标记将未定义。新的缓冲区将是直接缓冲区，如果并且仅当此缓冲区是直接缓冲区，并且只有当此缓冲区是只读的时才是只读的。
		返回此缓冲器。
	toString():String 
		△ 返回汇总此缓冲区状态的字符串。
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
		
		
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
附录：
	1、注：文档中的△符号表示覆盖重写方法，✘符号表示已淘汰的方法。	
	2、注：文档中的★符号表示抽象方法或者直接抛出UnsupportedOperationException异常的方法，总之没有实现具体功能代码的方法。	
	3、java8中nio直接缓冲区与非直接缓冲区的区别：
		非直接缓冲区：通过allocate方法分配缓冲区，将缓冲区建立在JVM的内存中。
		直接缓冲区：通过allocateDirect方法分配直接缓冲区，将缓冲区建立在物理内存中，可以提供更高效率。		
	4、BIG_ENDIAN 与 LITTLE_ENDIAN
		BIG_ENDIAN是指低地址存放最高有效字节（MSB），	而LITTLE_ENDIAN则是低地址存放最低有效字节（LSB）。 谈到字节序的问题，必然牵涉到两大CPU派系。那就是Motorola的PowerPC系列CPU和Intel的x86系列CPU。PowerPC系列采用BIG_ENDIAN方式存储数据，而x86系列则采用LITTLE_ENDIAN方式存储数据。











		