----------------------------------------MembershipKey--------------------------------------------------------------------------------------------------------------
MembershipKey：成员资格密钥（成员密钥） 【Since:1.7】
	表示Internet协议（IP）多播组成员身份的令牌。
	成员密钥可以表示接收发送到组的所有数据报的成员身份，也可以表示特定于源的成员身份，这意味着它表示仅接收来自特定源地址的数据报的成员身份。成员密钥是否特定于源，可以通过调用其sourceAddress方法来确定。
	成员密钥在创建时有效，并且在通过调用drop方法删除成员资格或关闭通道之前保持有效。成员密钥的有效性可以通过调用其isValid方法进行判断。
	如果成员密钥不是特定于源的，并且底层操作系统支持源筛选，则可以使用block和unblock方法来阻塞或取消阻塞来自特定源地址的多播数据报。
	
	
	
	类定义	：public abstract class MembershipKey
------------------------------------------------------------------------------------------------------------------------------------------------------
Constructor Summary（构造器概要）：
	protected MembershipKey()
		初始化此类的新实例。
			
Method Summary（方法概要）：
	block(InetAddress source):abstract MembershipKey 
		source - 要阻塞的源地址。
		阻塞来自给定源地址的多播数据报。
		如果此成员密钥不是特定于源的，并且底层操作系统支持源筛选，则此方法将阻塞来自给定源地址的多播数据报。如果给定的源地址已被阻塞，则此方法无效。源地址被阻塞后，仍然可以从该源接收数据报。当数据报在套接字的接收缓冲区中等待接收时，就会出现这种情况。
		返回此成员密钥。
		【Throws】：
			IllegalArgumentException 如果源参数不是单播地址或与多播组的地址类型不同。
			IllegalStateException 如果此成员密钥是特定于源的或不再有效。
			UnsupportedOperationException 如果底层操作系统不支持源筛选。
			IOException 如果发生I/O错误。
	channel():abstract MulticastChannel
		 返回为其创建此成员密钥的通道。即使成员身份无效，此方法仍将继续返回通道。
	drop():abstract void 
		删除成员资格。
		如果成员密钥表示接收所有数据报的成员身份，则成员身份将被删除，通道将不再接收发送到组的任何数据报。如果成员键是源特定的，那么通道将不再接收从该源地址发送到组的数据报。
		成员资格被删除后，仍然可以接收发送到组的数据报。当数据报在套接字的接收缓冲区中等待接收时，就会出现这种情况。删除成员身份后，通道可以再次加入组，在这种情况下，将返回新的成员密钥。
		返回时，此成员身份对象将无效。如果多播组成员身份已经无效，则调用此方法没有效果。一旦多播组成员身份无效，它将永远无效。
	group():abstract InetAddress 
		返回为此成员密钥创建的多播组。此方法将继续返回组，即使成员身份无效。
	isValid():abstract boolean 
		指示此成员身份是否有效。
		多播组成员身份在创建时有效，并且在通过调用drop方法除去成员身份或关闭通道之前保持有效。
	networkInterface():abstract NetworkInterface 
		返回为其创建此成员密钥的网络接口。即使成员身份无效，此方法仍将继续返回网络接口。
	sourceAddress():abstract InetAddress 
		如果此成员密钥是特定于源的，则返回源地址；如果此成员身份不是特定于源的，则返回null。
	unblock(InetAddress source):abstract MembershipKey 
		source - 要取消阻塞的源地址
		从先前使用block方法阻塞的给定源地址中取消阻塞多播数据报。
	
	
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
附录：
	1、注：文档中的△符号表示覆盖重写方法，✘符号表示已淘汰的方法。	
	2、注：文档中的★符号表示抽象方法或者直接抛出UnsupportedOperationException异常的方法，总之没有实现具体功能代码的方法。	
	3、java8中nio直接缓冲区与非直接缓冲区的区别：
		非直接缓冲区：通过allocate方法分配缓冲区，将缓冲区建立在JVM的内存中。
		直接缓冲区：通过allocateDirect方法分配直接缓冲区，将缓冲区建立在物理内存中，可以提供更高效率。
		


