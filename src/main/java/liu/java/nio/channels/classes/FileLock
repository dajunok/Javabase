----------------------------------------FileLock--------------------------------------------------------------------------------------------------------------
FileLock：文件锁 【Since:1.4】
	表示文件区域上的锁的标记。
	每次通过FileChannel类的lock或tryLock方法或异步AsynchronousFileChannel类的lock或tryLock方法获取文件锁时，都会创建一个文件锁对象。
	文件锁定对象最初有效。它是有效的，直到通过调用释放方法、通过关闭用于获取它的通道或通过Java虚拟机的终止来释放锁为止，无论哪一个都是最先出现的。可以通过调用其isValid方法来测试锁的有效性。
	文件锁定要么是独占的，要么是共享的。共享锁防止其他并发运行的程序获取重叠的独占锁，但允许它们获取重叠的共享锁。独占锁防止其他程序获取任何类型的重叠锁。一旦释放锁，它就不会对其他程序可能获取的锁产生进一步的影响。
	锁是独占的还是共享的，可以通过调用它的isShared方法来确定。有些平台不支持共享锁，在这种情况下，共享锁的请求会自动转换为独占锁的请求。
	由单个Java虚拟机保存在特定文件上的锁不重叠。重叠方法可用于测试候选锁范围是否与现有锁重叠。
	一个文件锁对象记录其文件被锁定的文件通道、锁定的类型和有效性以及锁定区域的位置和大小。只有锁的有效性会随着时间而改变；锁状态的所有其他方面都是不可变的。
	文件锁是代表整个Java虚拟机来保存的。它们不适合控制同一虚拟机中多个线程对文件的访问。
	文件锁对象可供多个并发线程安全使用。
	
	Platform dependencies（平台依赖）：
	此文件锁API旨在直接映射到底层操作系统的本机锁定功能。因此，对于所有可以访问文件的程序来说，文件上的锁应该是可见的，而不管这些程序是用什么语言写的。
	锁是否实际阻止其他程序访问锁定区域的内容取决于系统，因此未指定。一些系统的本机文件锁定功能只是建议性的，这意味着程序必须协作遵守已知的锁定协议，以确保数据完整性。在其他系统上，本机文件锁定是强制的，这意味着如果一个程序锁定了文件的某个区域，那么实际上会阻止其他程序以违反锁定的方式访问该区域。在其他系统上，无论本地文件锁是建议锁还是强制锁，都可以根据每个文件进行配置。为了确保跨平台的一致和正确行为，强烈建议将此API提供的锁用作顾问锁。
	在某些系统上，获取文件区域的强制锁会阻止该区域映射到内存，反之亦然。结合锁定和映射的程序应该为这种组合失败做好准备。
	在一些系统中，关闭通道释放Java虚拟机在底层文件上所持有的所有锁，而不管锁是通过该通道获取的还是通过在同一文件上打开的另一通道来实现的。强烈建议在程序中使用唯一的通道来获取任何给定文件上的所有锁。
	某些网络文件系统允许文件锁仅在锁定的区域是页面对齐的并且是底层硬件页面大小的整数倍时与内存映射文件一起使用。有些网络文件系统不在扩展到某个位置（通常是230或231）的区域上实现文件锁定。通常，在锁定驻留在网络文件系统上的文件时应该非常小心。
	
	
	
	类定义	：public abstract class FileLock implements AutoCloseable
	实现接口	：AutoCloseable
------------------------------------------------------------------------------------------------------------------------------------------------------
Constructor Summary（构造器概要）：
	protected FileLock(AsynchronousFileChannel channel,long position, long size, boolean shared)
		channel - 持有此锁的文件的通道。
		position - 文件中锁定区域开始的位置；必须为非负。
		size - 锁定区域的大小；必须为非负，并且总和位置+size必须为非负。
		shared - 如果是共享所，则为true；如果是独占锁，则为false。
		初始化此类的新实例。
		【Throws】：
			IllegalArgumentException 如果参数的前提条件不成立。
	protected FileLock(FileChannel channel,long position, long size, boolean shared)
		channel - 持有此锁的文件的文件通道。
		position - 文件中锁定区域开始的位置；必须为非负。
		size - 锁定区域的大小；必须为非负，并且总和位置+size必须为非负。
		shared - 如果是共享所，则为true；如果是独占锁，则为false。
		初始化此类的新实例。
		【Throws】：
			IllegalArgumentException 如果参数的前提条件不成立。
			
Method Summary（方法概要）：
	acquiredBy():Channel 
		返回获取此锁的文件的通道。		
	channel():final FileChannel 
		返回获取此锁的文件的文件通道。
		此方法已被acquiredBy方法取代。
	close():final void 
		△ 此方法调用release()方法。它被添加到类中，以便与自动资源管理块构造结合使用。
	isShared():final boolean 
		指示是否为共享锁。
		如果锁是共享的，则返回true；如果锁是独占的，则返回false。
	isValid():abstract boolean 
		★ 指示此锁是否有效。
		锁定对象保持有效，直到释放或关闭相关文件通道为止，以先到者为准。
	overlaps(long position, long size):final boolean 
		position - 锁定范围的起始位置。
		size - 锁定范围的大小。
		指示此锁是否与给定的锁范围重叠。
		如果且仅当此锁和给定的锁范围至少重叠一个字节时返回true。
	position():final long 
		返回锁定区域第一个字节的文件中的位置。
		锁定区域不需要包含在实际底层文件中，甚至不需要重叠，因此此方法返回的值可能超过文件的当前大小。
	release():abstract void
		★  释放此锁。
		如果此锁对象有效，则调用此方法将释放锁并使对象无效。如果此锁对象无效，则调用此方法无效。
		【Throws】：
			ClosedChannelException 如果用于获取此锁的通道不再打开。
			IOException 如果发生I/O错误。
	size():final long 
		返回锁定区域的大小（以字节为单位）。
		锁定区域不需要包含在实际底层文件中，甚至不需要重叠，因此此方法返回的值可能超过文件的当前大小。
	toString():final String 
		△ 返回描述此锁的范围、类型和有效性的字符串。
	
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
附录：
	1、注：文档中的△符号表示覆盖重写方法，✘符号表示已淘汰的方法。	
	2、注：文档中的★符号表示抽象方法或者直接抛出UnsupportedOperationException异常的方法，总之没有实现具体功能代码的方法。	
	3、java8中nio直接缓冲区与非直接缓冲区的区别：
		非直接缓冲区：通过allocate方法分配缓冲区，将缓冲区建立在JVM的内存中。
		直接缓冲区：通过allocateDirect方法分配直接缓冲区，将缓冲区建立在物理内存中，可以提供更高效率。
		


