----------------------------------------SelectionKey--------------------------------------------------------------------------------------------------------------
SelectionKey：选择键 【Since:1.4】
	表示用选择器对SelectableChannel进行注册的标记。
	每当用选择器注册通道时，就创建一个选择键。键一直有效，直到调用取消它的cancel方法，关闭它的通道，或者关闭它的选择器。取消键不会立即将其从选择器中移除；而是将其添加到选择器的已取消键集合中，以便在下次selection操作期间移除。可以通过调用isValid方法来测试键的有效性。
	选择键包含两个以整数值表示的操作集。操作集的每个位表示键的通道支持的可选操作的类别。
		● 关注（interest）集确定下次调用选择器的selection方法时，将确定哪些操作类别是否就绪。使用创建键时给定的值初始化关注（interest）集；稍后可以通过interestOps(int)方法更改它。
		● 就绪（ready）集标识操作类别，对于这些操作类别，键的选择器已检测到键的通道已就绪。在创建键时，就绪集初始化为零；稍后，选择器可以在selection操作期间更新它，但不能直接更新它。
	选择键的就绪（ready）集表示其通道已准备好接受某个操作类别，这是一个提示，但不能保证线程可以执行此类类别中的操作而不会导致线程阻塞。在完成selection操作后，就绪集很可能立即准确。外部事件和对相应通道调用的I/O操作可能会使其不准确。
	这个类定义了所有已知的操作集位，但是给定通道支持的确切位取决于通道的类型。SelectableChannel的每个子类都定义了一个validOps()方法，该方法返回一个集合，仅标识通道支持的那些操作。尝试设置或测试键的通道不支持的操作集位将导致适当的运行时异常。
	通常需要将一些特定于应用程序的数据与选择键相关联，例如，一个表示高级协议状态并处理就绪通知的对象，以便实现该协议。因此，选择键支持将单个任意对象附加到键上。对象可以通过attach方法附加，然后通过attachment方法检索。
	选择键可供多个并发线程安全使用。一般来说，读写关注集的操作与选择器的某些操作同步。这种同步的具体执行方式取决于实现：在简单的实现中，如果选择操作已经在进行中，则读或写关注集可能无限期阻塞；在高性能实现中，读或写关注集可能短暂阻塞（如果有的话）。在任何情况下，selection操作都将始终使用操作开始时的当前关注集值。
	
	类定义	：public abstract class SelectionKey
	直接子类	：AbstractSelectionKey
------------------------------------------------------------------------------------------------------------------------------------------------------
Field Summary（字段概要）：
	OP_ACCEPT : int
		用于套接字接受操作的操作设置位。
		假设选择键的关注集在选择（selection）操作开始时包含OP_ACCEPT。如果选择器检测到相应的服务器套接字通道已准备好接受另一个连接，或者有一个挂起的错误，那么它将向键的就绪集添加OP_ACCEPT，并将键添加到其选定的键集。
	OP_CONNECT : int
		用于套接字连接操作的操作设置位。
		假设选择键的关注集在选择（selection）操作开始时包含OP_CONNECT。如果选择器检测到相应的套接字通道已准备好完成其连接序列，或者有一个挂起的错误，那么它将添加OP_CONNECT到键的就绪集，并将键添加到其选定的键集。
	OP_READ : int
		操作设置位用于读取操作。
		假设选择键的关注集包含选择（selection）操作开始时读取的操作。如果选择器检测到相应的通道已准备好读取、已到达流的末尾、已远程关闭以进行进一步读取或有错误挂起，则它将向键的就绪操作集添加OP_READ，并将键添加到其选定的键集。
	OP_WRITE : int
		操作设置位用于写入操作。
		假设选择键的关注集在选择（selection）操作开始时包含OP_WRITE。如果选择器检测到相应的通道已准备好写入、已远程关闭以进行进一步写入或有错误挂起，则它将向密钥的就绪集添加OP_WRITE，并将键添加到其选定的键集。

Constructor Summary（构造器概要）：
	protected SelectionKey()
		构造此类的实例。
		
Method Summary（方法概要）：
	attach(Object ob):final Object 
	attachment():final Object 
	cancel():abstract void 
	channel():abstract SelectableChannel 
	interestOps():abstract int 
	interestOps(int ops):abstract SelectionKey 
	isAcceptable():final boolean 
	isConnectable():final boolean 
	isReadable():final boolean 
	isValid():abstract boolean 
	isWritable():final boolean 
	readyOps():abstract int 
	selector():abstract Selector 
	
	
	
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
附录：
	1、注：文档中的△符号表示覆盖重写方法，✘符号表示已淘汰的方法。	
	2、注：文档中的★符号表示抽象方法或者直接抛出UnsupportedOperationException异常的方法，总之没有实现具体功能代码的方法。	
	3、java8中nio直接缓冲区与非直接缓冲区的区别：
		非直接缓冲区：通过allocate方法分配缓冲区，将缓冲区建立在JVM的内存中。
		直接缓冲区：通过allocateDirect方法分配直接缓冲区，将缓冲区建立在物理内存中，可以提供更高效率。