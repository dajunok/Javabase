----------------------------------------AbstractSelectableChannel--------------------------------------------------------------------------------------------------------------
AbstractSelectableChannel：抽象可选通道 【Since:1.4】
	可选通道的基本实现类。
	此类定义了处理通道注册、取消注册和关闭机制的方法。它维护该通道的当前阻塞模式及其当前选择键集。它执行实现SelectableChannel规范所需的所有同步。此类中定义的抽象protected方法的实现不需要与可能参与相同操作的其他线程同步。
	
	
	类定义	：public abstract class AbstractSelectableChannel extends SelectableChannel
	实现接口	：Closeable, AutoCloseable, Channel, InterruptibleChannel
	直接子类	：DatagramChannel, Pipe.SinkChannel, Pipe.SourceChannel, ServerSocketChannel, SocketChannel
------------------------------------------------------------------------------------------------------------------------------------------------------
Constructor Summary（构造器概要）：
	protected AbstractSelectableChannel(SelectorProvider provider)
		初始化此类的新实例。
		
Method Summary（方法概要）：
	blockingLock():final Object 
		△ 检索configureBlocking和register方法同步的对象。这在适配器的实现中通常很有用，因为适配器需要在短时间内保持特定的阻塞模式。
		返回阻塞模式锁对象。
	configureBlocking(boolean block):final SelectableChannel 
		block - 如果为true，则此通道将置于阻塞模式；如果为false，则将置于非阻塞模式。
		△ 调整此通道的阻塞模式。
		如果给定的阻塞模式与当前的阻塞模式不同，则此方法在保持适当的锁的同时调用implConfigureBlocking方法以更改模式。
		返回此可选通道。
		【Throws】：
			ClosedChannelException 如果该通道关闭。
			IOException 如果发生I/O错误。
	implCloseChannel():protected final void 
		△ 关闭此通道。
		此方法在AbstractInterruptibleChannel类中指定，由close方法调用，然后调用implCloseSelectableChannel方法以执行关闭此通道的实际工作。然后它会取消这个通道的所有键。
		【Throws】：
			IOException 如果在关闭通道时发生I/O错误。
	implCloseSelectableChannel():protected abstract void 
		★ 关闭此可选通道。
		close方法调用此方法以执行关闭通道的实际工作。仅当通道尚未关闭时才调用此方法，并且从未多次调用此方法。
		此方法的实现必须通过抛出异常或正常返回，安排此通道上I/O操作中阻塞的任何其他线程立即返回。
		【Throws】：
			IOException 如果发生I/O错误。
	implConfigureBlocking(boolean block):protected abstract void 
		block - 如果为true，则此通道将置于阻塞模式；如果为false，则将置于非阻塞模式。
		★ 调整此通道的阻塞模式。
		此方法由configureBlocking方法调用，以执行更改阻塞模式的实际工作。仅当新模式与当前模式不同时才调用此方法。
		【Throws】：
			IOException 如果发生I/O错误。
	isBlocking():final boolean 
		△  指示此通道上的每个I/O操作在完成之前是否都将阻塞。新创建的通道始终处于阻塞模式。
		 如果关闭此通道，则不指定此方法返回的值。
		如果且仅当此通道处于阻塞模式时返回true。 
	isRegistered():final boolean 
		△ 指示此通道当前是否已向任何选择器注册。新创建的通道未注册。
		由于键取消和通道撤销之间的固有延迟，在所有键被取消后，通道可以保持注册一段时间。一个通道关闭后也可以保持注册一段时间。
		如果且仅当此通道已注册时返回true。
	keyFor(Selector sel):final SelectionKey 
		sel - 选择器。
		△ 检索用给定选择器表示通道注册的键。
		返回上次使用给定选择器注册此通道时返回的键，或者如果此通道当前未使用该选择器注册，则返回null键。
	provider():final SelectorProvider 
		△ 返回创建此通道的提供程序。
	register(Selector sel, int ops,Object att):final SelectionKey 
		sel - 用于注册此通道的选择器。
		ops - 结果键的关注集。
		att - 结果键的附件；可能为null。
		△ 用给定的选择器注册此通道，返回选择键。
		此方法首先验证此通道是否打开以及给定的初始关注集是否有效。
		如果此通道已经用给定的选择器注册，则在将其关注（interest）设置为给定值后，将返回表示该注册的选择键。
		否则，这个通道还没有用给定的选择器注册，所以在保持适当的锁的同时调用选择器的register方法。返回之前，结果键将添加到此通道的键集。
		【Throws】：
			ClosedSelectorException 如果选择器关闭。
			IllegalBlockingModeException 如果此通道处于阻塞模式。
			IllegalSelectorException 如果此通道不是由与给定选择器相同的提供器创建的。
			CancelledKeyException 如果此通道当前已用给定的选择器注册，但相应的键已被取消。
			IllegalArgumentException 如果ops集合中的某个位与此通道支持的操作不对应，也就是说，如果set & ~validOps() != 0。
			ClosedChannelException 如果通道关闭。
		
		
		
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
附录：
	1、注：文档中的△符号表示覆盖重写方法，✘符号表示已淘汰的方法。	
	2、注：文档中的★符号表示抽象方法或者直接抛出UnsupportedOperationException异常的方法，总之没有实现具体功能代码的方法。	
	3、java8中nio直接缓冲区与非直接缓冲区的区别：
		非直接缓冲区：通过allocate方法分配缓冲区，将缓冲区建立在JVM的内存中。
		直接缓冲区：通过allocateDirect方法分配直接缓冲区，将缓冲区建立在物理内存中，可以提供更高效率。