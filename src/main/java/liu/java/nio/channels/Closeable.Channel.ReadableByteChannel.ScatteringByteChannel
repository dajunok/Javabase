-----------------------------------------ScatteringByteChannel-----------------------------------------------------------------------------------------------------------------------------		
ScatteringByteChannel：分散字节通道 【Since:1.4】
	一种能把字节读入缓冲器序列的通道。
	分散读取操作在一次调用中将字节序列读取到一个或多个给定缓冲区序列中。在实现网络协议或文件格式时，分散读取通常很有用，例如，将数据分组成由一个或多个固定长度的头段和一个可变长度的主体组成的段。GatheringByteChannel接口中定义了类似的收集写入操作。
	

	接口定义	：public interface ScatteringByteChannel extends ReadableByteChannel
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
	read(ByteBuffer[] dsts):long 
		dsts - 要传输字节的缓冲区。
		从这个通道读取一系列字节到给定的缓冲区。
		这种形式的c.read(dsts)方法的调用与下面调用的方式完全相同。
			c.read(dsts, 0, dsts.length);
		返回读取的字节数，如果通道已到达流的末尾，则可能返回零或-1。
		【Throws】：
			NonReadableChannelException 如果没有打开此通道进行读取。
			ClosedChannelException 如果此通道已关闭。
			AsynchronousCloseException 如果另一个线程在读取操作进行时关闭此通道。
			ClosedByInterruptException 如果另一个线程在读取操作进行时中断当前线程，从而关闭通道并设置当前线程的中断状态。
			IOException 如果发生其他I/O错误
	read(ByteBuffer[] dsts, int offset, int length):long 
		dsts - 要传输字节的缓冲区。
		offset - 要传输字节的第一个缓冲区的缓冲区数组内的偏移量；必须为非负且不大于dsts.length。
		length - 要访问的缓冲区的最大数目；必须为非负且不大于dsts.length-offset。
		将一个字节序列从此通道读取到给定缓冲区的子序列中。
		此方法的调用尝试从该通道读取最多r个字节，其中r是给定缓冲区数组的指定子序列剩余的字节总数，即，
			 dsts[offset].remaining()
			     + dsts[offset+1].remaining()
			     + ... + dsts[offset+length-1].remaining()			
		此时调用此方法。
		假设读取长度为n的字节序列，其中0<=n<=r。该序列的第一个dsts[offset].remaining()字节被传输到缓冲区dsts[offset]，下一个dsts[offset+1].remaining()字节被传输到缓冲区dsts[offset+1]，以此类推，直到整个字节序列被传输到给定的缓冲区。将尽可能多的字节传输到每个缓冲区，因此，除最后一个更新的缓冲区外，每个更新的缓冲区的最终位置都保证等于该缓冲区的限制（limit）。
		可以随时调用此方法。但是，如果另一个线程已经在这个通道上启动了一个读取操作，那么这个方法的调用将被阻塞，直到第一个操作完成。
		【Throws】：
			IndexOutOfBoundsException 如果offset和length参数上的前提条件不成立。
			NonReadableChannelException 如果没有打开此通道进行读取。
			ClosedChannelException 如果此通道已关闭。
			AsynchronousCloseException 如果另一个线程在读取操作进行时关闭此通道。
			ClosedByInterruptException 如果另一个线程在读取操作进行时中断当前线程，从而关闭通道并设置当前线程的中断状态。
			IOException 如果发生其他I/O错误
		
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
附录：
	1、注：文档中的△符号表示覆盖重写方法，✘符号表示已淘汰的方法。	
	2、注：文档中的★符号表示抽象方法或者直接抛出UnsupportedOperationException异常的方法，总之没有实现具体功能代码的方法。	
		