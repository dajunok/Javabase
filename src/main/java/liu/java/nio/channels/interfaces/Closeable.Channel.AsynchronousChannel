-----------------------------------------AsynchronousChannel-----------------------------------------------------------------------------------------------------------------------------		
AsynchronousChannel：异步通道 【Since:1.7】
	支持异步I/O操作的通道。异步I/O操作通常采用以下两种形式之一：
		1、Future<V> operation(...)
		2、void operation(... A attachment, CompletionHandler<V,? super A> handler)
	其中operation是I/O操作的名称（例如读或写），V是I/O操作的结果类型，A是附加到I/O操作的对象的类型，用于在使用结果时提供上下文。对于使用无状态CompletionHandler来消耗许多I/O操作结果的情况，附件非常重要。
	在第一种形式中，可以使用Future接口定义的方法检查操作是否已完成，等待其完成，并检索结果。在第二种形式中，当I/O操作完成或失败时，将调用CompletionHandler来使用该操作的结果。
	实现此接口的通道是异步关闭的：如果通道上的I/O操作未完成，并且调用了通道的close方法，则I/O操作将失败，并发生AsynchronicCloseException异常。
	异步通道可供多个并发线程安全使用。某些通道实现可能支持并发读写，但可能不允许在任何给定时间有多个读写操作未完成。
	
	Cancellation（取消）
		Future接口定义了cancel方法用于取消执行。这会导致等待I/O操作结果的所有线程引发CancellationException异常。底层I/O操作是否可以取消是高度特定于实现的，因此没有指定。如果取消操作使通道或其连接的实体处于不一致的状态，则通道将进入特定于实现的错误状态，以防止进一步尝试启动与取消操作类似的I/O操作。例如，如果一个读取操作被取消，但实现不能保证没有从通道中读取字节，那么它会将通道置于错误状态；进一步尝试启动读取操作会导致引发未指定的运行时异常。同样，如果一个写操作被取消，但实现不能保证字节没有写入通道，那么随后启动写操作的尝试将失败，并出现未指定的运行时异常。
		如果在mayInterruptIfRunning参数设置为true的情况下调用cancel方法，则可以通过关闭通道中断I/O操作。在这种情况下，等待I/O操作结果的所有线程都会抛出CancellationException异常，并且通道上任何其他未完成的I/O操作都将完成，并发生AsynchronousCloseException异常。
		如果调用cancel方法来取消读或写操作，建议丢弃I/O操作中使用的所有缓冲区，或小心确保在通道保持打开时不访问缓冲区。


	
	接口定义	：public interface AsynchronousChannel extends Channel
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
	close():void 
		关闭此通道。
		此通道上任何未完成的异步操作都将以AsynchronousCloseException异常完成。通道关闭后，进一步尝试启动异步I/O操作，立即完成，并导致ClosedChannelException异常。
		否则，此方法的行为与Channel接口指定的行为完全相同。
		【Throws】：
			IOException 如果发生I/O错误。









-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
附录：
	1、注：文档中的△符号表示覆盖重写方法，✘符号表示已淘汰的方法。	
	2、注：文档中的★符号表示抽象方法或者直接抛出UnsupportedOperationException异常的方法，总之没有实现具体功能代码的方法。	
		