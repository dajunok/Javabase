-----------------------------------------AsynchronousByteChannel-----------------------------------------------------------------------------------------------------------------------------		
AsynchronousByteChannel：异步字节通道 【Since:1.7】
	可以读写字节的异步通道。
	某些通道可能不允许在任何给定时间有多个读或写未完成。如果一个线程在上一个读取操作完成之前调用了一个读取方法，那么将抛出一个ReadPendingException异常。类似地，如果在上一次写入完成之前调用了一个写入方法，则会引发WritePendingException异常。其他类型的I/O操作是否可以与读取操作同时进行取决于通道的类型。
	注意，对于多个并发线程来说，ByteBuffer是不安全的。当启动读或写操作时，必须注意确保在操作完成之前不会访问缓冲区。
	
	接口定义	：public interface AsynchronousByteChannel  extends AsynchronousChannel
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
	read(ByteBuffer dst):Future<Integer> 
		dst - 要传输字节的缓冲区
		将此通道中的一系列字节读取到给定的缓冲区中。
		此方法启动异步读取操作，将一系列字节从该通道读取到给定缓冲区。该方法的行为方式与read(ByteBuffer,Object,CompletionHandler)方法完全相同，只是该方法不指定完成处理器，而是返回表示挂起结果的Future。Future的get方法返回读取的字节数，或者如果由于通道已到达流的末尾而无法读取字节，则返回-1。
		返回表示操作结果的Future。
		【Throws】：
			IllegalArgumentException 如果缓冲区是只读的
			ReadPendingException 如果通道不允许一个以上的读取未完成，并且以前的读取尚未完成。
	read(ByteBuffer dst,A attachment,CompletionHandler<Integer,? super A> handler):<A> void 
		<A> - 附加的类型
		dst - 要传输字节的缓冲区
		attachment - 要附加到I/O操作的对象；可以为null
		handler - 完成处理器对象。
		将一系列字节从这个通道读取到给定的缓冲区中。
		此方法启动异步读取操作，将一系列字节从该通道读取到给定缓冲区。handler参数是在读取操作完成（或失败）时调用的完成处理器。传递给完成处理器的结果是读取的字节数，或者如果由于通道已到达流的末尾而无法读取字节，则返回-1。
		读取操作最多可以从通道读取r字节，其中r是缓冲区中剩余的字节数，即尝试读取时dst.remaining()。当r为0时，读取操作立即完成，结果为0，而不启动I/O操作。
		假设读取长度为n的字节序列，其中0<n<=r。该字节序列将被传输到缓冲区，以便序列中的第一个字节位于索引p，最后一个字节位于索引p+n-1，其中p是执行读取时缓冲区的位置。完成后，缓冲器的位置将等于p + n；其极限（limit）不会改变。
		多个并发线程使用缓冲区不安全，因此应注意在操作完成之前不要访问缓冲区。
		可以随时调用此方法。某些通道类型可能不允许在任何给定时间有多个未完成的读取。如果一个线程在上一个读取操作完成之前启动了一个读取操作，那么将抛出一个ReadPendingException异常。
		【Throws】：
			IllegalArgumentException 如果缓冲区是只读的
			ReadPendingException 如果通道不允许一个以上的读取未完成，并且以前的读取尚未完成。
			ShutdownChannelGroupException 如果通道与已终止的组关联		
	write(ByteBuffer src):Future<Integer> 
		src - 从中检索字节的缓冲区
		从给定缓冲区向此通道写入一个字节序列。
		此方法启动异步写入操作，从给定缓冲区向此通道写入一系列字节。该方法的行为方式与write(ByteBuffer,Object,CompletionHandler)方法完全相同，只是该方法不指定完成处理器，而是返回表示挂起结果的Future。Future的get方法返回写入的字节数。
		返回表示操作结果的Future。
		【Throws】：
			WritePendingException 如果通道不允许有多个写入未完成，并且上一个写入未完成。
	write(ByteBuffer src,A attachment,CompletionHandler<Integer,? super A> handler):<A> void 
		<A> - 附加的类型
		src - 从中检索字节的缓冲区
		attachment - 要附加到I/O操作的对象；可以为null
		handler - 完成处理器对象
		从给定缓冲区向此通道写入一个字节序列。
		此方法启动异步写入操作，从给定缓冲区向此通道写入一系列字节。handler参数是完成处理器，在写入操作完成（或失败）时调用。传递给完成处理器的结果是写入的字节数。
		写入操作最多可以向通道写入r字节，其中r是缓冲区中剩余的字节数，即尝试写入时的src.remaining()。当r为0时，写入操作立即完成，结果为0，而不启动I/O操作。
		假设写入长度为n的字节序列，其中0<n<=r。该字节序列将从索引p开始的缓冲区传输，其中p是执行写入时缓冲区的位置；最后写入的字节的索引将为p+n-1。完成后，缓冲器的位置将等于p+n；其极限（limit）不会改变。
		多个并发线程使用缓冲区不安全，因此应注意在操作完成之前不要访问缓冲区。
		可以随时调用此方法。某些通道类型可能不允许在任何给定时间有多个写入未完成。如果一个线程在上一个写操作完成之前启动了一个写操作，那么会抛出一个WritePendingException异常。		
		【Throws】：
			WritePendingException 如果通道不允许有多个写入未完成，并且上一个写入未完成。
			ShutdownChannelGroupException 如果通道与已终止的组关联

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
附录：
	1、注：文档中的△符号表示覆盖重写方法，✘符号表示已淘汰的方法。	
	2、注：文档中的★符号表示抽象方法或者直接抛出UnsupportedOperationException异常的方法，总之没有实现具体功能代码的方法。	
		