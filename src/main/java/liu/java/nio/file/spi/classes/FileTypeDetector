----------------------------------------FileTypeDetector--------------------------------------------------------------------------------------------------------------
FileTypeDetector：文件类型探测器。【Since:1.7】
	用于探测文件以猜测其文件类型的文件类型探测器。
	文件类型探测器是此类的具体实现，具有零参数构造函数，并实现下面指定的抽象方法。
	文件类型探测器确定文件类型的方法是高度特定于实现的。一个简单的实现可以检查文件扩展名（在某些平台中使用的约定），并将其映射到一个文件类型。在其他情况下，文件类型可以存储为文件属性，或者检查文件中的字节以猜测其文件类型。
	
	
	
	类定义	：public abstract class FileTypeDetector
------------------------------------------------------------------------------------------------------------------------------------------------------
Constructor Summary（构造器概要）：
	 protected FileTypeDetector()
		初始化此类的新实例。
		【Throws】：
			SecurityException 如果已安装安全管理器，并且它拒绝RuntimePermission("fileTypeDetector")。

Method Summary（方法概要）：
	probeContentType(Path path):abstract String 
		path - 要探测的文件的路径。
		探测给定文件以猜测其内容类型。
		此方法确定文件类型的方法是高度特定于实现的。它可以简单地检查文件名，也可以使用文件属性，或者检查文件中的字节。
		探测结果是由RFC2045：多用途Internet邮件扩展（MIME）第1部分：Internet邮件正文格式定义的多用途Internet邮件扩展（MIME）内容类型值的字符串形式。根据RFC2045中的语法，字符串必须是可分析的。
		返回内容类型，如果无法识别文件类型，则返回null。
		【Throws】：
			IOException 发生I/O错误。
			SecurityException 如果实现需要访问文件，并且安装了安全管理器，并且拒绝文件系统提供器实现所需的未指定权限。如果文件引用与默认的文件系统提供器关联，则调用SecurityManager.checkRead(String)方法检查对文件的读取访问。
		
		
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
附录：
	1、注：文档中的△符号表示覆盖重写方法，✘符号表示已淘汰的方法。	
	2、注：文档中的★符号表示抽象方法或者直接抛出UnsupportedOperationException异常的方法，总之没有实现具体功能代码的方法。	
	3、java8中nio直接缓冲区与非直接缓冲区的区别：
		非直接缓冲区：通过allocate方法分配缓冲区，将缓冲区建立在JVM的内存中。
		直接缓冲区：通过allocateDirect方法分配直接缓冲区，将缓冲区建立在物理内存中，可以提供更高效率。
		
		
		
		
		
		
		
		
		