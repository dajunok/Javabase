-----------------------------------------DirectoryStream<T>-----------------------------------------------------------------------------------------------------------------------------		
DirectoryStream<T>：目录流 【Since:1.7】
	要在目录中的条目上迭代的对象。目录流允许方便地使用for-each结构在目录上迭代。
	虽然DirectoryStream扩展了Iterable，但它不是通用Iterable，因为它只支持单个迭代器；调用迭代器方法以获取第二个或后续迭代器会引发IllegalStateException异常。
	目录流迭代器的一个重要属性是，它的hasNext方法保证至少由一个元素提前读取。如果hasNext方法返回true，然后调用next方法，则可以保证next方法不会由于I/O错误或流已关闭而引发异常。迭代器不支持remove操作。
	DirectoryStream在创建时打开，并通过调用close方法关闭。关闭目录流将释放与该流关联的所有资源。关闭流失败可能导致资源泄漏。try-with-resources语句提供了一个有用的结构，以确保流已关闭：
	   Path dir = ...
	   try (DirectoryStream<Path> stream = Files.newDirectoryStream(dir)) {
	       for (Path entry: stream) {
	           ...
	       }
	   }	
	一旦目录流被关闭，那么使用迭代器进一步访问目录的行为就好像到达了流的末尾。由于预读，迭代器可能在目录流关闭后返回一个或多个元素。一旦读取了这些缓冲元素，随后对hasNext方法的调用返回false，随后对next方法的调用将抛出NoSuchElementException异常。
	目录流不需要异步关闭。如果一个线程在目录流的迭代器从目录中读取时被阻塞，而另一个线程调用close方法，那么第二个线程可能会阻塞，直到读取操作完成。
	如果在访问目录时遇到I/O错误，则会导致迭代器的hasNext或next方法引发DirectoryIteratorException异常，并以IOException作为原因。如上所述，hasNext方法保证至少由一个元素提前读取。这意味着，如果hasNext方法返回true，然后调用next方法，则可以确保next方法不会因DirectoryIteratorException异常而失败。
	迭代器返回的元素没有特定的顺序。一些文件系统维护到目录本身和目录的父目录的特殊链接。迭代器不返回表示这些链接的条目。
	迭代器是弱一致性。它是线程安全的，但不会在迭代时冻结目录，因此它可能（或不可能）反映在创建DirectoryStream之后发生的目录更新。
	
	用法示例：假设我们需要一个目录中的源文件列表。此示例同时使用for-each和try-with-resources结构。
		   List<Path> listSourceFiles(Path dir) throws IOException {
		       List<Path> result = new ArrayList<>();
		       try (DirectoryStream<Path> stream = Files.newDirectoryStream(dir, "*.{c,h,cpp,hpp,java}")) {
		           for (Path entry: stream) {
		               result.add(entry);
		           }
		       } catch (DirectoryIteratorException ex) {
		           // I/O error encounted during the iteration, the cause is an IOException
		           throw ex.getCause();
		       }
		       return result;
		   }
		   	
	

	接口定义	：public interface DirectoryStream<T> extends Closeable, Iterable<T>
	嵌套类	：Filter<T>
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
	iterator():Iterator<T> 
		返回与此DirectoryStream关联的迭代器。
		【Throws】：
			IllegalStateException 如果此目录流已关闭或迭代器已返回。
		
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
附录：
	1、注：文档中的△符号表示覆盖重写方法，✘符号表示已淘汰的方法。	
	2、注：文档中的★符号表示抽象方法或者直接抛出UnsupportedOperationException异常的方法，总之没有实现具体功能代码的方法。	
	