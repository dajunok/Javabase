-----------------------------------------WatchKey-----------------------------------------------------------------------------------------------------------------------------		
WatchKey：监控键 【Since:1.7】
	监视注册对象的更改和事件的监视服务。例如，文件管理器可以使用监视服务监视目录的更改，以便在创建或删除文件时更新文件列表的显示。
	可监视对象通过调用其注册方法在监视服务中注册，返回一个WatchKey来表示注册。当检测到某个对象的事件时，将向该键发出信号，如果当前没有发出信号，则将该键排队到监视服务，以便调用poll或take方法来检索键和处理事件的使用者可以检索该键。处理完事件后，使用者调用该键的reset方法重置该键，该方法允许向键发送信号，并将其重新与其他事件一起排队。
	通过调用键的cancel方法，可以取消对监视服务的注册。在取消时排队的键将保留在队列中，直到检索到该键为止。根据对象的不同，键可能会自动取消。例如，假设某个目录被监视，并且监视服务检测到该目录已被删除或其文件系统不再可访问。当以这种方式取消某个键时，如果当前未发出信号，则该键将被发出信号并排队。为确保通知使用者reset方法的返回值指示键是否有效。
	监视服务对于多个并发用户来说是安全的。为了确保在任何时候只有一个使用者处理特定对象的事件，那么应该注意确保只有在处理了键的事件之后才调用该键的reset方法。可以随时调用close方法关闭服务，从而导致任何线程等待检索键，抛出ClosedWatchServiceException异常。
	文件系统报告事件的速度可能比检索或处理事件的速度快，而实现可能会对可能累积的事件数施加未指定的限制。如果一个实现故意丢弃事件，那么它会安排键的pollEvents方法返回事件类型为OVERFLOW的元素。使用者可以将此事件用作重新检查对象状态的触发器。
	当报告一个事件以表明被监视目录中的文件已被修改时，则无法保证已修改该文件的程序（或程序）已完成。应注意协调可能正在更新文件的其他程序的访问。FileChannel类定义了锁定文件区域以防其他程序访问的方法。
	
	Platform dependencies（平台依赖）
	从文件系统观察事件的实现旨在直接映射到本机文件事件通知工具（如果可用），或者在本机工具不可用时使用原始机制（如轮询）。因此，关于如何检测事件、事件的及时性以及是否保留其顺序的许多细节都是高度特定于实现的。例如，当修改被监视目录中的文件时，在某些实现中可能会导致一个ENTRY_MODIFY事件，但在其他实现中可能会导致多个事件。短期文件（即在创建后很快被删除的文件）可能不会被定期轮询文件系统以检测更改的基本实现检测到。
	如果被监视的文件不在本地存储设备上，那么如果可以检测到对该文件的更改，那么它是特定于实现的。特别是，不需要检测对远程系统上执行的文件的更改。
	
	

	接口定义	：public interface WatchService extends Closeable
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
	close():void 
		△  关闭此监视服务。
		如果线程当前在take或poll方法中被阻塞，等待某个键排队，那么它会立即收到ClosedWatchServiceException异常。与此监视服务关联的任何有效键都将无效。
		关闭监视服务后，对其调用操作的任何进一步尝试都将引发ClosedWatchServiceException异常。如果此监视服务已关闭，则调用此方法无效。
		【Throws】：
			IOException 如果发生I/O错误。
	poll():WatchKey 
		检索并删除下一个监视键，如果不存在，则为null。
		返回下一个监视键，或者返回null。
		【Throws】：
			ClosedWatchServiceException 如果此监视服务已关闭。
	poll(long timeout, TimeUnit unit):WatchKey 
		timeout - 如何在放弃前等待，以unit参数为单位。
		unit - 确定如何解释timeout参数的计时器（时间单位）。
		检索并删除下一个监视键，如果需要，则等待到指定的等待时间（如果尚未出现）。
		返回下一个监视键，或者返回null。
		【Throws】：
			ClosedWatchServiceException 如果此监视服务已关闭，或在等待下一个键时关闭。
			InterruptedException 如果在等待时中断。
	take():WatchKey 
		检索并删除下一个监视键，如果还没有，则等待。
		返回下一个监视键。
		【Throws】：
			ClosedWatchServiceException 如果此监视服务已关闭，或在等待下一个键时关闭。
			InterruptedException 如果在等待时中断。
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
附录：
	1、注：文档中的△符号表示覆盖重写方法，✘符号表示已淘汰的方法。	
	2、注：文档中的★符号表示抽象方法或者直接抛出UnsupportedOperationException异常的方法，总之没有实现具体功能代码的方法。	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	