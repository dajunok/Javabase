-----------------------------------------Path-----------------------------------------------------------------------------------------------------------------------------		
Path：路径【Since:1.7】
	可用于在文件系统中定位文件的对象。它通常表示与系统相关的文件路径。
	Path表示一个具有层次结构的路径，由一系列由特殊分隔器或分隔符分隔的目录和文件名元素组成。还可能存在标识文件系统层次结构的根组件。距离目录层次结构根（root）目录最远的name元素是文件或目录的名称。其他名称元素是目录名。Path可以表示根、根和名称序列，或者只表示一个或多个name元素。如果Path只包含一个空的name元素，则该路径被视为空路径。使用空路径访问文件等同于访问文件系统的默认目录。Path定义getFileName、getParent、getRoot和subpath方法以访问路径组件或其name元素的子序列。
	除了访问路径的组件外，Path还定义了合并路径的resolve和resolveSibling方法。可用于在两条路径之间构造相对路径的relativize方法。可以使用startsWith和endsWith方法对路径进行比较和测试。
	此接口扩展了Watchable接口，以便通过路径定位的目录可以向WatchService和被监视目录中的条目注册。
	警告：此接口仅由开发自定义文件系统实现的人员实现。方法可以在将来的版本中添加到此接口。
	
	Accessing Files(访问文件)
	Path可以与Files类一起使用，以操作文件、目录和其他类型的文件。例如，假设我们希望BufferedReader从文件“access.log”中读取文本。该文件位于相对于当前工作目录的目录“logs”中，并且是UTF-8编码的。
		     Path path = FileSystems.getDefault().getPath("logs", "access.log");
		     BufferedReader reader = Files.newBufferedReader(path, StandardCharsets.UTF_8);
	
	Interoperability(互操作性)
	与默认提供器关联的Path通常可以与java.io.File类互操作。其他提供器创建的路径不太可能与java.io.File表示的抽象路径名互操作。toPath方法可用于从java.io.File对象表示的抽象路径名获取路径。结果路径可用于在与java.io.File对象相同的文件上操作。此外，toFile方法对于从路径的字符串表示形式构造文件很有用。
	
	Concurrency(并发性)
	此接口的实现是不可变的，可供多个并发线程安全使用。
	
	

	接口定义	：public interface Path	extends Comparable<Path>, Iterable<Path>, Watchable
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
	compareTo(Path other):int 
		other - 与此路径比较的路径。
		从词法上比较两个抽象路径。此方法定义的顺序是特定于提供器的，对于默认提供器，是特定于平台的。此方法不访问文件系统，并且两个文件都不需要存在。
		此方法不能用于比较与不同文件系统提供器关联的路径。
		如果参数等于此路径，则为回零；如果此路径在词典上小于参数，则小于零；如果此路径在词典上大于参数，则为大于零。
		【Throws】：
			ClassCastException 如果路径与不同的提供器相关联。
	endsWith(String other):boolean 
		other - 给定的路径字符串。
		测试此路径是否以通过转换给定路径字符串构建的路径结束，该路径的方式与endsWith(Path)方法指定的方式完全相同。例如，在UNIX上，路径“foo/bar”以“foo/bar”和“bar”结尾。它不以“r”或“/bar”结尾。请注意，尾部分隔符没有被考虑在内，因此在路径“foo/bar”上使用字符串“bar/”调用此方法将返回true。
		如果此路径以给定路径结尾，则返回true；否则返回false。	
		【Throws】：
			InvalidPathException 如果无法将路径字符串转换为路径。
	endsWith(Path other):boolean 
		other - 给定路径。
		测试此路径是否以给定路径结束。
		如果给定路径有n个元素，并且没有根组件，并且此路径有n个或多个元素，那么如果每个路径的最后n个元素（从最远离根的元素开始）相等，则此路径以给定路径结束。
		如果给定路径具有根组件，则如果此路径的根组件以给定路径的根组件结束，并且两个路径的相应元素相等，则此路径以给定路径结束。此路径的根组件是否以给定路径的根组件结尾是特定于文件系统的。如果此路径没有根组件，并且给定路径有根组件，则此路径不会以给定路径结尾。
		如果给定路径与此路径的另一个文件系统相关联，则返回false。
		如果此路径以给定路径结尾，则返回true；否则返回false。		
	equals(Object other):boolean 
		other - 要与此对象进行比较的对象。
		测试此路径是否与给定对象相等。
		如果给定的对象不是路径，或者是与其他文件系统关联的路径，则此方法返回false。
		两个路径是否相等取决于文件系统实现。在某些情况下，比较路径时不考虑大小写，而其他路径则区分大小写。此方法不访问文件系统，并且该文件不需要存在。如果需要，可以使用isSameFile方法检查两个路径是否定位同一个文件。
		此方法满足Object.equals方法的一般约定。
		如果且仅当给定对象是与此路径相同的路径时返回true。
	getFileName():Path 
		返回由此路径表示为Path对象的文件或目录的名称。文件名是目录层次结构中距根目录最远的元素。
		返回表示文件或目录名称的路径，如果此路径没有元素，则返回null。
	getFileSystem():FileSystem 
		返回创建此对象的文件系统。		
	getName(int index):Path 
		index - 元素的索引。
		将此路径的name元素作为路径对象返回。
		index参数是要返回的name元素的索引。目录层次结构中最接近根的元素具有索引0。离根最远的元素具有索引count-1。
		返回name元素。
		【Throws】：
			IllegalArgumentException 如果index为负，则index大于或等于元素数量，或者此路径没有name元素。
	getNameCount():int 
		返回路径中name元素的数目。
		返回路径中的元素数量，如果此路径仅表示根组件，则返回0。
	getParent(): Path 
		返回父路径，如果此路径没有父路径，则返回null。
		此Path对象的父级由此路径的根组件（如果有）和路径中的每个元素组成，目录层次结构中距根最远的元素除外。此方法不访问文件系统；路径或其父路径可能不存在。此外，此方法不会消除某些实现中可能使用的特殊名称，如“.”和“..”。例如，在UNIX上，“/a/b/c”的父级是“/a/b”，“x/y/”的父级是“x/y”。此方法可与规范化方法一起使用，以消除冗余名称，在需要类似shell的导航的情况下。
		如果此路径有一个或多个元素，并且没有根组件，则此方法等效于计算表达式：
			subpath(0, getNameCount()-1);		
	getRoot():Path 
		将此路径的根组件作为路径对象返回，如果此路径没有根组件，则返回null。
	hashCode():int 
		计算此路径的哈希代码。
		哈希代码基于路径的组件，并满足Object.hashCode方法的一般约定。
	isAbsolute():boolean 
		指示此路径是否为绝对路径。
		绝对路径是完整的，因为它不需要与其他路径信息组合来定位文件。
		如果且仅当此路径是绝对路径时返回true。
	iterator():Iterator<Path> 
		△ 返回此路径的name元素的迭代器。
		迭代器返回的第一个元素表示目录层次结构中最接近根的name元素，第二个元素表示下一个最接近的元素，依此类推。返回的最后一个元素是由该路径表示的文件或目录的名称。迭代器不返回根组件（如果存在）。
	normalize():Path 
		返回一个路径，该路径消除了多余的name元素。
		此方法的精确定义依赖于实现，但一般来说，它是从该路径派生的，该路径不包含冗余的名称元素。在许多文件系统中，“.”和“..”是用于指示当前目录和父目录的特殊名称。在这种文件系统中，所有出现的“.”都被认为是冗余的。如果“..”前面有一个非“..”名称，那么这两个名称都被认为是多余的（识别此类名称的过程将重复，直到不再适用为止）。
		此方法不访问文件系统；路径可能找不到存在的文件。从路径中删除“..”和前面的名称可能会导致路径定位与原始路径不同的文件。当前面的名称是符号链接时，就会出现这种情况。
		如果不包含冗余name元素，则返回结果路径或此路径；如果此路径包含根组件且所有名称元素都是冗余的，则返回空路径。
	register(WatchService watcher,WatchEvent.Kind<?>... events):WatchKey 
		watcher - 要向其注册此对象的监视服务。
		events - 应为此对象注册的事件。
		△ 向监视服务注册此路径下的文件。
		此方法的调用与以下调用的行为完全相同
			watchable.register(watcher, events, new WatchEvent.Modifier[0]);
		用法案例：假设我们希望为条目创建、删除和修改事件注册目录：
		     Path dir = ...
		     WatchService watcher = ...		
		     WatchKey key = dir.register(watcher, ENTRY_CREATE, ENTRY_DELETE, ENTRY_MODIFY);
		返回表示此对象在给定监视服务中的注册的键。
		【Throws】：
			UnsupportedOperationException 如果指定了不支持的事件。
			IllegalArgumentException 如果指定的事件组合无效。
			ClosedWatchServiceException 如果监视服务关闭。
			NotDirectoryException 如果该文件是为了监视目录中的条目而注册的，而该文件不是目录（可选的特定异常）。
			IOException 如果发生I/O错误。
			SecurityException 如果是默认的提供器，并且安装了安全管理器，那么将调用checkRead方法来检查对文件的读取访问。		
	register(WatchService watcher,WatchEvent.Kind<?>[] events,WatchEvent.Modifier... modifiers):WatchKey 
		watcher - 要向其注册此对象的监视服务。
		events - 应为此对象注册的事件。
		modifiers - 修改对象注册方式的修饰符（如果有）。
		△ 向监视服务注册此路径下的文件。
		在此版本中，此路径定位存在的目录。目录在监视服务中注册，以便可以监视目录中的条目。events参数是要注册的事件，可以包含以下事件：
			● ENTRY_CREATE	创建或移动到目录中的条目。
			● ENTRY_DELETE	条目已删除或移出目录。
			● ENTRY_MODIFY	目录中的条目被修改。
		这些事件的上下文是由该路径定位的目录与定位创建、删除或修改的目录条目的路径之间的相对路径。
		事件集可能包括枚举StandardWatchEventKinds未定义的其他特定于实现的事件。
		modifiers参数指定限定目录注册方式的修饰符。此版本不定义任何标准修改器。它可能包含特定于实现的修饰符。
		如果文件通过符号链接在监视服务中注册，那么如果监视在注册后仍然依赖于符号链接的存在，那么它是特定于实现的。
		返回表示此对象在给定监视服务中的注册的键。
		【Throws】：
			UnsupportedOperationException 如果指定了不支持的事件或修饰符。
			IllegalArgumentException 如果指定的事件或修饰符组合无效。
			ClosedWatchServiceException 如果监视服务关闭。
			NotDirectoryException 如果该文件是为了监视目录中的条目而注册的，而该文件不是目录（可选的特定异常）。
			IOException 如果发生I/O错误。
			SecurityException 如果是默认的提供器，并且安装了安全管理器，那么将调用checkRead方法来检查对文件的读取访问。
	relativize(Path other):Path 
		other - 与此路径相对应的路径。
		构造此路径和给定路径之间的相对路径。
		此方法尝试构造一个相对路径，当对该路径进行解析时，将生成一个与给定路径位于同一文件的路径。例如，在Unix上，如果此路径是“/a/b”，并且给定的路径是“/a/b/c/d”，则生成的相对路径将是“c/d”。如果此路径和给定路径没有根组件，则可以构造相对路径。如果只有一个路径具有根组件，则无法构造相对路径。如果两个路径都有一个根组件，那么如果可以构造相对路径，则它依赖于实现。如果此路径与给定路径相等，则返回空路径。
		对于任意两条normalize路径p和q，其中q没有根组件，
			p.relativize(p.resolve(q)).equals(q)
		如果支持符号链接，那么当根据此路径解析结果路径时，是否生成一个路径，该路径可用于定位与其他路径相同的文件，这取决于实现。例如，如果此路径是“/a/b”，而给定路径是“/a/x”，则生成的相对路径可能是“../x”。如果“b”是符号链接，那么如果“a/b/../x”将定位与“a/x”相同的文件，则“b”取决于实现。
		返回结果相对路径，如果两个路径都相等，则返回空路径。
		【Throws】：
			IllegalArgumentException 如果其他路径不是可以与此路径相对的路径。
	resolve(String other):Path 
		other - 要根据此路径解析的路径字符串。
		将给定的路径字符串转换为Path，并以resolve方法指定的方式针对该Path解析该字符串。例如，假设名称分隔符为“/”，路径表示“foo/bar”，那么使用路径字符串“gus”调用此方法将生成路径“foo/bar/gus”。
		返回结果路径。
		【Throws】：
			InvalidPathException 如果无法将路径字符串转换为路径。
	resolve(Path other):Path 
		other - 要根据此路径解析的路径。
		根据此路径解析给定路径。
		如果other参数是一个绝对路径，那么这个方法将返回other。如果other是一个空路径，那么这个方法会琐碎地返回这个路径。否则，此方法将此路径视为目录，并根据此路径解析给定路径。在最简单的情况下，给定路径没有根组件，在这种情况下，此方法将给定路径连接到此路径，并返回以给定路径结尾的结果路径。如果给定路径具有根组件，那么解析就高度依赖于实现，因此未指定。
		返回结果路径。
	resolveSibling(String other):Path 
		other - 要根据此路径的父级解析的路径字符串。
		将给定的路径字符串转换为Path，并按照resolveSibling方法指定的方式针对该路径的父路径解析该字符串。
		返回结果路径。	
		【Throws】：
			InvalidPathException 如果无法将路径字符串转换为路径。	
	resolveSibling(Path other):Path 
		other - 要根据此路径的父级进行解析的路径。
		根据此路径的父路径解析给定路径。在需要用另一个文件名替换文件名时，这很有用。例如，假设名称分隔符为“/”，路径表示“dir1/dir2/foo”，那么使用路径“bar”调用此方法将导致路径“dir1/dir2/bar”。如果此路径没有父路径，或者其他路径是绝对路径，则此方法返回其他路径。如果另一个是空路径，则此方法返回此路径的父路径，或者如果此路径没有父路径，则返回空路径。
		返回结果路径。
	startsWith(String other):boolean 
		other - 给定的路径字符串。
		测试此路径是否以通过转换给定路径字符串构建的路径开始，其方式与startsWith(Path)方法指定的方式完全相同。例如，在UNIX上，路径“foo/bar”以“foo”和“foo/bar”开始。它不以“f”或“fo”开始。
		如果此路径以给定路径开始，则返回true；否则返回false。
		【Throws】：
			InvalidPathException 如果无法将路径字符串转换为路径。	
	startsWith(Path other):boolean 
		other - 给定的路径。
		测试此路径是否以给定路径开始。
		如果此路径的根组件以给定路径的根组件开始，并且此路径以与给定路径相同的name元素开始，则此路径以给定路径开始。如果给定路径的name元素多于此路径，则返回false。
		此路径的根组件是否以给定路径的根组件开始是特定于文件系统的。如果此路径没有根组件，并且给定路径有根组件，则此路径不会以给定路径开始。
		如果给定路径与此路径的另一个文件系统相关联，则返回false。
		如果此路径以给定路径开始，则返回true；否则返回false。
	subpath(int beginIndex, int endIndex):Path 
		beginIndex - 第一个元素的索引（含第一个元素）。
		endIndex - 最后一个元素的索引（不含最后一个元素）。
		返回一个相对路径，该路径是此路径的name元素的子序列。
		beginIndex和endIndex参数指定name元素的子序列。目录层次结构中最接近根目录的名称具有索引0。离根最远的名称具有索引count-1。返回的Path对象具有以beginIndex开始并扩展到索引 endIndex-1处的元素的name元素。
		返回一个新的Path对象，它是此路径中name元素的子序列。
		【Throws】：
			IllegalArgumentException 如果beginIndex是负的，或者大于或等于元素的数目。如果endIndex小于或等于beginIndex，或大于元素数目。
	toAbsolutePath():Path 
		返回表示此路径的绝对路径的Path对象。
		如果此路径已经是绝对路径，则此方法只返回此路径。否则，此方法以依赖于实现的方式解析路径，通常是通过根据文件系统默认目录解析路径。根据实现的不同，如果文件系统不可访问，此方法可能会引发I/O错误。
		返回表示绝对路径的path对象.
		【Throws】：
			IOError 如果发生I/O错误。
			SecurityException 在默认提供器的情况下，安装了安全管理器，并且该路径不是绝对的，然后调用安全管理器的checkPropertyAccess方法来检查对系统属性用户的访问。
	toFile():File 
		返回表示此路径的File对象。如果此路径与默认提供器关联，则此方法等效于返回使用此路径的字符串表示形式构造的File对象。
		如果此路径是通过调用File类的toPath方法创建的，则不保证此方法返回的File对象等于原始File。
		【Throws】：
			UnsupportedOperationException 如果此路径未与默认提供器关联。
	toRealPath(LinkOption... options):ath 
		options - 指示如何处理符号链接的选项。
		返回现有文件的实际路径。
		此方法的精确定义依赖于实现，但一般而言，它是从该路径派生的，该路径是一个绝对路径，与此路径定位相同的文件，但具有表示目录和文件的实际名称的name元素。例如，如果文件系统上的文件名比较不区分大小写，那么name元素表示实际大小写中的名称。此外，结果路径删除了多余的name元素。
		如果这个路径是相对的，那么首先获得它的绝对路径，就像调用toAbsolutePath方法一样。
		选项数组可用于指示如何处理符号链接。默认情况下，符号链接解析为最终目标。如果存在NOFOLLOW_LINKS选项，则此方法不会解析符号链接。一些实现允许特殊名称，如“..”来引用父目录。在派生实际路径时，如果“..”（或等效名称）前面有一个非“..”名称，则实现通常会导致删除这两个名称。如果不解析符号链接，并且前面的名称是符号链接，则只有在确保生成的路径将定位与此路径相同的文件时，才会删除这些名称。
		返回绝对路径表示由该对象定位的文件的实际路径。
		【Throws】：
			IOException 如果文件不存在或发生I/O错误。
			SecurityException 在默认提供器的情况下，并安装了安全管理器，调用其checkRead方法来检查对文件的读取访问，并且在该路径不是绝对的情况下，调用它的checkPropertyAccess方法来检查对系统属性用户的访问。
	toString():String 
		返回此路径的字符串表示形式。
		如果此路径是通过使用getPath方法转换路径字符串创建的，则此方法返回的路径字符串可能与用于创建路径的原始字符串不同。
		返回的路径字符串使用默认名称分隔符来分隔路径中的名称。
	toUri():URI 
		返回表示此路径的URI。
		此方法构造一个绝对URI，其方案等于标识提供器的URI方案。方案特定部分的确切形式高度依赖于提供器。
		对于默认提供器，URI是具有绝对路径组件的层次结构。query和fragment组件未定义。权限（authority）组件是否定义取决于实现。不能保证该URI可以用于构造java.io.File。特别地，如果此路径表示通用命名约定（UNC）路径，则UNC服务器名称可以在所产生的URI的权限组件中进行编码。在默认提供器的情况下，并且该文件存在，并且可以确定该文件是一个目录，则所得的URI将以斜线结束。
		默认提供器为File类提供类似的往返保证。对于给定路径p，保证
			Paths.get(p.toUri()).equals(p .toAbsolutePath())
		只要原始路径、URI和新路径都在同一Java虚拟机中创建（可能是不同的调用）。其他供应商是否作出任何担保是特定于供应商的，因此未指明。
		当文件系统被构造成以文件系统的形式访问文件的内容时，如果返回的URI表示文件系统中的给定路径，或者它表示编码封闭文件系统的URI的复合URI，那么它是高度实现特定的。此版本中没有定义复合URI的格式；这种方案可能会在将来的版本中添加。
		【Throws】：
			IOException 如果在获取绝对路径时发生I/O错误，或者在构建文件系统以作为文件系统访问文件内容的情况下，无法获取封闭文件系统的URI。
			SecurityException 对于默认提供器，并且安装了安全管理器，toAbsolutePath方法会引发安全异常。
	
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
附录：
	1、注：文档中的△符号表示覆盖重写方法，✘符号表示已淘汰的方法。	
	2、注：文档中的★符号表示抽象方法或者直接抛出UnsupportedOperationException异常的方法，总之没有实现具体功能代码的方法。	


