-----------------------------------------WatchKey-----------------------------------------------------------------------------------------------------------------------------		
WatchKey：监控键 【Since:1.7】
	表示可监视对象在WatchService中注册的令牌。
	当可监视对象注册到监视服务时，将创建监视键。键在以下时间内保持有效：
		1、通过调用其cancel方法显式地取消它，或者
		2、隐式取消，因为对象不再可访问，或
		3、通过关闭监视服务。
	监视键是有状态的。最初创建时，称键已准备就绪。当检测到一个事件时，该键将被发出信号并排队，以便可以通过调用监视服务的轮询或take方法来检索它。一旦发出信号，键将保持此状态，直到调用其reset方法将键返回到就绪状态。键处于信号状态时检测到的事件将排队，但不会导致键重新排队以从监视服务检索。通过调用键的pollEvents方法来检索事件。此方法检索并删除为对象累积的所有事件。最初创建时，监视键没有挂起的事件。通常，当键处于信号状态时，会检索事件，这会导致以下习惯用法：
	     for (;;) {
	         // retrieve key
	         WatchKey key = watcher.take();
	
	         // process events
	         for (WatchEvent<?> event: key.pollEvents()) {
	             :
	         }
	
	         // reset the key
	         boolean valid = key.reset();
	         if (!valid) {
	             // object no longer registered
	         }
	     }	
	监视键对于多个并发线程的使用是安全的。如果有多个线程从监视服务中检索信号键，则应注意确保只有在处理对象的事件之后才调用reset方法。这样可以确保一个线程随时处理对象的事件。
	
	

	接口定义	：public interface WatchKey
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
	cancel():void 
		取消监视服务的注册。返回时，监视键将无效。如果监视键已排队，等待从监视服务中检索，则它将保留在队列中，直到将其删除。挂起事件（如果有）保持挂起状态，可以在键被取消后通过调用pollEvents方法来检索。
		如果此监视键已被取消，则调用此方法无效。一旦取消，监视键将永远无效。
	isValid():boolean 
		指示此监视键是否有效。
		监视键在创建时有效，并且在取消或关闭监视服务之前保持有效。
		如果且仅当此监视键有效时返回true。
	pollEvents():List<WatchEvent<?>> 
		检索并删除此监视键的所有挂起事件，返回已检索事件的列表。
		请注意，如果没有挂起的事件，则此方法不会等待。
		返回检索到的事件列表；可能为空。
	reset():boolean 
		重置此监视键。
		如果此监视键已取消或此监视键已处于就绪状态，则调用此方法无效。否则，如果对象有挂起的事件，则此监视键将立即重新排队到监视服务。如果没有挂起的事件，则监视键将被置于就绪状态，并将保持该状态，直到检测到事件或取消监视键。
		如果监视键有效且已重置，则返回true；如果监视键不再有效而无法重置，则返回false。
	watchable():Watchable 
		返回为其创建此监视键的对象。即使键被取消，此方法仍将继续返回对象。
		由于WatchService旨在直接映射到本机文件事件通知工具（如果可用），因此有关如何监视已注册对象的许多详细信息都是高度特定于实现的。例如，当监视目录的更改，并且在文件系统中移动或重命名该目录时，不能保证监视键将被取消，因此此方法返回的对象可能不再是指向该目录的有效路径。
		返回为其创建此监视键的对象。
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
附录：
	1、注：文档中的△符号表示覆盖重写方法，✘符号表示已淘汰的方法。	
	2、注：文档中的★符号表示抽象方法或者直接抛出UnsupportedOperationException异常的方法，总之没有实现具体功能代码的方法。	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	