---------------------------------------------Collection<E>--------------------------------------------------------------------------------------------------------------------------
Collection<E>：容器接口。
	集合层次结构中的根接口。集合表示一组对象，称为其元素。某些集合允许重复元素，而其他集合则不允许。有些是有序的，有些是无序的。JDK不提供此接口的任何直接实现：它提供更具体的子接口（如Set和List）的实现。此接口通常用于传递集合，并在需要最大通用性的地方对其进行操作。
	包或多集（可能包含重复元素的无序集合）应直接实现此接口。
	所有通用集合实现类（通常通过其子接口之一间接实现集合）都应提供两个“标准”构造器：一个void（无参数）构造函数，它创建一个空集合，一个带有Collection类型的单个参数的构造器，它创建一个新集合，该集合的元素与其参数相同。实际上，后一个构造函数允许用户复制任何集合，从而生成所需实现类型的等效集合。没有办法强制执行这个约定（因为接口不能包含构造函数），但是Java平台库中的所有通用集合实现都遵从。
	此接口中包含的“破坏性”方法（即修改其操作的集合的方法）被指定为如果此集合不支持该操作，则将引发UnsupportedOperationException异常。如果是这种情况，那么如果调用对集合没有影响，那么这些方法可能（但不需要）抛出一个UnsupportedOperationException异常。例如，如果要添加的集合为空，则在不可修改的集合上调用addAll(Collection)方法可能（但不是必需的）引发异常。
	一些集合实现对可能包含的元素有限制。例如，一些实现禁止null元素，一些实现对其元素的类型有限制。试图添加不合格元素会引发未检查异常，通常为NullPointerException或ClassCastException。试图查询不合格元素可能会引发异常，或者只是返回false；一些实现将显示前一种行为，而一些实现将显示后一种行为。更一般地说，如果在不合格元素上尝试操作，而该元素的完成不会导致不合格元素插入到集合中，则可能会引发异常，或者根据实现的选择，可能会成功。此类异常在该接口的规范中标记为“可选”。
	由每个集合决定自己的同步策略。在实现没有更强有力的保证的情况下，不确定的行为可能是由于对正被另一个线程改变的集合上的任何方法的调用；这包括直接调用、将集合传递给可能执行调用的方法以及使用现有迭代器检查集合。
	集合框架接口中的许多方法都是用equals方法定义的。例如，contains(Object o)方法的规范说：“如果且仅当此集合包含至少一个元素e（例如(o==null ? e==null : o.equals(e))）时返回true。此规范不应解释为暗示使用非空参数o调用Collection.contains将导致对任何元素e调用o.equals(e)。例如，通过首先比较两个元素的哈希代码，实现可以自由地实现优化，从而避免equals调用。（Object.hashCode()规范保证具有不相等散列码的两个对象不能相等。）更一般地说，各种集合框架接口的实现可以自由地利用底层对象方法的指定行为，只要实现者认为合适。
	执行集合递归遍历的某些集合操作可能会失败，但自引用实例除外，其中集合直接或间接包含自身。这包括clone()、equals()、hashcode()和toString()方法。实现可以有选择地处理自引用场景，但是大多数当前的实现没有这样做。
	此接口是Java集合框架的成员。
	
	
	接口定义	：public interface Collection<E> extends Iterable<E>
	父接口	：Iterable<E>
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
	add(E element):boolean
		确保此集合包含指定的元素（可选操作）。如果此集合因调用而更改，则返回true。（如果此集合不允许重复，并且已包含指定元素，则返回false。）
		支持此操作的集合可能会限制哪些元素可以添加到此集合中。特别是，一些集合将拒绝添加null元素，而其他集合将对可能添加的元素类型施加限制。集合类应该在它们的文档中明确地指定可以添加哪些元素的任何限制。
		如果集合由于某个特定元素已经包含该元素以外的任何原因而拒绝添加该元素，则它必须引发异常（而不是返回false）。这将保留集合在该调用返回后始终包含指定元素的不变量。
		【Throws】：
			UnsupportedOperationException 如果此集合不支持add操作
			ClassCastException 如果指定元素的类阻止将其添加到此集合中
			IllegalArgumentException 如果元素的某些属性阻止将其添加到此集合中
			IllegalStateException 如果由于插入限制而此时无法添加元素			
	addAll(Collection<? extends E> c):boolean
		将指定集合中的所有元素添加到此集合中（可选操作）。如果在操作进行过程中修改了指定的集合，则此操作的行为不确定。（这意味着如果指定的集合是此集合，并且此集合不是空的，则此调用的行为是不确定的。）
		【Throws】：
			UnsupportedOperationException 如果此集合不支持addAll操作
			ClassCastException 如果指定元素的类阻止将其添加到此集合中
			NullPointerException 如果指定的集合包含null元素，并且此集合不允许null元素，或者指定的集合为null
			IllegalArgumentException 如果指定集合的某个元素的某些属性阻止将其添加到此集合中
			IllegalStateException 如果由于插入限制而此时无法添加元素
	clear():void
		从此集合中删除所有元素（可选操作）。此方法返回后，集合将为空。
		【Throws】：
			UnsupportedOperationException 如果此集合不支持clear操作
	contains(Object o):boolean
		如果此 collection 包含指定的元素，则返回 true。更确切地讲，当且仅当此 collection 至少包含一个满足 (o==null ? e==null : o.equals(e)) 的元素 e 时，返回 true。
		【Throws】：
			ClassCastException 如果指定元素的类型与此集合不兼容（可选）
			NullPointerException 如果指定的元素为null，并且此集合不允许null元素（可选）
	containsAll(Collection<?> c):boolean
		如果此 collection 包含指定 collection 中的所有元素，则返回 true。
		【Throws】：
			ClassCastException 如果指定元素的类型与此集合不兼容（可选）
			NullPointerException 如果指定的集合包含一个或多个null元素，并且此集合不允许空null（可选），或者指定的集合为null。
	equals(Object o):boolean
		比较此 collection 与指定对象是否相等
		虽然Collection接口没有为Object.equals在通用约定中添加任何规定，但是“直接”实现Collection接口的程序员（换句话说，创建一个集合但不是Set或List的类）必须注意是否选择重写Object.equals。不需要这样做，最简单的操作过程是依赖对象的实现，但实现者可能希望实现“值比较”，而不是默认的“引用比较”。（List和Set接口要求进行这种值比较。）
		Object.equals方法的一般契约规定，当且仅当b.equals(a))时，等于必须是对称的（换句话说，a.equals（b）。list.equals和Set.equals的协定声明列表只等于其他列表，并设置为其他集合。因此，当将此集合与任何列表或集合进行比较时，实现列表或集合接口的集合类的自定义Equals方法必须返回false。（按照相同的逻辑，无法编写正确实现Set和List接口的类。）
	hashCode():int
		返回此集合的哈希代码值。虽然集合接口没有为Object.hashCode方法在通用合同中添加任何规定，但是程序员应该注意，任何重写Object.equals方法的类也必须重写Object.hashCode方法，以便满足Object.hashCode方法的通用合同。特别地，c1.equals(c2)意味着c1.hashCode()==c2.hashCode()。
	isEmpty():boolean
		如果此 collection 不包含元素，则返回 true,否则返回false
	iterator():Iterator<E>
		△返回在此 collection 的元素上进行迭代的迭代器。关于元素返回的顺序没有任何保证（除非此 collection 是某个能提供保证顺序的类实例）。
	parallelStream():default Stream<E>
		返回一个可能与此集合作为其源的并行流。允许此方法返回顺序流。
		当spliterator()方法无法返回IMMUTABLE、CONCURRENT或后期绑定的拆分器（spliterator）时，应重写此方法。（详见spliterator()）
	remove(Object o):boolean
		如果指定元素为present (optional operation)，则从此集合中移除该元素的单个实例。更正式地说，如果这个集合包含一个或多个这样的元素，则删除元素e，使(o==null ? e==null : o.equals(e))。如果此集合包含指定元素，则返回“真”（如果此集合因调用而更改，则返回true）。
		【Throws】：
			ClassCastException 如果指定元素的类型与此集合不兼容（可选）
			NullPointerException 如果指定的元素为null，并且此集合不允许null元素（可选）
			UnsupportedOperationException 如果此集合不支持删除操作
	removeAll(Collection<?> c):boolean
		删除此集合中也包含在指定集合中的所有元素（可选操作）。此调用返回后，此集合将不包含与指定集合相同的元素。
		【Throws】：
			ClassCastException 如果此集合不支持removeall方法
			NullPointerException 如果此集合包含一个或多个null元素，并且指定的集合不支持null元素（可选），或者指定的集合为null
	removeIf(Predicate<? super E> filter):default boolean
		默认实现使用集合的iterator()遍历集合的所有元素。使用Iterator.remove()移除每个匹配元素。如果集合的迭代器不支持移除，那么将在第一个匹配元素上抛出UnsupportedOperationException。
		【Throws】：
			NullPointerException 如果指定的筛选器为null
			UnsupportedOperationException 如果无法从此集合中删除元素。如果无法删除匹配的元素，或者通常不支持删除，则实现可能会引发此异常。
	retainAll(Collection<?> c):boolean
		仅保留此集合中包含在指定集合中的元素（可选操作）。换句话说，从该集合中删除不包含在指定集合中的所有元素。
		【Throws】：
			UnsupportedOperationException 如果此集合不支持retainal操作
			ClassCastException 如果此集合中一个或多个元素的类型与指定的集合不兼容（可选）
			NullPointerException 如果此集合包含一个或多个null元素，并且指定的集合不允许空元素（可选），或者指定的集合为null。
	size():int   
		返回此集合中的元素数量。如果此集合包含超过Integer.MAX_VALUE元素，则返回Integer.MAX_VALUE。
	spliterator():default Spliterator<E>
		△在此集合中的元素上创建Spliterator。实现应该记录拆分器报告的特征值。如果拆分器报告Spliterator.SIZED并且此集合不包含元素，则不需要报告此类特征值。
		默认的实现应该被能够返回更有效的拆分器的子类重写。为了保持stream()和parallelStream()方法的预期惰性行为，拆分器要么具有IMMUTABLE或CONCURRENT的特性，要么具有后期绑定。如果这些都不可行，重写类应该描述拆分器的文档化绑定和结构干扰策略，并且应该重写stream()和parallelStream()方法，以便使用拆分器的Supplier创建流，如：
			Stream<E> s = StreamSupport.stream(() -> spliterator(), spliteratorCharacteristics)
		这些要求确保stream()和parallelstream()方法生成的流在启动终端流操作时将反映集合的内容。
		默认实现从集合的迭代器创建后期绑定Spliterator。Spliterator继承集合迭代器的fail-fast属性。创建的Spliterator报告Spliterator.SIZED特性。
		创建的Spliterator还报告Spliterator.SUBSIZED特性。
		如果Spliterator不包含任何元素，那么报告SIZED和SUBSIZED之外的其他特征值不会帮助客户控制、专门化或简化计算。但是，这确实允许对null集合共享使用不可变的空拆分器实例（请参见Spliterators.emptySpliterator()），并允许客户端确定这样的Spliterator（拆分器）是否不包含任何元素。
	stream():default Stream<E>
		返回将此集合作为其源的序列流。
		当spliterator()方法无法返回IMMUTABLE、CONCURRENT或后期绑定的拆分器时，应重写此方法。（详见spliterator()
		默认实现从集合的Spliterator创建顺序流。
	toArray():Object[]
		返回包含此集合中所有元素的数组。如果此集合对迭代器返回元素的顺序作出任何保证，则此方法必须以相同的顺序返回元素。
		返回的数组将是“安全的”，因为此集合不维护对它的引用。（换句话说，即使此集合由数组支持，此方法也必须分配一个新数组）。因此，调用者可以自由修改返回的数组。
		此方法充当基于数组和基于集合的API之间的桥梁。
	toArray(T[] a):T[]
		<T> 要包含集合的数组的运行时类型
		返回包含此集合中所有元素的数组；返回的数组的运行时类型是指定数组的运行时类型。如果集合符合指定的数组，则在其中返回。否则，将为新数组分配指定数组的运行时类型和此集合的大小。
		如果此集合适合具有备用空间的指定数组（即，数组中的元素多于此集合），则紧跟集合结尾的数组中的元素将设置为null。（只有当调用方知道此集合不包含任何空元素时，才有助于确定此集合的长度。）
		如果此集合对迭代器返回元素的顺序作出任何保证，则此方法必须以相同的顺序返回元素。
		与toArray()方法一样，此方法充当基于数组和基于集合的API之间的桥梁。此外，此方法允许对输出数组的运行时类型进行精确控制，并且可以在某些情况下用于节省分配成本。
		假设x是一个已知仅包含字符串的集合。以下代码可用于将集合转储到新分配的字符串数组中：
			String[] y = x.toArray(new String[0]);
		请注意，toArray(new Object[0])的功能与toArray（）相同。
		【Throws】：
			ArrayStoreException 如果指定数组的运行时类型不是此集合中每个元素的运行时类型的父类型
			NullPointerException 如果指定的数组为空
		
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
附录：
	1、注：文档中的△符号表示覆盖重写方法。





















