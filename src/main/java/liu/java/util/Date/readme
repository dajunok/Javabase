一、案例说明：
	1、Date类的测试Demo
二、源代码文件（.java）介绍：
三、知识点：
	------------------------------------------------------------------------------------------------------------------------------------------------------
	1、Date类：日期类。
		类Date表示特定的时间瞬间，精度为毫秒。
		在JDK1.1之前，Date类还有两个附加功能。它允许将日期解释为年、月、日、小时、分钟和秒值。它还允许格式化和分析日期字符串。不幸的是，这些函数的API不适合国际化。从JDK 1.1开始，Calendar类应该用于在日期和时间字段之间转换，而DateFormat类应该用于格式化和分析日期字符串。Date中的相应方法已弃用。
		虽然Dead类旨在反映协调的通用时间（UTC），但它可能不那么精确，这取决于Java虚拟机的主机环境。几乎所有现代操作系统都假设1天=24×60×60=86400秒。然而，在UTC中，大约每年一两次会有一个额外的秒，称为“闰秒”。闰秒总是作为一天的最后一秒添加，并且总是在12月31日或6月30日添加。例如，由于增加了闰秒，1995年的最后一分钟长达61秒。大多数计算机时钟不够精确，无法反映闰秒的差别。
		有些计算机标准是根据格林威治标准时间（GMT）来定义的，这相当于世界时间（UT）。GMT是标准的“民用”名称；UT是同一标准的“科学”名称。UTC和UT的区别在于，UTC是基于原子钟的，而UT是基于天文观测的，对于所有实际用途来说，它都是一根无形的细毛。因为地球的自转不均匀（它以复杂的方式减慢和加速），所以超声波并不总是均匀流动。根据需要在UTC中引入闰秒，以便将UTC保持在UT1的0.9秒内，UT1是一个应用了某些修正的UT版本。还有其他的时间和日期系统；例如，基于卫星的全球定位系统（GPS）使用的时间刻度与UTC同步，但不针对闰秒进行调整。美国海军天文台（U.S.Naval Observatory）是一个有趣的进一步信息来源，特别是时间理事会：
		在接受或返回年、月、日、时、分和秒值的所有Date类方法中，使用以下表示：
			● “年”   用一个整数表示，如1900
			● “月”   由0到11之间的整数表示；0是1月，1是2月等等；因此11是12月。
			● “日”  （每月的某一天）通常用1到31之间的整数表示。
			● “时”   由0到23之间的整数表示。因此，从午夜到凌晨1点的时间是0点，从中午到下午1点的时间是12点。
			● “分钟”  由0到59之间的整数以通常的方式表示。
			● “秒”   是由0到61的整数表示的，值60和61只出现在跳跃秒，甚至只有在实际实现跳跃秒正确的Java实现中。由于目前引入闰秒的方式，两个闰秒不太可能在同一分钟内出现，但本规范遵循ISO C的日期和时间约定。
		在所有情况下，为这些目的提供给方法的参数不必在指定的范围内；例如，日期可以指定为1月32日，并解释为2月1日。
	
		类定义：public class Date extends Object implements Serializable, Cloneable, Comparable<Date>
	------------------------------------------------------------------------------------------------------------------------------------------------------		
	构造器：
		Date()
			分配一个Date对象并对其进行初始化，使其表示当前分配的时间，以最接近的毫秒为单位。	
		Date(long date)
			分配一个Date对象并初始化它，以表示自称为“纪元”的标准基准时间（即1970年1月1日00:00:00 GMT）以来的指定毫秒数。
		
		------------------------以下构造器全部被淘汰----------------------------------------------
		Date(int year, int month, int date)
			★已淘汰。自JDK 1.1版起，替换为Calendar.set(year + 1900, month, date)或者GregorianCalendar(year + 1900, month, date)。
			分配Date对象并对其进行初始化，使其表示由年、月和日参数指定的日期开始时的午夜、本地时间。
		Date(int year, int month, int date, int hrs, int min)
			★已淘汰。自JDK 1.1版起，替换为Calendar.set(year + 1900, month, date, hrs, min)或者GregorianCalendar(year + 1900, month, date, hrs, min)。
			分配一个Date对象并初始化它，以便它表示在本地时区中由年、月、日、时、分参数指定的分钟开始时的Date实例。
		Date(int year, int month, int date, int hrs, int min, int sec)
			★已淘汰。自JDK 1.1版起，替换为Calendar.set(year + 1900, month, date, hrs, min, sec)或者GregorianCalendar(year + 1900, month, date, hrs, min, sec)。
			分配一个Date对象并初始化它，以便它表示由本地时区中的Year、Month、Date、Hrs、Min和Sec参数指定的秒开始时的Date实例。
		Date(String s)
			★已淘汰。自JDK 1.1版起，替换为DateFormat.parse(String s)。
			分配一个Date对象并初始化它，以便它代表字符串S所指示的日期和时间，它用 parse(java.lang.String)方法解析。
	
	方法：
		from(Instant instant):static Date 
			从即时对象获取Date实例。	
			即时瞬间使用纳秒的精度，而Date使用毫秒的精度。转换会将任何多余的精度信息忽略，就好像以纳秒为单位的数量被整数除以一百万。
			Instant可以在时间线上存储点，在将来更进一步，在过去更进一步。在此方案中，此方法将引发异常。
		parse(String s):static long 
			★已淘汰。自JDK 1.1版起，替换为DateFormat.parse(String s)
			尝试将字符串s解释为日期和时间的表示形式。如果尝试成功，则返回所指示的时间，表示为该时间与纪元（1970年1月1日格林尼治标准时间00:00:00）之间的距离，单位为毫秒。如果尝试失败，将引发IllegalArgumentException。
			它接受许多语法；特别是，它承认IETF标准日期语法：“SAT，1995年8月12日13:30:00 GMT”。它还了解美国大陆时区的缩写，但一般情况下，应使用时区偏移：“1995年8月12日星期六，格林威治标准时间13:30:00+0430”（格林威治子午线以西4小时30分钟）。如果未指定时区，则假定为本地时区。格林尼治标准时间和UTC被认为是等效的。
			字符串s从左到右进行处理，以查找感兴趣的数据。在S中，任何在ASCII括号字符（and）内的素材都将被忽略。括号可以嵌套。否则，S中允许的唯一字符是这些ASCII字符：
				abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ 0123456789,+-:/
			和空白字符。
			连续的十进制数字序列被视为十进制数：
				● 如果数字前面是+或-并且已经识别出年份，则该数字是时区偏移量。如果数字小于24，则是以小时为单位测量的偏移量。否则，它被视为以分钟为单位的偏移量，以24小时格式表示，不带标点符号。preceding的意思是向西偏移。时区偏移总是相对于UTC（格林威治）。因此，例如，字符串中出现的-5表示“格林威治以西5小时”，+0430表示“格林威治以东4小时30分钟”。允许字符串重复指定GMT、UT或UTC，例如，GMT-5或UTC+0430。
				● 如果符合下列条件之一，则该数字视为年份数字：
					◆数字等于或大于70，后跟空格、逗号、斜杠或字符串结尾
					◆该数字小于70，并且已识别出该月的一个月和一天
					如果识别的年份号小于100，则将其解释为相对于一个世纪的缩写年份，其中日期在日期类初始化之前的80年内和之后的19年内。调整年份后，从中减去1900。例如，如果当前年份是1999年，则假定19至99年的年份是指1919至1999年，而0至18年的年份是指2000至2018年。请注意，这与SimpleDateFormat中使用的小于100年的年份的解释略有不同。
				● 如果数字后面跟一个冒号，它将被视为一个小时，除非已经识别出一个小时，在这种情况下，它将被视为一分钟。
				● 如果数字后跟斜杠，则将其视为一个月（减少1以产生0到11范围内的数字），除非已识别出一个月，在这种情况下，将其视为该月的一天。
				● 如果数字后面跟有空格、逗号、连字符或字符串结尾，则如果一小时已被识别但不是一分钟，则视为一分钟；否则，如果一分钟已被识别但不是一秒，则视为一秒；否则，则视为一个月中的一天。
			连续的字母序列被视为一个单词，并按如下方式处理：
				● 与AM匹配的单词将被忽略，忽略大小写（但如果小时未被识别或小于1或大于12，则解析将失败）。
				● 匹配PM的单词，忽略大小写，会将12添加到小时（但如果小时未被识别或小于1或大于12，则解析将失败）。		
				● 任何与SUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY或SATURDAY的前缀匹配的单词，忽略大小写。例如，sat, Friday, TUE,和hurs被忽略。
				● 否则，任何与JANUARY, FEBRUARY, MARCH, APRIL, MAY, JUNE, JULY, AUGUST, SEPTEMBER, OCTOBER, NOVEMBER, 或者DECEMBER的前缀匹配的单词（忽略大小写，并按此处给出的顺序考虑）将被视为指定月份并转换为数字（0到11）。例如，aug, Sept, april,NOV 被视为月份。Ma也是，被认为是MARCH，而不是MAY。
				● 任何与GMT、UT或UTC匹配的单词，忽略大小写，都被视为指UTC。	
				● 任何与EST, CST, MST, PST匹配的单词，忽略大小写，都被认为是指北美的时区，分别位于格林威治以西5、6、7或8点。任何与EDT, CDT, MDT, PDT匹配的单词，忽略大小写，在夏令时分别指同一时区。。
			扫描完整个字符串后，它将以两种方式之一转换为时间结果。如果已识别时区或时区偏移量，则年份、月份、月日、小时、分钟和秒将以UTC解释，然后应用时区偏移量。否则，年、月、月、日、小时、分钟和秒将在本地时区中解释。		
		UTC(int year, int month, int date,int hrs, int min, int sec):static long 
			★已淘汰。自JDK 1.1版起，替换为Calendar.set(year + 1900, month, date, hrs, min, sec)或者GregorianCalendar(year + 1900, month, date, hrs, min, sec)，使用UTC时区，后跟Calendar.getTime().getTime()		
			根据参数确定日期和时间。参数被解释为一年、一个月、一个月中的一天、一天中的一小时、一小时中的一分钟和一分钟中的一秒，与带有六个参数的Date构造函数完全相同，但参数被解释为相对于UTC而不是相对于本地时区。返回指示的时间，表示该时间与纪元（1970年1月1日格林尼治标准时间00:00:00）之间的距离，单位为毫秒。
		after(Date when):boolean 
			测试此日期是否在指定日期之后。
		before(Date when):boolean
			测试此日期是否在指定日期之前。
		clone():Object 
			返回此对象的副本。
		compareTo(Date anotherDate):int 
			比较两个日期顺序。如果参数日期等于此日期，则为0；如果此日期在日期参数之前，则为小于0的值；如果此日期在日期参数之后，则为大于0的值。
		equals(Object obj):boolean 
			比较两个日期是否相等。如果且仅当参数不为空并且是表示与此对象相同时间点（毫秒）的日期对象，则结果为true。因此，如果并且仅当getTime方法为这两个对象返回相同的long值时，两个日期对象才相等。
		getDate():int 
			★已淘汰。自JDK 1.1版起，替换为Calendar.get(Calendar.DAY_OF_MONTH)
			返回此日期对象表示的月份日期。返回的值介于1和31之间，表示包含或以此日期对象表示的即时时间开始的月份中的某一天，如在本地时区中解释的那样。
		getDay():int 
			★已淘汰。自JDK 1.1版起，替换为Calendar.get(Calendar.DAY_OF_WEEK)
			返回此日期表示的星期几。返回的值（0=星期日(Sunday)，1=星期一(Monday)，2=星期二(Tuesday)，3=星期三(Wednesday)，4=星期四(Thursday)，5=星期五(Friday)，6=星期六(Saturday)）表示包含或以此日期对象表示的即时时间开始的一周中的某一天，如本地时区中所解释的。
		getHours():int 
			★已淘汰。自JDK 1.1版起，替换为Calendar.get(Calendar.HOUR_OF_DAY)
			返回此日期对象表示的小时。返回的值是一个数字（0到23），表示一天中包含或以该日期对象表示的即时时间开始的小时，如在本地时区中解释的那样。
		getMinutes():int 
			★已淘汰。自JDK 1.1版起，替换为Calendar.get(Calendar.MINUTE)
			按本地时区中的解释，返回此日期所代表的小时后的分钟数。返回的值介于0和59之间。
		getMonth():int 
			★已淘汰。自JDK 1.1版起，替换为Calendar.get(Calendar.MONTH)
			返回一个表示月份的数字，该月份包含或以此日期对象表示的即时时间开头。返回的值介于0和11之间，值0表示1月。
		getSeconds():int 
			★已淘汰。自JDK 1.1版起，替换为Calendar.get(Calendar.SECOND)
			返回此日期所代表的分钟之后的秒数。返回的值介于0和61之间。值60和61只能出现在考虑跳跃秒的Java虚拟机上。
		getTime():long 
			返回自1970年1月1日起由此日期对象表示的00:00:00 GMT的毫秒数。
		getTimezoneOffset():int 
			★已淘汰。自JDK 1.1版起，替换为(Calendar.get(Calendar.ZONE_OFFSET) + Calendar.get(Calendar.DST_OFFSET)) / (60 * 1000)
			返回适用于此日期对象表示的时间的本地时区相对于UTC的偏移量（以分钟为单位）。
		getYear():int 
			★已淘汰。自JDK 1.1版起，替换为Calendar.get(Calendar.YEAR) - 1900
			返回一个值，该值是从包含或以由此日期对象表示的即时时间开始的年份中减去1900的结果，如在本地时区中所解释的。
		hashCode():int 
			返回此对象的哈希代码值。结果是getTime()方法返回的原语long值的两部分的异或。也就是说，哈希代码是表达式的值：(int)(this.getTime()^(this.getTime() >>> 32))
		setDate(int date):void 
			★已淘汰。自JDK 1.1版起，替换为Calendar.set(Calendar.DAY_OF_MONTH, int date)。
			将此日期对象的月份日期设置为指定值（月份值的日期介于1到31之间）。修改此日期对象，使其表示月份指定日期内的时间点，年份、月份、小时、分钟和秒与之前相同，如本地时区中所解释的那样。例如，如果日期是4月30日，并且日期设置为31，那么它将被视为5月1日，因为4月只有30天。
		setHours(int hours):void 
			★已淘汰。自JDK 1.1版起，替换为Calendar.set(Calendar.HOUR_OF_DAY, int hours)
			将此日期对象的小时设置为指定值。修改此日期对象，使其表示一天中指定小时内的时间点，年份、月份、日期、分钟和秒与之前相同，如本地时区中所解释的那样。
		setMinutes(int minutes):void 
			★已淘汰。自JDK 1.1版起，替换为Calendar.set(Calendar.MINUTE, int minutes)
			将此日期对象的分钟数设置为指定值。修改此日期对象，使其表示小时中指定分钟内的时间点，年、月、日期、小时和秒与之前相同，如本地时区中所解释的那样。
		setMonth(int month):void 
			★已淘汰。自JDK 1.1版起，替换为Calendar.set(Calendar.MONTH, int month)
			将此日期的月份设置为指定值。修改此日期对象，使其表示指定月份内的时间点，年份、日期、小时、分钟和秒与之前相同，在本地时区中进行解释。例如，如果日期是10月31日，而月份设置为6月，则新日期将被视为7月1日，因为6月只有30天。
		setSeconds(int seconds):void 
			★已淘汰。自JDK 1.1版起，替换为Calendar.set(Calendar.SECOND, int seconds)
			将此日期的秒数设置为指定值。修改此日期对象，使其表示分钟指定秒内的时间点，年、月、日期、小时和分钟与本地时区中解释的相同。
		setTime(long time):void 
			将此日期对象设置为表示1970年1月1日00:00:00 GMT之后的时间点（毫秒）。
		setYear(int year):void 
			★已淘汰。自JDK 1.1版起，替换为Calendar.set(Calendar.YEAR, year + 1900)
			将此日期对象的年份设置为指定值加1900。修改此日期对象，使其表示指定年份内的时间点，月、日期、小时、分钟和秒与之前相同，如在本地时区中解释的那样。（当然，如果日期是2月29日，并且年份设置为非闰年，那么新日期将被视为3月1日。）
		toGMTString():String 
			★已淘汰。自JDK 1.1版起，替换为DateFormat.format(Date date)  使用GMT时区
			创建此日期对象的字符串表示形式：
				d mon yyyy hh:mm:ss GMT
		toInstant():Instant 
			将此日期对象转换为即时对象。转换将创建一个表示时间线上与此日期相同的点的即时瞬间信息。
		toLocaleString():String 
			★已淘汰。自JDK 1.1版起，替换为DateFormat.format(Date date)
			以依赖于实现的形式创建此日期对象的字符串表示形式。其目的是，无论在何处运行，该表单都应该是Java应用程序的用户所熟悉的。其目的与ISO C的strftime()函数支持的“%c”格式类似。
		toString():String 
			将此日期对象转换为字符串形式：
				dow mon dd hh:mm:ss zzz yyyy
			● dow 	星期几（周日(Sun)、周一(Mon)、周二(Tue)、周三(Wed)、周四(Thu)、周五(Fri)、周六(Sat)）
			● mon 	是月份（一月(Jan),二月(Feb),三月(Mar),四月(Apr), 五月(May),六月(Jun),七月(Jul),八月(Aug),九月(Sep),十月(Oct)十一月(Nov),十二月(Dec)）。
			● dd  	是一个月中的第几天（01到31），以两位十进制数字表示。）
			● hh  	是一天中的小时（00到23），以两位十进制数字表示。）
			● mm  	是小时（00到59）内的分钟，为两位十进制数字。
			● ss  	是分钟内的秒数（00到61，以两位十进制数字表示）。
			● zzz 	是时区（可能反映夏令时）。标准时区缩写包括方法解析识别的缩写。如果时区信息不可用，则zzz为空——也就是说，它根本不包含任何字符。
			● yyyy 	是年份，以四位十进制数字表示。
	------------------------------------------------------------------------------------------------------------------------------------------------------
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		