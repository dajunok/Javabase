----------------------------------------------Collections----------------------------------------------------------------------------------------------
Collections：集合包装盒处理类（静态工厂方法类）。
	此类只包含对集合或返回集合进行操作的静态方法。它包含对集合“wrappers”进行操作的多态算法，后者返回由指定集合支持的新集合，以及其他一些零碎的结果。
	如果提供给此类的集合或类对象为空，则此类的所有方法都将引发NullPointerException异常。Collections则是集合类的一个工具类/帮助类，其中提供了一系列静态方法，
	用于对集合中元素进行排序、搜索以及线程安全等各种操作。
	
	类定义：public class Collections extends Object
--------------------------------------------------------------------------------------------------------------------------------------------
属性：
	EMPTY_LIST
		空列表(list)（不可变）。此列表是可序列化的。它是一个静态对象，可以通过Collections.EMPTY_LIST直接引用。
	EMPTY_MAP
		空映射(map)（不可变）。此映射是可序列化的。它是一个静态对象，可以通过Collections.EMPTY_MAP直接引用。
	EMPTY_SET
		空集（set）（不可变）。此集合是可序列化的。它是一个静态对象，可以通过Collections.EMPTY_SET直接引用。
		
方法：
	addAll(Collection<? super T> c, T... elements):static <T> boolean 
		将所有指定的元素添加到指定的集合中，要添加的元素可以单独指定，也可以作为数组指定。如果集合因调用而更改，则返回true。这个方便方法的行为与c.addAll(Arrays.asList(elements))的行为相同，但在大多数实现中，这个方法可能运行得更快。	
		单独指定元素时，此方法为向现有集合添加一些元素提供了一种方便的方法：
			Collections.addAll(flavors, "Peaches 'n Plutonium", "Rocky Racoon");
	asLifoQueue(Deque<T> deque):static <T> Queue<T> 
		返回Deque作为后进先出（Lifo）队列的视图。方法add映射为push，remove映射为pop等。当您希望使用需要队列但需要后进先出排序的方法时，此视图非常有用。
	binarySearch(List<? extends Comparable<? super T>> list, T key):static <T> int 
		使用二进制搜索算法在指定的列表中搜索指定的对象。在进行此调用之前，列表必须根据其元素的自然顺序（如sort(List)方法）按升序排序。如果不排序，则结果不确定。如果列表包含多个等于指定对象的元素，则无法保证将找到哪个元素。	
		对于“随机访问”列表（它提供近乎恒定的时间位置访问），此方法以log(n)时间运行。如果指定的列表不实现randomaccess接口并且很大，则此方法将执行基于迭代器的二进制搜索，执行O(n) 链接遍历和O(log n)元素比较。
		该方法返回搜索键key的索引（如果它包含在列表中）；否则返回（-（插入点）-1），插入点被定义为将键插入列表的点。第一个元素的索引大于键，或者如果列表中的所有元素都小于指定的键，则为list.size()。请注意，这保证了如果并且仅当找到键时，返回值将大于等于0。
	binarySearch(List<? extends T> list, T key, Comparator<? super T> c):static <T> int 
		使用二进制搜索算法在指定的列表中搜索指定的对象。在进行此调用之前，列表必须根据指定的比较器（如sort(List, Comparator)方法）按升序排序。如果不排序，则结果不确定。如果列表包含多个等于指定对象的元素，则无法保证将找到哪个元素。
		对于“随机访问”列表（它提供近乎恒定的时间位置访问），此方法以log(n)时间运行。如果指定的列表不实现randomaccess接口并且很大，则此方法将执行基于迭代器的二进制搜索，执行O(n)链接遍历和O(log n)元素比较。
		该方法返回搜索键key的索引（如果它包含在列表中）；否则返回（-（插入点）-1），插入点被定义为将键插入列表的点。第一个元素的索引大于键，或者如果列表中的所有元素都小于指定的键，则为list.size()。请注意，这保证了如果并且仅当找到键时，返回值将大于等于0。
	checkedCollection(Collection<E> c,Class<E> type):static <E> Collection<E> 
		返回指定集合的动态类型安全视图。任何插入错误类型的元素的尝试都将导致立即的ClassCastException异常。假设集合在生成动态类型安全视图之前不包含类型不正确的元素，并且所有后续对集合的访问都是通过视图进行的，则可以保证集合不包含类型不正确的元素。	
		语言中的泛型机制提供了编译时（静态）类型检查，但有可能用未检查的强制转换来破坏这种机制。通常这不是问题，因为编译器会对所有这些未检查的操作发出警告。但是，有时单独进行静态类型检查是不够的。例如，假设一个集合被传递给第三方库，并且库代码必须通过插入错误类型的元素来损坏集合。
		示例：Collection<String> c = Collections.checkedCollection(new HashSet<>(), String.class);
	checkedList(List<E> list, Class<E> type):static <E> List<E> 
		返回指定列表的动态类型安全视图。任何插入错误类型的元素的尝试都将导致立即的ClassCastException。假设列表在生成动态类型安全视图之前不包含错误类型的元素，并且所有随后通过该视图访问列表，则可以保证列表中不能包含错误类型的元素。
		如果指定的列表是可序列化的，则返回的列表将是可序列化的。
	checkedMap(Map<K, V> m,Class<K> keyType,Class<V> valueType):static <K, V> Map<K, V> 
		返回指定映射的动态类型安全视图。任何插入键或值类型错误的映射的尝试都将导致立即的ClassCastException(类型转换异常)。类似地，任何修改当前与键关联的值的尝试都将导致立即的ClassCastException，无论是直接尝试通过映射本身进行修改，还是通过从映射的entry set视图获取的map.entry实例进行修改。
	checkedNavigableMap(NavigableMap<K, V> m,Class<K> keyType,Class<V> valueType):static <K,V> NavigableMap<K,V> 
		返回指定可导航Map的动态类型安全视图。任何插入键或值类型错误的映射的尝试都将导致立即的ClassCastException(类型转换异常)。类似地，任何修改当前与键关联的值的尝试都将导致立即的ClassCastException，无论是直接尝试通过映射本身进行修改，还是通过从映射的entry set视图获取的map.entry实例进行修改。
	checkedNavigableSet(NavigableSet<E> s,Class<E> type):static <E> NavigableSet<E> 
		返回指定可导航集set的动态类型安全视图。任何插入错误类型的元素的尝试都将导致立即的ClassCastException。假设可导航集在生成动态类型安全视图之前不包含错误类型的元素，并且随后通过视图访问可导航集，则可以保证可导航集不能包含错误类型的元素。
	checkedQueue(Queue<E> queue, Class<E> type):static <E> Queue<E> 
		返回指定队列的动态类型安全视图。任何插入错误类型的元素的尝试都将导致立即的ClassCastException(类型转换异常)。假设在生成动态类型安全视图之前，队列不包含类型不正确的元素，并且所有后续对队列的访问都是通过视图进行的，则可以确保队列不包含类型不正确的元素。
	checkedSet(Set<E> s, Class<E> type):static <E> Set<E> 
		返回指定集set的动态类型安全视图。任何插入错误类型的元素的尝试都将导致立即的ClassCastException。假设一个集合在生成动态类型安全视图之前不包含错误类型的元素，并且所有随后通过该视图访问该集合，则可以保证该集合不能包含错误类型的元素。
	checkedSortedMap(SortedMap<K, V> m,Class<K> keyType,Class<V> valueType):static <K,V> SortedMap<K,V> 
		返回指定排序Map映射的动态类型安全视图。任何插入键或值类型错误的映射的尝试都将导致立即的ClassCastException(类型转换异常)。类似地，任何修改当前与键关联的值的尝试都将导致立即的ClassCastException(类型转换异常)，无论是直接尝试通过映射本身进行修改，还是通过从映射的entry set视图获取的map.entry实例进行修改。
	checkedSortedSet(SortedSet<E> s,Class<E> type):static <E> SortedSet<E> 
		返回指定排序集set的动态类型安全视图。任何插入错误类型的元素的尝试都将导致立即的ClassCastException(类型转换异常)。假设排序集在生成动态类型安全视图之前不包含错误类型的元素，并且所有后续对排序集的访问都是通过视图进行的，则可以保证排序集不能包含错误类型的元素。
	copy(List<? super T> dest, List<? extends T> src):static <T> void 
		将所有元素从一个列表复制到另一个列表中。操作完成后，目标列表中每个复制元素的索引将与其源列表中的索引相同。目标列表必须至少与源列表一样长。如果长度较长，则目标列表中的其余元素不受影响。	
	disjoint(Collection<?> c1, Collection<?> c2):static boolean 
		如果两个指定的集合没有共同的元素(没有交集)，则返回true。
		如果在不符合Collection通用契约的Collections上使用此方法，则必须小心。实现可以选择迭代Collection并测试其他Collection中的包含性（或执行任何等效计算）。如果Collection使用非标准等同性测试（排序与等于不兼容的SortedSet或IdentityHashMap的键集），则两个collections都必须使用相同的非标准等同性测试，或者此方法的结果未定义。
		在使用对可能包含的元素有限制的集合时，还必须小心。允许集合实现为任何涉及它们认为不合格的元素的操作抛出异常。为绝对安全起见，指定的集合应只包含符合两个集合条件的元素。
		请注意，允许在两个参数中传递同一个集合，在这种情况下，如果并且仅当集合为空时，方法将返回true。
	emptyEnumeration():static <T> Enumeration<T> 
		返回没有元素的枚举Enumeration。更确切地说，hasMoreElements方法总返回false，nextElement方法总是抛出 NoSuchElementException异常。
	emptyIterator():static <T> Iterator<T> 
		返回没有元素的迭代器。更确切地说，hasNext方法总是返回false，next方法总是抛出NoSuchElementException异常，remove方法总是抛出IllegalStateException异常。
	emptyList():static final <T> List<T> 
		返回空列表（不可变）。此列表是可序列化的。
	emptyListIterator():static <T> ListIterator<T> 
		返回没有元素的列表迭代器。更确切地说，hasNext方法 和 hasPrevious方法总是返回false。next方法和previous方法总是抛出NoSuchElementException异常。remove方法和set方法总是抛出 IllegalStateException异常。add方法总是抛出UnsupportedOperationException异常。nextIndex方法总是返回 0。previousIndex总返回-1。
	emptyMap():static final <K,V> Map<K,V> 
		返回空映射（不可变）。此映射是可序列化的。此示例说明了获取空映射的类型安全方法：Map<String, Date> s = Collections.emptyMap();
	emptyNavigableMap():static final <K,V> NavigableMap<K,V>
		返回空的可导航Map（不可变）。此Map映射是可序列化的。示例：NavigableMap<String, Date> s = Collections.emptyNavigableMap();
	emptyNavigableSet():static <E> NavigableSet<E> 
		返回空的可导航集set（不可变）。此集合是可序列化的。 示例：NavigableSet<String> s = Collections.emptyNavigableSet();
	emptySet():static final <T> Set<T> 
		返回空集set（不可变）。此集合是可序列化的。与类似的命名字段不同，此方法是参数化的。示例：Set<String> s = Collections.emptySet();
	emptySortedMap():static final <K,V> SortedMap<K,V> 
		返回空的已排序Map映射（不可变）。此Map映射是可序列化的。示例：SortedMap<String, Date> s = Collections.emptySortedMap();
	emptySortedSet():static <E> SortedSet<E> 
		返回空的排序集set（不可变）。此集合set是可序列化的。
	enumeration(final Collection<T> c):static <T> Enumeration<T> 
		返回指定集合上的枚举(enumeration)。这提供了与需要枚举作为输入的遗留API的互操作性。
	fill(List<? super T> list, T obj):static <T> void 
		用指定的元素替换指定列表中的所有元素。
	frequency(Collection<?> c, Object o):static int 
		返回指定集合中与指定对象相等的元素数量。更正式地说，返回集合中元素e的数目，以便(o == null ? e == null : o.equals(e))。
	indexOfSubList(List<?> source, List<?> target):static int 
		返回指定源列表中指定目标列表的第一个匹配项的起始位置，如果没有指定源列表，则返回-1。更正式地说，返回最低的索引i，如source.subList(i, i+target.size()).equals(target)，如果没有这样的索引，则返回-1。（如果target.size() > source.size()，则返回-1）
	lastIndexOfSubList(List<?> source, List<?> target):static int 
		返回指定源列表中指定目标列表最后一个匹配项的起始位置，如果没有指定源列表，则返回-1。更正式地说，返回最高的索引i，如source.subList(i, i+target.size()).equals(target)，如果没有这样的索引，则返回-1。（如果target.size() > source.size()，则返回-1）
	list(Enumeration<T> e):static <T> ArrayList<T> 
		返回一个数组列表，其中包含由指定枚举返回的元素，元素的顺序与枚举返回的顺序相同。此方法提供返回枚举的旧API和需要集合的新API之间的互操作性。
	max(Collection<? extends T> coll):static <T extends Object & Comparable<? super T>> T 
		根据给定集合的元素的自然顺序返回该集合的最大元素。集合中的所有元素都必须实现可比较的接口。此外，集合中的所有元素必须相互比较（也就是说，e1.compareTo(e2)不能对集合中的任何元素e1和e2抛出ClassCastException(类型转换异常)）。
	max(Collection<? extends T> coll, Comparator<? super T> comp):static <T> T 
		根据指定比较器指定的顺序返回给定集合的最大元素。集合中的所有元素都必须通过指定的比较器进行相互比较（即，comp.compare(e1, e2)不能对集合中的任何元素e1和e2抛出ClassCastException(类型转换异常)）。
	min(Collection<? extends T> coll):static <T extends Object & Comparable<? super T>> T 
		根据给定集合的元素的自然顺序返回该集合的最小元素。集合中的所有元素都必须实现可比较的接口。此外，集合中的所有元素必须相互比较（也就是说，e1.compareto(e2)不能对集合中的任何元素e1和e2抛出ClassCastException(类型转换异常)）。
	min(Collection<? extends T> coll, Comparator<? super T> comp)
		根据指定比较器指定的顺序返回给定集合的最小元素。集合中的所有元素都必须通过指定的比较器进行相互比较（即，comp.compare(e1，e2)不能对集合中的任何元素e1和e2抛出ClassCastException(类型转换异常)）。
	nCopies(int n, T o):static <T> List<T> 
		返回由指定对象的n个副本组成的不可变列表。新分配的数据对象很小（它包含对数据对象的单个引用）。此方法与list.addall方法结合使用可使列表增长。返回的列表是可序列化的。
	newSetFromMap(Map<E, Boolean> map):static <E> Set<E> 
		返回由指定Map映射支持的集set。结果集显示的顺序、并发性和性能特征与支持映射相同。本质上，这个工厂方法提供了一个对应于任何映射实现的集合实现。不需要在已经具有相应集合实现（如hashmap或treemap）的映射实现上使用此方法。
	replaceAll(List<T> list, T oldVal, T newVal):static <T> boolean 
		将列表中一个指定值的所有出现项替换为另一个指定值。更正式地说，用newval替换列表中的每个元素e，这样(oldVal==null ? e==null : oldVal.equals(e))。（此方法对列表的大小没有影响。）
	reverse(List<?> list):static void 
		反转指定列表中元素的顺序。
	reverseOrder():static <T> Comparator<T> 
		返回一个比较器，该比较器对实现可比较接口的对象集合施加与自然顺序相反的顺序。（自然排序是由对象自己的CompareTo方法强制执行的排序。）这使一个简单的习惯用法能够对实现可比接口的对象集合（或数组）进行排序（或维护），而这些集合（或数组）的排序顺序与自然顺序相反。例如，假设a是一个字符串数组。然后：
		Arrays.sort(a, Collections.reverseOrder());
		按reverse-lexicographic(alphabetical)顺序对数组排序。
		返回的比较器是可序列化的。
	reverseOrder(Comparator<T> cmp):static <T> Comparator<T> 
		返回一个比较器，该比较器强制指定比较器的反向顺序。如果指定的comparator为空，则此方法等效于 reverseOrder()（换句话说，它返回一个comparator，该comparator对实现可比较接口的对象集合施加与自然顺序相反的顺序）。
	rotate(List<?> list, int distance):static void 
		按指定的距离旋转指定列表中的元素。调用此方法后，索引i处的元素将是以前在(i - distance) mod list.size()处的元素，对于i在0和list.size()-1之间的所有值（包括0和list.size()-1）。（此方法对列表的大小没有影响。）
	shuffle(List<?> list):static void 
		使用默认的随机性源随机排列指定的列表。所有排列都以近似相等的可能性发生。
	shuffle(List<?> list, Random rnd):static void 
		使用指定的随机性源随机排列指定的列表。假设随机性的来源是公平的，所有排列都以同样的可能性发生。
	singleton(T o):static <T> Set<T> 
		返回仅包含指定对象的不可变集set。返回的集是可序列化的。
	singletonList(T o):static <T> List<T> 
		返回仅包含指定对象的不可变列表。返回的列表是可序列化的。
	singletonMap(K key, V value):static <K,V> Map<K,V> 
		返回不可变映射，仅将指定键映射到指定值。返回的映射是可序列化的。
	sort(List<T> list):static <T extends Comparable<? super T>> void 
		根据指定列表元素的自然顺序，将其按升序排序。列表中的所有元素都必须实现可比较的接口。此外，列表中的所有元素必须相互比较（也就是说，e1.compareto(e2)不能对列表中的任何元素e1和e2抛出ClassCastException）。
	sort(List<T> list, Comparator<? super T> c):static <T> void 
		根据指定比较器指定的顺序对指定的列表进行排序。列表中的所有元素都必须使用指定的比较器进行相互比较（即，c.compare(e1，e2)不能对列表中的任何元素e1和e2抛出ClassCastException）。
	swap(List<?> list, int i, int j):static void 
		在指定列表中的指定位置交换元素。（如果指定的位置相等，则调用此方法将使列表保持不变。）
	synchronizedCollection(Collection<T> c):static <T> Collection<T> 
		返回由指定集合支持的同步（线程安全）集合。为了保证串行访问，必须通过返回的集合来完成对支持集合的所有访问。
	synchronizedList(List<T> list):static <T> List<T> 	
		返回由指定列表支持的同步（线程安全）列表。为了保证串行访问，必须通过返回的列表完成对备份列表的所有访问。示例：List list = Collections.synchronizedList(new ArrayList());
	synchronizedMap(Map<K,V> m):static <K,V> Map<K,V> 
		返回由指定Map映射支持的同步（线程安全）Map映射。为了保证串行访问，必须通过返回的映射完成对备份映射的所有访问。示例：Map m = Collections.synchronizedMap(new HashMap());
	synchronizedNavigableMap(NavigableMap<K,V> m):static <K,V> NavigableMap<K,V> 
		返回由指定的可导航Map映射支持的同步（线程安全）可导航Map映射。为了保证串行访问，必须通过返回的可导航地图（或其视图）完成对支持导航地图的所有访问。示例：NavigableMap m = Collections.synchronizedNavigableMap(new TreeMap());
	synchronizedNavigableSet(NavigableSet<T> s):static <T> NavigableSet<T> 
		返回由指定的可导航集set支持的同步（线程安全）可导航集set。为了保证串行访问，必须通过返回的可导航集（或其视图）来完成对支持可导航集的所有访问。示例：NavigableSet s = Collections.synchronizedNavigableSet(new TreeSet());
	synchronizedSet(Set<T> s):static <T> Set<T> 
		返回由指定集set支持的同步（线程安全）集set。为了保证串行访问，所有对备份集的访问都必须通过返回集完成，这一点至关重要。示例：Set s = Collections.synchronizedSet(new HashSet());
	synchronizedSortedMap(SortedMap<K,V> m):static <K,V> SortedMap<K,V> 
		返回由指定的排序映射支持的同步（线程安全）排序映射。为了保证串行访问，关键是要通过返回的排序映射（或其视图）完成对备份排序映射的所有访问。示例：
	synchronizedSortedSet(SortedSet<T> s):static <T> SortedSet<T> 
		返回由指定排序集set支持的同步（线程安全）排序集set。为了保证串行访问，对备份排序集的所有访问都是通过返回的排序集（或其视图）完成的，这一点至关重要。示例：SortedSet s = Collections.synchronizedSortedSet(new TreeSet());
	unmodifiableCollection(Collection<? extends T> c):static <T> Collection<T> 
		返回指定集合的不可修改视图。此方法允许模块向用户提供对内部集合的“只读”访问。对返回的集合“读取”到指定集合的查询操作。尝试直接或通过迭代器修改返回的集合，会导致UnsupportedOperationException。
	unmodifiableList(List<? extends T> list):static <T> List<T> 
		返回指定列表的不可修改视图。此方法允许模块为用户提供对内部列表的“只读”访问。对返回的列表“读取”到指定列表的查询操作。尝试直接或通过迭代器修改返回的列表，会导致UnsupportedOperationException。
	unmodifiableMap(Map<? extends K, ? extends V> m):static <K,V> Map<K,V> 
		返回指定映射的不可修改视图。此方法允许模块为用户提供对内部映射的“只读”访问。对返回的映射“读取”到指定映射的查询操作。并尝试直接或通过其集合视图修改返回的映射，会导致UnsupportedOperationException。
	unmodifiableNavigableMap(NavigableMap<K, ? extends V> m):static <K,V> NavigableMap<K,V> 
		返回指定可导航Map的不可修改视图。此方法允许模块为用户提供对内部可导航Map的“只读”访问。对返回的可导航Map“读取”到指定的可导航Map的查询操作。尝试修改返回的可导航map（无论是直接的、通过其集合视图还是通过其子映射、头映射或尾映射视图），都会导致UnsupportedOperationException(不受支持的操作异常)。
	unmodifiableNavigableSet(NavigableSet<T> s):static <T> NavigableSet<T> 
		返回指定可导航集set的不可修改视图。此方法允许模块为用户提供对内部可导航集set的“只读”访问。对返回的可导航集set“读取”到指定的可导航集set的查询操作。尝试修改返回的可导航集set（无论是直接的、通过迭代器的还是通过其子集、耳机或尾集set视图的），都会导致UnsupportedOperationException(不受支持的操作异常)。
	unmodifiableSet(Set<? extends T> s):static <T> Set<T> 
		返回指定集set的不可修改视图。此方法允许模块为用户提供对内部集set的“只读”访问。对返回集set“read-through”的查询操作到指定集set，并尝试直接或通过迭代器修改返回集set，会导致UnsupportedOperationException。
	unmodifiableSortedMap(SortedMap<K, ? extends V> m):static <K,V> SortedMap<K,V> 
		返回指定排序map映射的不可修改视图。此方法允许模块为用户提供对内部排序map映射的“只读”访问。对返回的已排序map映射“读取”到指定的已排序map映射的查询操作。尝试修改返回的已排序映射（无论是直接的、通过其集合视图还是通过其子映射、头映射或尾映射视图），都会导致UnsupportedOperation异常。
	unmodifiableSortedSet(SortedSet<T> s):static <T> SortedSet<T> 
		返回指定排序集的不可修改视图。此方法允许模块为用户提供对内部排序集的“只读”访问。对返回的已排序集“读取”到指定的已排序集的查询操作。尝试修改返回的排序集（无论是直接的、通过迭代器或通过其子集、耳机或尾集视图）都会导致UnsupportedOperation异常。
--------------------------------------------------------------------------------------------------------------------------------------------	
