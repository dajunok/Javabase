一、案例说明：
	1、Collections类的测试Demo
二、源代码文件（.java）介绍：
三、知识点：

四、涉及的接口和类：
	--------------------------------------------------------------------------------------------------------------------------------------------	
	1、Iterable<T>接口：可迭代接口。故名思议，实现了这个接口的集合对象支持迭代，是可迭代的。它是一个函数式接口。
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
		forEach(Consumer<? super T> action):default void 
			对iterable（指的是实现该接口的集合对象）的每个元素执行给定的操作，直到所有元素都被处理或操作引发异常为止。
		Iterator<T> iterator()
			返回T类型元素的迭代器。	
		spliterator():default Spliterator<T> 
			在这个Iterable描述的元素上创建一个Spliterator迭代器。
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
	2、Collection<E>接口：容器接口。该接口继承于Iterable<E>，使得java中所有实现Collection<E>的容器类，都能有统一的访问接口。Collection仅仅定义一组保存元素的最基本的操作集合。不包含获取元素和随机访问元素的操作集合，也不包含替换、插入等接口，就连remove、removeAll、retainAll方法都是可选的方法。但是作为持有元素的容器，这体现了接口最小职责的原则，使得大多数具体类型的容器能实现特定操作集合的同时，又能保证容器的通用性。
		父接口：Iterable<E>
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
		add(E element):boolean
			将元素e添加到此集合中，如果添加成功则返回true,添加失败则返回false
		addAll(Collection<? extends E> c):boolean
			将指定 collection 中的所有元素都添加到此 collection 中.
		clear():void
			移除此 collection 中的所有元素。
		contains(Object o):boolean
			如果此 collection 包含指定的元素，则返回 true。更确切地讲，当且仅当此 collection 至少包含一个满足 (o==null ? e==null : o.equals(e)) 的元素 e 时，返回 true。
		containsAll(Collection<?> c):boolean
			如果此 collection 包含指定 collection 中的所有元素，则返回 true。
		equals(Object o):boolean
			比较此 collection 与指定对象是否相等
		hashCode():int
				返回此 collection 的哈希码值
		isEmpty():boolean
			如果此 collection 不包含元素，则返回 true,否则返回false
		iterator():Iterator<E>
			返回在此 collection 的元素上进行迭代的迭代器。关于元素返回的顺序没有任何保证（除非此 collection 是某个能提供保证顺序的类实例）。
		parallelStream():Stream<E>
			获取该集合的并行的流。
		remove(Object o):boolean
			从此 collection 中移除指定元素Object的单个实例,如果操作成功则返回true,操作失败则返回false
		removeAll(Collection<?> c):boolean
			移除此 collection 中那些也包含在指定 collection 中的所有元素。
		removeIf(Predicate<? super E> filter):boolean
			删除集合中符合条件的成员，empty集合也可以，但是null就炸啦。通过指定的过滤器来删除元素。
		retainAll(Collection<?> c):boolean
			仅保留此 collection 中那些也包含在指定 c中的元素。
		size():int   
			返回此 collection 中的元素数量。如果此 collection 包含的元素大于 Integer.MAX_VALUE，则返回 Integer.MAX_VALUE。
		spliterator():Spliterator<E>
			主要支持java8中的流式操作，如排序，过滤等，提供类似jquery的语法。
			Spliterator接口是1.8新加的接口，字面意思可分割的迭代器，不同以往的iterator需要顺序迭代，
			Spliterator可以分割为若干个小的迭代器进行并行操作，既可以实现多线程操作提高效率，又可以避免普通迭代器的fail-fast机制所带来的异常。
			Spliterator可以配合1.8新加的Stream进行并行流的实现，大大提高处理效率。
		stream():Stream<E>
			获取该集合的非并行的流。
			Stream 作为 Java 8 的一大亮点，它与 java.io 包里的 InputStream 和 OutputStream 是完全不同的概念。它也不同于 StAX 对 XML 解析的 Stream，
			也不是 Amazon Kinesis 对大数据实时处理的 Stream。Java 8 中的 Stream 是对集合（Collection）对象功能的增强，它专注于对集合对象进行各种非常便利、
			高效的聚合操作（aggregate operation），或者大批量数据操作 (bulk data operation)。Stream API 借助于同样新出现的 Lambda 表达式，
			极大的提高编程效率和程序可读性。同时它提供串行和并行两种模式进行汇聚操作，并发模式能够充分利用多核处理器的优势，使用 fork/join 并行方式来拆分任务和加速处理过程。
			通常编写并行代码很难而且容易出错, 但使用 Stream API 无需编写一行多线程的代码，就可以很方便地写出高性能的并发程序。
			所以说，Java 8 中首次出现的 java.util.stream 是一个函数式语言+多核时代综合影响的产物。
		toArray():Object[]
			返回包含此 collection 中所有元素的数组。如果 collection 对其迭代器返回的元素顺序做出了某些保证，那么此方法必须以相同的顺序返回这些元素。
		toArray(T[] a):T[]
			返回包含此 collection 中所有元素的数组；返回数组的运行时类型与指定数组的运行时类型相同，也就是说此方法可以指定返回数组中的对象类型
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
	3、List<E>接口：列表
		父接口：Collection<E>, Iterable<E>		
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
		add(int index, E element):void
			在此列表中的指定位置插入指定元素（可选操作）。将当前位于该位置的元素（如果有的话）和任何后续元素移到右边（向它们的索引中添加一个）。
		addAll(int index, Collection<? extends E> c):boolean
			将指定集合中的所有元素插入到指定位置的列表中（可选操作）。将当前位于该位置的元素（如果有的话）和任何后续元素向右移动（增加它们的索引）。
			新元素将以指定集合的迭代器返回的顺序出现在此列表中。如果在操作进行中修改指定的集合，则此操作的行为未定义。（注意，如果指定的集合是这个列表，并且它是非空的，则会发生这种情况。）
			成功插入所有元素后返回true。
		get(int index):E	
			返回列表中指定位置的元素。
		indexOf(Object o):int
			返回此列表中指定元素首次出现的索引位置，如果该列表不包含指定元素，则返回-1。方法的实现机制是从序列(List)的第0个元素开始依次循环，并且调用每个元素的equals()方法和参数对象进行比较，
			如果某一个元素的equals()方法返回值为true，那么就把当前元素的索引位置作为结果返回。假如序列中有多个重复的元素，只返回这个重复的元素第一次出现时所在的索引位置的值。
		lastIndexOf(Object o):int
			返回此列表中指定元素的最后一次出现的索引位置，如果该列表不包含指定元素，则返回-1。也就是它会从序列的队尾向队头进行遍历。
		listIterator():ListIterator<E>
			返回此列表中的元素的列表迭代器（按适当顺序）。
		listIterator(int index):ListIterator<E>
			从列表中的指定位置开始，返回列表中元素的列表迭代器（按适当顺序）。
		remove(int index):E
			删除列表中指定位置的元素（可选操作）。向左移动任何后续元素（从其索引中减去一个）。返回从列表中删除的元素。
		replaceAll(UnaryOperator<E> operator):void
			对每个元素执行operator指定的操作，并用操作结果来替换原来的元素。其中UnaryOperator是一个函数接口，里面只有一个待实现函数T apply(T t)。
			例如：假设有一个字符串列表，将其中所有长度大于3的元素转换成大写，其余元素不变。
		set(int index, E element):E
			用指定的元素替换列表中指定位置的元素（可选操作）。
		sort(Comparator<? super E> c):void
			根据c指定的比较规则（比较器）对容器元素进行排序。
		subList(int fromIndex, int toIndex):List<E>
			返回list中指定下标范围的元素组成的list新列表,左闭右开(包括fromIndex元素,不包括toIndex)。
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
	4、Queue<E>接口：队列，是一种特殊的线性表，它只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作。进行插入操作的端称为队尾，进行删除操作的端称为队头。
				       队列中没有元素时，称为空队列。在队列这种数据结构中，按照元素出入顺序，最先插入的元素将是最先被删除的元素；反之最后插入的元素将是最后被删除的元素，
				       称为“先进先出”（FIFO—first in first out）。 
		父接口：Collection<E>, Iterable<E>
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
		element():E
			在队列的头部查询并返回元素。如果队列为空时，抛出一个异常。
		offer(E e):boolean
			在队列头部添加元素，成功返回true，否则返回false。注意与：一些队列有大小限制，因此如果想在一个满的队列中加入一个新项，多出的项就会被拒绝。这时新的 offer 方法就可以起作用了。它不是对调用 add() 方法抛出一个 unchecked 异常，而只是得到由 offer() 返回的 false。 
		peek():E
			在队列的头部查询并返回元素。如果队列为空时，返回null。
		poll():E
			从队列中删除第一个元素。注意remove() 和 poll() 方法都是从队列中删除第一个元素。remove() 的行为与 Collection 接口的版本相似，但是新的 poll() 方法在用空集合调用时不是抛出异常，只是返回 null。因此新的方法更适合容易出现异常条件的情况。
		remove():E	
			从队列中删除第一个元素。
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
	5、Deque<E>接口：双端队列，是一个线性collection,支持在两端插入和移除元素。（名称deque是"double ended queue" 双端队列）。接口既支持有容量限制的双端队列，也支持没有固定大小限制的双端队列。
				      接口定义在双端队列访问元素的方法，提供插入、移除、检查元素的方法。每种方法都存在两种形式：一种形式在操作失败时抛出异常;另一种形式返回一个特殊值（null或false）。
		父接口：Queue<E>,Collection<E>, Iterable<E>
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
		addFirst(E e):void 
			将指定元素插入此双端队列的开头。
		addLast(E e):void 
			将指定元素插入此双端队列的末尾。
		getFirst():E 
			获取，但不移除此双端队列的第一个元素。
		getLast():E 
			获取，但不移除此双端队列的最后一个元素。
		offerFirst(E e):boolean
			将指定的元素插入此双端队列的开头，成功返回true，否则返回false。
		offerLast(E e):boolean 
			将指定的元素插入此双端队列的末尾。成功返回true，否则返回false。
		peekFirst():E 
			获取，但不移除此双端队列的第一个元素。
		peekLast():E 
			获取，但不移除此双端队列的最后一个元素。
		pollFirst():E 
			获取并移除此双端队列的第一个元素；如果此双端队列为空，则返回 null
		pollLast():E 
			获取并移除此双端队列的最后一个元素；如果此双端队列为空，则返回 null
		pop():E 
			从此双端队列所表示的堆栈中弹出一个元素。
		push(E e):void 
			将一个元素推入此双端队列所表示的堆栈。
		removeFirst():E 
			获取并移除此双端队列第一个元素。			
		removeLast():E 
			获取并移除此双端队列的最后一个元素。
		removeFirstOccurrence(Object o):boolean
			从此双端队列移除第一次出现的指定元素。
		removeLastOccurrence(Object o):boolean 
			从此双端队列移除最后一次出现的指定元素。
		descendingIterator():Iterator<E> 
			返回以逆向顺序在此双端队列的元素上进行迭代的迭代器。
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
	6、Set<E>接口：集合，Set是一个不能含有重复元素的collection，更准确的说其不能有重复元素，同时最多只能有一个空的元素。
		父接口：Collection<E>, Iterable<E>
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
	7、SortedSet<E>接口：提供对其元素的进行排序的集合。保证迭代器按照元素递增顺序遍历的集合，可以按照元素的自然顺序（参见 Comparable）进行排序，
					或者按照创建有序集合时提供的 Comparator进行排序。要采用此排序，还要提供一些其他操作（此接口是 SortedMap 的集合对应物）。 
					插入有序集合的所有元素都必须实现 Comparable 接口（或者被指定的 Comparator 所接受）。另外，所有这些元素都必须是可相互比较的：
					e1.compareTo(e2)（或 comparator.compare(e1, e2)）对于有序集合中的任意元素 e1 和 e2 都不能抛出 ClassCastException。
					试图违反这些限制将导致违反规则的方法或者构造方法调用抛出 ClassCastException。
		父接口：Set<E>,Collection<E>, Iterable<E>		
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
		comparator():Comparator<? super E>
			返回用于对集合中的元素进行排序的比较器。
		first():E 
			返回该集合中当前第一个（最低）元素。
		last():E 
			返回当前集合中最后一个元素。
		headSet(E toElement):SortedSet<E> 
			返回从开始到指定元素范围的新集合。		
		tailSet(E fromElement):SortedSet<E> 
			返回从指定元素到最后范围之间的所有元素的新集合。
		subSet(E fromElement, E toElement):SortedSet<E> 
			返回从指定fromElement到toElement范围之间所有元素的新集合（不包含toElement元素）。	
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
	8、NavigableSet<E>接口：导航集合。该接口扩展了 SortedSet，具有了为给定搜索目标报告最接近匹配项的导航方法。方法 lower、floor、ceiling 和 higher 分别返回小于、小于等于、大于等于、大于给定元素的元素，如果不存在这样的元素，则返回 null。
		父接口：SortedSet<E>,Set<E>,Collection<E>, Iterable<E>
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
		ceiling(E e):E
			返回此 集合中大于等于给定元素的最小元素；如果不存在这样的元素，则返回 null。
		descendingIterator():Iterator<E> 
			 以降序返回在此集合的元素上进行迭代的迭代器。
		descendingSet():NavigableSet<E> 
			返回此 集合中所包含元素的逆序元素视图。
		floor(E e):E 
			 返回此集合中小于等于给定元素的最大元素；如果不存在这样的元素，则返回 null。
		headSet(E toElement, boolean inclusive):NavigableSet<E> 
			 返回此集合的部分元素视图，其元素小于（或等于，如果 inclusive 为 true）toElement。
		higher(E e):E 
			返回此集合中严格大于给定元素的最小元素；如果不存在这样的元素，则返回 null。
		lower(E e):E 
			返回此集合中严格小于给定元素的最大元素；如果不存在这样的元素，则返回 null。
		pollFirst():E 
			获取并移除第一个（最低）元素；如果此集合为空，则返回 null。
		pollLast():E 
			获取并移除最后一个（最高）元素；如果此 集合为空，则返回 null。
		subSet(E fromElement, boolean fromInclusive,E toElement,  boolean toInclusive):NavigableSet<E> 
			返回此集合的部分元素视图，其元素范围从 fromElement 到 toElement。注意，布尔值表示是否包含边界元素。
		tailSet(E fromElement, boolean inclusive):NavigableSet<E> 		
			 返回此 set 的部分元素视图，其元素大于（或等于，如果 inclusive 为 true）fromElement。				
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
	9、Map<K,V>接口：映射。将键映射到值的对象。Map不能包含重复的键；每个键最多可以映射到一个值。这个接口代替了Dictionary类，它是一个完全抽象的类，而不是一个接口。
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
		clear():void 
			从此映射中删除所有映射（可选操作）。
		compute(K key,BiFunction<? super K, ? super V, ? extends V> remappingFunction):default V 
			通过BiFunction类型的函数接口remappingFunction，计算指定key的V值得到新值。如果新值非空则则调用put(key, newValue)保存映射并返回。如果计算结果为空且key存在则调用remove(key)删除该key的映射并返回null。该函数式接口实现需在调用时由调用者实现。
		computeIfAbsent(K key,Function<? super K, ? extends V> mappingFunction):default V 
			如果key的映射值为空，则通过函数接口mappingFunction计算指定key的映射值，计算结果非空则保存映射值并返回，如果计算结果为空则返回旧的映射值。该函数式接口实现需在调用时由调用者实现。
		computeIfPresent(K key,BiFunction<? super K, ? super V, ? extends V> remappingFunction):default V 
			如果key的映射值非空，则通过函数接口mappingFunction计算指定key的映射值，计算结果非空则调用put(key, newValue)保存映射，计算结果为空则调用remove(key)删除此key映射并返回null。该函数式接口实现需在调用时由调用者实现。
		containsKey(Object key):boolean 
			如果Map包含指定键的映射，则返回true。
		containsValue(Object value):boolean 
			如果Map将一个或多个键映射到指定值，则返回true。
		entrySet():Set<Map.Entry<K, V>> 
			返回Map中包含的映射的Set视图。			
		equals(Object o):boolean 
			将指定对象与Map进行等同性比较。
		forEach(BiConsumer<? super K, ? super V> action):default void 
			对Map中的每个条目执行给定操作(执行函数式接口中的方法)，直到处理完所有条目或该操作引发异常。该函数式接口实现需在调用时由调用者实现。
		get(Object key):V 
			返回指定键被映射到的值，如果Map不包含键的映射，则返回null。
		getOrDefault(Object key, V defaultValue):default V 
			返回指定键映射到的值，或者如果Map不包含键的映射，则返回默认值defaultValue。
		hashCode():int 
			返回此Map的哈希代码值。
		isEmpty():boolean 
			如果Map为空（不包含任何key-value映射）
		keySet():Set<K> 
			返回一个包含Map所有key对象的集合。
		merge(K key, V value,BiFunction<? super V, ? super V, ? extends V> remappingFunction):default V 
			如果指定的键尚未与值相关联或与null相关联，则将其与给定的非null值相关联。（如果key对应的旧值不为空，则将给定的value与旧值传入函数接口方法进行处理得出新值，如果新值非空映射新值，如果新值为空则删除该映射）。
		put(K key, V value):V 
			将指定值与Map中指定键关联（即添加映射）。
		putAll(Map<? extends K, ? extends V> m):void 
			将指定的映射对象m中的所有key-value映射复制到此Map中。
		putIfAbsent(K key, V value):default V 
			如果指定的键尚未与值关联（或映射为null），则将其与给定值关联并返回null，否则返回旧值。
		remove(Object key):V 
			如果存在指定键的映射，则从该映射中删除该键的映射。
		remove(Object key, Object value):default boolean 
			如果指定key对应的值与value相等，则删除Map中指定的映射，并返回true，否则不删除并返回false。
		replace(K key, V value):default V 
			仅当指定键key当前映射到某个值时，才替换该条目。
		replace(K key, V oldValue, V newValue):default boolean 
			只有在当前映射到指定值(oldValue)时才替换指定键的条目(newValue)。
		replaceAll(BiFunction<? super K, ? super V, ? extends V> function):default void 
			将每个条目的值替换为在该条目上调用给定函数的结果，直到处理完所有条目或函数抛出异常。
		size():int 
			返回此映射中的键值映射的数量。
		values():Collection<V> 
			返回此Map中包含的所有V值的Collection视图。			
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
	10、Map$Entry<K,V>接口：它是Map的一个内部接口。Map的entrySet()方法返回一个实现Map.Entry接口的对象集合。集合中每个对象都是底层Map中一个特定的键/值对。通过这个集合的迭代器，您可以获得每一个条目(唯一获取方式)的键或值并对值进行更改。当条目通过迭代器返回后，除非是迭代器自身的remove()方法或者迭代器返回的条目的setValue()方法，其余对源Map外部的修改都会导致此条目集变得无效，同时产生条目行为未定义。因为Map这个类没有继承Iterable接口所以不能直接通过map.iterator来遍历(list，set就是实现了这个接口，所以可以直接这样遍历),所以就只能先转化为set类型，用entrySet()方法，其中set中的每一个元素值就是map中的一个键值对，也就是Map.Entry<K,V>了，然后就可以遍历了。基本上 就是遍历map的时候才用得着它吧。
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
		comparingByKey():static <K extends Comparable<? super K>, V> Comparator<Map.Entry<K,V>> 
			静态方法，返回一个比较器，该比较器比较Map.Entry在键上的自然顺序。
		comparingByKey(Comparator<? super K> cmp):static <K, V> Comparator<Map.Entry<K, V>> 
			静态方法，返回一个比较器，该比较器使用给定的比较器按键比较Map.Entry。
		comparingByValue():static <K, V extends Comparable<? super V>> Comparator<Map.Entry<K,V>>
			静态方法，返回一个比较器，该比较器按值的自然顺序比较Map.Entry。
		comparingByValue(Comparator<? super V> cmp):static <K, V> Comparator<Map.Entry<K, V>>
			静态方法，返回一个比较器，该比较器使用给定的比较器按值比较Map.Entry。
		equals(Object o):boolean
			将指定对象与此条目进行相等性比较。
		getKey():K 
			返回与此条目对应的键。
		getValue():V 
			返回与此条目对应的值。
		hashCode():int 
			返回此映射项的哈希代码值。
		setValue(V value):V 
			用指定值替换与此条目对应的值。
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
	11、SortedMap<K,V>接口：它是一种提供对键进行总排序的Map。映射是根据其键的自然顺序进行排序的，或者在SortedMap创建时提供比较器（Comparator)。
			在对SortedMap的集合视图(由entrySet、keySet和values方法返回)进行迭代时，会反映这个顺序。插入到SortedMap的所有键必须实现Comparable接口（或者接受指定的比较器）。
			此外，所有这些键必须是相互可比较的（可以进行下面语句操作）：
				 k1.compareTo(k2) 	或者   comparator.compare(k1, k2)
			在SortedMap中不能抛出ClassCastException异常。如果违反此限制将导致在方法或构造函数调用时抛出令人厌恶的ClassCastException异常。
			
		父接口：Map<K,V>
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
		comparator():Comparator<? super K> 
			返回用于对该映射中的键进行排序的比较器，如果该映射使用其键的自然排序，则返null。		
		firstKey():K 
			返回该映射中当前第一个（最低）键。
		headMap(K toKey):SortedMap<K,V> 
			返回此映射的键严格小于toKey的部分视图。	
		lastKey():K 
			返回此映射中当前最后一个（最高）键。
		subMap(K fromKey, K toKey):SortedMap<K,V> 
			返回此映射的键范围从包含fromKey到toKey的部分视图（不包含toKey）。
		tailMap(K fromKey):SortedMap<K,V> 
			返回此映射的键大于或等于fromKey的部分视图。	
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
	12、NavigableMap<K,V>接口：NavigableMap扩展了 SortedMap，因此它也是一种基于对键进行排序的Map。并且具有了针对给定搜索目标返回最接近匹配项的导航方法。方法 lowerEntry、floorEntry、ceilingEntry
			和 higherEntry 分别返回与小于、小于等于、大于等于、大于给定键的键关联的 Map.Entry 对象，如果不存在这样的键，则返回 null。
			类似地，方法 lowerKey、floorKey、ceilingKey 和 higherKey 只返回关联的键。所有这些方法是为查找条目而不是遍历条目而设计的。
			可以按照键的升序或降序访问和遍历 NavigableMap。descendingMap 方法返回映射的一个视图，该视图表示的所有关系方法和方向方法都是逆向的。
			升序操作和视图的性能很可能比降序操作和视图的性能要好。subMap、headMap 和 tailMap 方法与名称相似的 SortedMap 方法的不同之处在于：
			可以接受用于描述是否包括（或不包括）下边界和上边界的附加参数。任何 NavigableMap 的 Submap 必须实现 NavigableMap 接口。
			此接口还定义了 firstEntry、pollFirstEntry、lastEntry 和 pollLastEntry 方法，它们返回和/或移除最小和最大的映射关系（如果存在），否则返回 null。
			subMap(K, K)、headMap(K) 和 tailMap(K) 方法被指定为返回 SortedMap，以允许现有 SortedMap 实现能相容地改进为实现 NavigableMap，但鼓励此接口的扩展和实现重写这些方法以返回 NavigableMap。类似地，可以重写 SortedMap.keySet() 以返回 NavigableSet。

		父接口：SortedMap<K,V>,Map<K,V>
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
		ceilingEntry(K key):Map.Entry<K,V> 
			返回一个键-值映射关系，它与大于等于给定键的最小键关联；如果不存在这样的键，则返回 null。
		ceilingKey(K key):K 
			返回大于等于给定键的最小键；如果不存在这样的键，则返回 null。
		descendingKeySet():NavigableSet<K> 
			返回此映射中所包含键的逆序 NavigableSet 视图。
		descendingMap():NavigableMap<K,V> 
			返回此映射中所包含映射关系的逆序视图。
		firstEntry():Map.Entry<K,V> 
			返回一个与此映射中的最小键关联的键-值映射关系(Entry)；如果映射(Map)为空，则返回 null。
		floorEntry(K key):Map.Entry<K,V> 
			返回一个键-值映射关系(Entry)，它与小于等于给定键的最大键关联；如果不存在这样的键，则返回 null。
		floorKey(K key):K 
			返回小于等于给定键的最大键；如果不存在这样的键，则返回 null。
		headMap(K toKey, boolean inclusive):NavigableMap<K,V> 
			返回此映射的部分视图，其键小于（或等于，如果 inclusive 为 true）toKey。
		higherEntry(K key):Map.Entry<K,V> 
			返回一个键-值映射关系，它与严格大于给定键的最小键关联；如果不存在这样的键，则返回 null。	
		higherKey(K key):K 
			返回严格大于给定键的最小键；如果不存在这样的键，则返回 null。
		lastEntry():Map.Entry<K,V> 
			返回与此映射中的最大键关联的键-值映射关系；如果映射为空，则返回 null。
		lowerEntry(K key):Map.Entry<K,V> 
			 返回一个键-值映射关系，它与严格小于给定键的最大键关联；如果不存在这样的键，则返回 null。
		lowerKey(K key):K 
			返回严格小于给定键的最大键；如果不存在这样的键，则返回 null。
		navigableKeySet():NavigableSet<K> 
			返回此映射中所包含键的 NavigableSet 视图。
		pollFirstEntry():Map.Entry<K,V> 
			 移除并返回与此映射中的最小键关联的键-值映射关系(Entry)；如果映射为空，则返回 null。
		pollLastEntry():Map.Entry<K,V> 
			移除并返回与此映射中的最大键关联的键-值映射关系；如果映射为空，则返回 null。
		subMap(K fromKey, boolean fromInclusive,K toKey, boolean toInclusive):NavigableMap<K,V> 
			 返回此映射的部分视图，其键的范围从 fromKey 到 toKey。（注意：fromInclusive表示是否包含fromKey这个边界；toInclusive表示是否包含toKey这个边界）
		tailMap(K fromKey, boolean inclusive):NavigableMap<K,V> 
			返回此映射的部分视图，其键大于（或等于，如果 inclusive 为 true）fromKey。				
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
	13、Iterator<E>接口：迭代器。用来迭代collection容器中元素的迭代器。	
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------	
		forEachRemaining(Consumer<? super E> action):default void 
			对剩余的每个元素执行给定的操作，直到所有元素都被处理或操作引发异常为止。
		hasNext():boolean 
			如果迭代器包含更多元素，则返回true。
		next():E 
			返回迭代器中的下一个元素。
		remove():default void 
			从集合中移除此迭代器返回的最后一个元素（即将迭代器最新返回的元素删除并继续迭代）。使用迭代器 的 remove() 方法后，迭代器删除了当前读取的元素 “b”，并且继续往下遍历元素，达到了在删除元素时不破坏遍历的目的。
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
	14、ListIterator<E>接口：列表迭代器。它允许程序员沿任一方向遍历列表，在迭代期间修改列表，并获取迭代器在列表中的当前位置。ListIterator没有当前元素；
			其光标位置始终位于调用previous（）将返回的元素和将返回的元素之间。
					
		父接口：Iterator<E>
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
		add(E e):void 
			将指定的元素插入列表。
		hasPrevious():boolean 
			如果列表迭代器在反向遍历列表时包含更多元素，则返回true。
		nextIndex():int 
			返回列表中ListIterator所在位置后面元素的索引
		previous():E 
			返回列表中的前一个元素，并向后移动光标位置。
		previousIndex():int 
			返回列表中ListIterator所在位置的前一个元素索引，该索引将由对Previous（）的后续调用返回。
		set(E e):void 
			将next（）或previous（）返回的最后一个元素替换为指定的元素。
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
	15、Spliterator<T>接口：可分割迭代器。不同以往的iterator需要顺序迭代，Spliterator可以分割为若干个小的迭代器进行并行操作，
			既可以实现多线程操作提高效率，又可以避免普通迭代器的fail-fast机制所带来的异常。Spliterator可以配合1.8新加的Stream进行并行流的实现，大大提高处理效率。。
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
	属性：通过characteristics（）方法返回的值，用来标识实现类所具有的的特征
		public static final int ORDERED    = 0x00000010;//表示元素是有序的（每一次遍历结果相同）
		public static final int DISTINCT   = 0x00000001;//表示元素不重复
		public static final int SORTED     = 0x00000004;//表示元素是按一定规律进行排列（有指定比较器）
		public static final int SIZED      = 0x00000040;//是否确定大小
		public static final int NONNULL    = 0x00000100;//表示迭代器中没有null元素
		public static final int IMMUTABLE  = 0x00000400;//表示元素不可变
		public static final int CONCURRENT = 0x00001000;//表示迭代器可以多线程操作
		public static final int SUBSIZED   = 0x00004000;//表示子Spliterators都具有SIZED特性
	方法：
		characteristics():int 
			返回Spliterator对象的一组特征值(指的是上面的属性值)。一般实现类中的属性就是几个属性进行或（||）操作之后的结果。
		estimateSize():long 
			返回一个预估的值，等于执行forEachRemaining方法时调用tryAdvance的次数。	如果这个值过大，或者需要太复杂的计算过程，那么直接回返回long型的最大值
		forEachRemaining(Consumer<? super T> action):default void 
			对Spliterator的每一个对象执行tryAdvance操作
		getComparator():default Comparator<? super T> 
			如果Spliterator的具体实现具有SORTED属性，那么此方法会返回一个相应的比较器，否则会返回null
		getExactSizeIfKnown():default long 
			返回Spliterator对象确切的大小，如果存在SIZED属性，则返回estimateSize()方法的返回值，否则返回-1
		hasCharacteristics(int characteristics):default boolean 
			根据characteristics()与参数相与的结果看Spliterator对象是否包含参数指定的属性
		tryAdvance(Consumer<? super T> action):boolean 
			如果有剩余的元素存在，执行参数给定的操作，并返回true，否则就返回false。 如果Spliterator对象具有ORDERED属性，那么tryAdvance也会按照相应的顺序去执行。
		trySplit():Spliterator<T> 
			如果这个Spliterator是可以被分割的，那么这个方法会返回一个Spliterator，与原来的Spliterator平分其中的元素，如果原Spliterator的元素个数单数，
			两个Spliterator的元素个数相差1，基本是相同的。如果Spliterator不能再分割，那么会返回null	
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
	16、OfPrimitive<T, T_CONS, T_SPLITR extends Spliterator.OfPrimitive<T, T_CONS, T_SPLITR>>接口：
			它是Spliterator<T>接口的一个内部接口，并且扩展于Spliterator<T>接口。与Spliterator几乎无差别，只是将trySplit，tryAdvance，forEachRemaining三个方法中的参数类型做了一点小小的变化，更加适合基本参数类型。
		泛型参数说明：
			
		父接口：Spliterator<T>
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
		forEachRemaining(T_CONS action):default void 
			对剩余的每个元素执行给定的操作，在当前线程中按顺序执行，直到处理完所有元素或操作引发异常为止。
		tryAdvance(T_CONS action):boolean 
			如果存在剩余的元素，则对其执行给定的操作，返回true；否则返回false。
		trySplit():T_SPLITR 
			如果可以对该spliterator进行分区，则返回一个包含元素的spliterator，从该方法返回时，不覆盖原spliterator 。
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
	17、Spliterator$OfDouble接口：它是Spliterator<T>接口的一个内部接口，扩展于OfPrimitive<Double, DoubleConsumer, OfDouble>。
			专门用于Double类型的的Spliterator。
	
		父接口：Spliterator.OfPrimitive<Double,DoubleConsumer,Spliterator.OfDouble>,Spliterator<Double>		
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
		forEachRemaining(Consumer<? super Double> action):default void 
			对剩余的每个元素执行给定的操作，在当前线程中按顺序执行，直到处理完所有元素或操作引发异常为止。
		forEachRemaining(DoubleConsumer action):default void 
			对剩余的每个元素执行给定的操作，在当前线程中按顺序执行，直到处理完所有元素或操作引发异常为止。
		tryAdvance(Consumer<? super Double> action):default boolean 
			如果存在剩余的元素，则对其执行给定的操作，返回true；否则返回false。
		tryAdvance(DoubleConsumer action):boolean 
			如果存在剩余的元素，则对其执行给定的操作，返回true；否则返回false。
		trySplit():OfDouble
			如果可以对该spliterator进行分区，则返回一个包含元素的spliterator，从该方法返回时，不覆盖原spliterator 。
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
	18、Spliterator$OfInt接口：它是Spliterator<T>接口的一个内部接口，扩展于OfPrimitive<Integer, IntConsumer, OfInt>。
			专门用于int值的Spliterator。
	
		父接口：Spliterator.OfPrimitive<Integer,IntConsumer,Spliterator.OfInt>,Spliterator<Integer>	
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
		forEachRemaining(Consumer<? super Integer> action):default void 
			对剩余的每个元素执行给定的操作，在当前线程中按顺序执行，直到处理完所有元素或操作引发异常为止。
		forEachRemaining(IntConsumer action):default void 
			对剩余的每个元素执行给定的操作，在当前线程中按顺序执行，直到处理完所有元素或操作引发异常为止。
		tryAdvance(Consumer<? super Integer> action):default boolean 
			如果存在剩余的元素，则对其执行给定的操作，返回true；否则返回false。
		tryAdvance(IntConsumer action):boolean 
			如果存在剩余的元素，则对其执行给定的操作，返回true；否则返回false。
		trySplit():OfInt 
			如果可以对该spliterator进行分区，则返回一个包含元素的spliterator，从该方法返回时，不覆盖原spliterator 。
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	19、Spliterator$OfLong接口：它是Spliterator<T>接口的一个内部接口，扩展于PrimitiveIterator<Long,LongConsumer>
			专门用于Long值的Spliterator。
		
		父接口：Spliterator.OfPrimitive<Long,LongConsumer,Spliterator.OfLong>,Spliterator<Long>
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
		forEachRemaining(Consumer<? super Long> action):default void 
			对剩余的每个元素执行给定的操作，在当前线程中按顺序执行，直到处理完所有元素或操作引发异常为止。
		forEachRemaining(LongConsumer action):default void 
			对剩余的每个元素执行给定的操作，在当前线程中按顺序执行，直到处理完所有元素或操作引发异常为止。
		tryAdvance(Consumer<? super Long> action):default boolean 
			如果存在剩余的元素，则对其执行给定的操作，返回true；否则返回false。
		tryAdvance(LongConsumer action):boolean 
			如果存在剩余的元素，则对其执行给定的操作，返回true；否则返回false。
		trySplit():OfLong 
			如果可以对该spliterator进行分区，则返回一个包含元素的spliterator，从该方法返回时，不覆盖原spliterator 。
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	20、PrimitiveIterator<T, T_CONS>接口：原始迭代器。为int、long和double值提供了专门的子类型。			
		
		父接口：Iterator<T>	
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------	
		forEachRemaining(T_CONS action):void 
			对剩余的每个元素执行给定的操作，按元素在迭代时发生的顺序执行，直到所有元素都被处理或操作引发异常为止。
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	21、PrimitiveIterator$OfDouble接口：专门针对Double类型的迭代器
		
		父接口：PrimitiveIterator<Double,DoubleConsumer>,Iterator<Double>		
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------	
		forEachRemaining(Consumer<? super Double> action):default void 
			对剩余的每个元素执行给定的操作，直到所有元素都被处理或操作引发异常为止。
		forEachRemaining(DoubleConsumer action):default void 
			对剩余的每个元素执行给定的操作，直到所有元素都被处理或操作引发异常为止。
		next():default Double 
			返回迭代中的下一个元素。
		nextDouble():double 
			返回迭代中的下一个double元素。
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
	22、PrimitiveIterator$OfInt接口：专门针对int类型的迭代器
		
		父接口：PrimitiveIterator<Integer,IntConsumer>,Iterator<Integer>		
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------	
		forEachRemaining(Consumer<? super Integer> action):default void 
			对剩余的每个元素执行给定的操作，直到所有元素都被处理或操作引发异常为止。
		forEachRemaining(IntConsumer action):default void 
			对剩余的每个元素执行给定的操作，直到所有元素都被处理或操作引发异常为止。
		next():default Integer 
			返回迭代中的下一个元素。
		nextDouble():int
			返回迭代中的下一个int元素。
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
	23、PrimitiveIterator$OfLong接口：专门针对long类型的迭代器
		
		父接口：PrimitiveIterator<Long,LongConsumer>,Iterator<Long>	
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------	
		forEachRemaining(Consumer<? super Long> action):default void 
			对剩余的每个元素执行给定的操作，直到所有元素都被处理或操作引发异常为止。
		forEachRemaining(LongConsumer action):default void 
			对剩余的每个元素执行给定的操作，直到所有元素都被处理或操作引发异常为止。
		next():default Long 
			返回迭代中的下一个元素。
		nextDouble():long
			返回迭代中的下一个long元素。
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
	24、Enumeration<E>接口：枚举接口。实现枚举接口的对象生成一系列元素，一次一个。对NextElement方法的连续调用返回序列的连续元素。目前已被迭代器Iterator<E>淘汰
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------	
		hasMoreElements():boolean 
			测试此枚举是否包含更多元素。
		nextElement():E 
			如果此枚举对象至少还要提供一个元素，则返回此枚举的下一个元素。
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
	26、Comparable<T>接口：可比较接口。这个接口对实现它的每个类的对象施加了一个总的顺序。这种排序称为类的自然排序，类的CompareTo方法称为类的自然比较方法。
			实现此接口的对象列表（和数组）可以按collections.sort（和array.sort）自动排序。实现此接口的对象可以用作sorted map中的键或sorted set中的元素，而无需指定比较器。
	
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
		compareTo(T o):int 
			将此对象与指定的顺序对象进行比较。返回负整数、零或正整数，因为当前对象小于、等于或大于指定对象。
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	
	27、Comparator<T>接口：比较器，用于排序、分组。比较器可以传递给排序方法，（例如collections.sort或array.sort）允许对排序顺序进行精确控制。比较器还可用于控制某些数据结构（如sorted sets或sorted maps）的顺序。或者为没有自然排序的对象集合提供排序。
	
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
		comparing(Function<? super T, ? extends U> keyExtractor):static <T, U extends Comparable<? super U>> Comparator<T> 
			接受一个函数，该函数从类型T中提取一个可比较的排序键，并返回一个通过该排序键进行比较的比较器。
		comparing(Function<? super T, ? extends U> keyExtractor,Comparator<? super U> keyComparator):static <T, U> Comparator<T>
			接受从类型T中提取排序键的函数，并返回使用指定的比较器与该排序键进行比较的比较器。 
		comparingDouble(ToDoubleFunction<? super T> keyExtractor):static<T> Comparator<T> 
			接受一个函数，该函数从类型T中提取一个Double排序键，并返回一个比较器，该比较器通过该排序键进行比较。
		comparingInt(ToIntFunction<? super T> keyExtractor):static <T> Comparator<T> 
			接受一个函数，该函数从类型T中提取int排序键，并返回一个比较器，该比较器通过该排序键进行比较。
		comparingLong(ToLongFunction<? super T> keyExtractor):static <T> Comparator<T> 
			接受一个函数，该函数从类型T中提取一个long排序键，并返回一个比较器，该比较器通过该排序键进行比较。
		naturalOrder():static <T extends Comparable<? super T>> Comparator<T> 
			返回按自然顺序比较Comparable对象的比较器。
		nullsFirst(Comparator<? super T> comparator):static <T> Comparator<T> 
			返回一个null-friendly(空友好)比较器，该比较器将空（null）视为小于非空(non-null)。
		nullsLast(Comparator<? super T> comparator):static <T> Comparator<T> 
			返回一个null-friendly(空友好)比较器，该比较器认为空（null）大于非空（non-null）。
		reverseOrder():static <T extends Comparable<? super T>> Comparator<T> 
			返回一个与自然顺序相反的比较器。
		compare(T o1, T o2):int 
			比较其顺序的两个参数。
		equals(Object obj):boolean 
			指定的对象是否“等于”此比较器。
		reversed():default Comparator<T> 
			返回一个比较器，强制执行此比较器的反向顺序。
		thenComparing(Comparator<? super T> other):default Comparator<T> 
			用指定的比较器返回一个lexicographic-order（词典编纂顺序）比较器。
		thenComparing(Function<? super T, ? extends U> keyExtractor):default <U extends Comparable<? super U>> Comparator<T> 
			返回具有提取可比较排序键的函数的lexicographic-order比较器。
		thenComparing(Function<? super T, ? extends U> keyExtractor,Comparator<? super U> keyComparator):default <U> Comparator<T> 
			返回一个lexicographic-order比较器，该比较器具有提取要与给定比较器进行比较的键的函数。
		thenComparingDouble(ToDoubleFunction<? super T> keyExtractor):default Comparator<T> 
			返回具有提取Double排序键的函数的lexicographic-order顺单词顺序比较器。
		thenComparingInt(ToIntFunction<? super T> keyExtractor):default Comparator<T>
			返回具有提取int排序键的函数的lexicographic-order单词顺序比较器。
		thenComparingLong(ToLongFunction<? super T> keyExtractor):default Comparator<T> 
			返回具有提取Long排序键的函数的lexicographic-order单词顺序比较器。			
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------	
		
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	