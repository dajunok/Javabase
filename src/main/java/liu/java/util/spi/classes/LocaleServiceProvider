----------------------------------------LocaleServiceProvider--------------------------------------------------------------------------------------------------------------
LocaleServiceProvider：加载服务提供器。	【Since:1.6】
	这是所有区域设置（locale）敏感的服务提供器接口（SPI）的超级类。
	区域设置（locale）敏感服务提供器接口是对应于java.text和java.util包中区分区域设置的类的接口。这些接口支持构造区域设置敏感对象和检索这些包的本地化名称。java.text和java.util包中用于区域敏感工厂方法和名称检索方法使用提供器接口的实现，以支持超出Java运行时环境本身支持的区域设置的区域设置。
	区域设置服务提供器实现的打包：
		使用Java扩展机制将这些区域敏感服务的实现打包为已安装的扩展。提供器使用资源目录META-INF/services中的提供器配置文件标识自己，使用完全限定的提供器接口类名作为文件名。该文件应该包含一个完全限定的具体提供器类名列表，每行一个。一行以换行符（“\n”）、回车符（“\r”）或紧跟换行符的回车符中的任何一个结尾。忽略每个名称周围的空格和制表符以及空行。注释字符为 '#' ('#')，每行第一个注释字符后的所有字符都将被忽略。文件必须以UTF-8编码。
		如果某个特定的具体提供器类在多个配置文件中命名，或者在同一个配置文件中多次命名，则重复的类将被忽略。命名特定提供器的配置文件不需要与提供器本身位于同一JAR文件或其他分发单元中。提供器必须可以从最初查询以定位配置文件的同一类加载器访问；这不一定是加载该文件的类加载器。
		例如，DateFormatProvider类的实现应采用包含该文件的JAR文件的形式：
			META-INF/services/java.text.spi.DateFormatProvider
		文件java.text.spi.DateFormatProvider应该有一行，例如：
			com.foo.DateFormatProviderImpl
		它是实现日期格式提供器的类的完全限定类名。		
	调用区域设置敏感服务：
		当需要支持请求的区域设置时，java.text和java.util包中用于区分区域设置的工厂方法和名称检索的方法会调用服务提供器方法。这些方法首先检查Java运行时环境本身是否支持请求的区域设置，并在可用时使用它的支持。否则，它们会调用已安装的提供器的isSupportedLocale方法来查找支持请求的区域设置的接口。如果找到这样的提供器，则调用它的其他方法以获取请求的对象或名称。检查区域设置是否受支持时，默认情况下将忽略该区域设置的扩展名。（如果还应检查区域扩展，则必须重写isSupportedLocale方法。）如果Java运行时环境本身或已安装的提供器都不支持所请求的区域设置，则该方法将遍历候选区域，并重复对每个可用性检查，直到找到匹配为止。用于创建候选区域设置列表的算法与ResourceBundle在默认情况下使用的算法相同（有关详细信息，请参阅getCandidateLocales）。即使从候选列表中解析了区域设置，返回请求对象或名称的方法也会使用原始请求的区域设置（包括区域设置扩展）进行调用。Java运行时环境必须支持所有区域敏感服务的根区域设置，以保证此过程终止。
		名称的提供器（而不是其他对象的提供器）允许对某些名称请求返回null，即使对于它们声称支持的区域设置，也可以通过将其包含在getAvailableLocales的返回值中来返回null。类似地，Java运行时环境本身可能没有其支持的所有区域设置的所有名称。这是因为请求名称的对象集可能很大，并且随时间变化，因此完全覆盖它们并不总是可行的。如果Java运行时环境或提供器返回null而不是名称，那么查找将如上所述继续进行，就好像不支持区域设置一样。
		从JDK8开始，区域敏感服务的搜索顺序可以使用"java.locale.providers"系统属性来配置。此系统属性声明用户查找用逗号分隔的区域设置敏感服务的首选顺序。它只在Java运行时启动时读取，所以以后调用System.setProperty()不会影响排序。
		例如，如果在属性中指定了以下内容：
			java.locale.providers=SPI,JRE
		其中“SPI”表示在安装的SPI提供器中实现的区域敏感服务，“JRE”表示Java运行时环境中的区域敏感服务，首先查找SPI提供器中的区域敏感服务。
		还有另外两个可能对区域设置敏感的服务提供器，即“CLDR”（基于Unicode联合体的CLDR项目的提供器）和“HOST”（反映用户在底层操作系统中的自定义设置的提供器）。这两个提供器可能不可用，这取决于Java运行时环境的实现。指定"JRE,SPI"与默认行为相同，后者与先前版本兼容。
	
	
	类定义	：public abstract class LocaleServiceProvider
------------------------------------------------------------------------------------------------------------------------------------------------------
Constructor Summary（构造器概要）：
	protected LocaleServiceProvider()
		唯一构造器。（对于子类构造函数的调用，通常是隐式的。）

Method Summary（方法概要）：
	getAvailableLocales():abstract Locale[] 
		★ 返回此区域设置服务提供器可以为其提供本地化对象或名称的所有区域设置的数组。此信息用于组成依赖于区域设置的服务的getAvailableLocales()值，例如：DateFormat.getAvailableLocales()。
		此方法返回的数组不应包含两个或多个仅扩展名不同的区域设置对象。
	isSupportedLocale(Locale locale):boolean 
		locale - 要测试的区域设置
		如果此区域设置服务提供器支持给定的区域设置，则返回true。给定的区域设置可能包含支持确定时应考虑的扩展。
		如果给定区域设置等于getAvailableLocales()返回的任何可用区域设置，并且忽略给定区域设置和可用区域设置中的任何扩展，则默认实现返回true。如果这些实现支持区域设置扩展，则具体的区域设置服务提供器实现应重写此方法。例如，DecimalFormatSymbolsProvider实现将需要检查给定区域设置中的扩展，以查看是否指定了任何编码系统，并且是否可以支持。但是，CollatorProvider实现可能不受任何特定编码系统的影响，在这种情况下，应忽略编码系统的扩展。
		如果此提供器支持给定的区域设置，则为true；否则为false。
		【Throws】：
			NullPointerException 如果给定的locale为null。
	
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
附录：
	1、注：文档中的△符号表示覆盖重写方法，✘符号表示已淘汰的方法。	
	2、注：文档中的★符号表示抽象方法或者直接抛出UnsupportedOperationException异常的方法，总之没有实现具体功能代码的方法。	
	3、manifest文件：描述Jar文件的打包、运行信息。
	













		