----------------------------------------TreeSet<E>--------------------------------------------------------------------------------------------------------------
TreeSet<E>：树集（树集合）。【Since:1.2】
	进一步提供其元素的总排序的集合。这些元素是使用它们的自然顺序来排序的，或者由一个比较器来排序，通常在排序集创建时提供。集合的迭代器将按升序元素顺序遍历集合。为了利于排序，还提供了一些附加操作。（此接口是SortedMap的设置模拟。）
	插入排序集的所有元素必须实现Comparable接口（或被指定的比较器接受）。此外，所有这些元素必须相互比较：e1.compareTo(e2)（或comparator.compare(e1, e2)）不能对排序集中的任何元素e1和e2抛出ClassCastException。违反此限制的尝试将导致有问题的方法或构造函数调用引发ClassCastException异常。
	注意，如果排序集要正确实现Set接口，那么由排序集（SortedSet）维护的排序（无论是否提供显式比较器）必须与equals一致。（与equals一致的精确定义见Comparable接口或Comparator接口。）这是因为Set接口是根据equals操作定义的，但排序集（SortedSet）使用其compareTo（或compare）方法执行所有元素比较，因此从排序集（SortedSet）的角度来看，该方法认为相等的两个元素是相等的。排序集的行为是定义良好的，即使它的排序与equals不一致；它只是不遵守集合接口的一般约定。
	所有通用排序集实现类都应提供四个“标准”构造函数：1）一个void（无参数）构造函数，它创建一个空的排序集，并根据元素的自然顺序排序。2）具有Comparator类型的单个参数的构造函数，它创建一个根据指定的Comparator排序的空排序集。3）具有集合类型的单个参数的构造函数，它创建一个新的排序集，该集合的元素与其参数相同，并按照元素的自然顺序排序。4）具有类型SortedSet的单个参数的构造函数，它创建一个新的排序集，该集与输入排序集具有相同的元素和相同的顺序。无法强制执行此建议，因为接口不能包含构造函数。
	注意：有几种方法返回范围受限的子集。这样的范围是半开放的，也就是说，它们包括它们的低端点，但不包括它们的高端点（如适用）。如果需要一个闭合范围（包括两个端点），并且元素类型允许计算给定值的后续值，那么只需请求从lowEndpoint到successor(highEndpoint)的子范围。例如，假设s是一组经过排序的字符串。下面的示例获得了一个包含s中所有字符串的视图，从低到高，包括：
		SortedSet<String> sub = s.subSet(low, high+"\0");
	可以使用类似的技术生成一个开放范围（既不包含端点）。下面示例获得一个视图，其中包含s中从低到高的所有字符串，不包括：
		SortedSet<String> sub = s.subSet(low+"\0", high);
	此接口是Java集合框架的成员。
	
	
	类定义	：public class TreeSet<E> extends AbstractSet<E> implements NavigableSet<E>, Cloneable, java.io.Serializable
	实现接口	：Iterable<E>,Collection<E>,Set<E>,SortedSet<E>, NavigableSet<E>, Cloneable, java.io.Serializable
------------------------------------------------------------------------------------------------------------------------------------------------------
Constructor Summary（构造器概要）：
	public TreeSet()
		构造一个新的空树集，按照元素的自然顺序排序。插入到集合中的所有元素都必须实现Comparable接口。此外，所有这些元素必须相互比较：e1.compareTo(e2)不能对集合中的任何元素e1和e2抛出ClassCastException。如果用户试图向违反此约束的集合中添加元素（例如，用户试图向元素为整数的集合中添加字符串元素），则add调用将引发ClassCastException异常。
	public TreeSet(Collection<? extends E> c)
		构造一个新的树集，其中包含指定集合中的元素，并根据元素的自然顺序进行排序。插入集合中的所有元素都必须实现Comparable接口。此外，所有这些元素必须相互比较：e1.compareTo(e2)不能对集合中的任何元素e1和e2抛出ClassCastException异常。
		【Throws】：
			ClassCastException  如果c中的元素不可比较，或不可相互比较
			NullPointerException 如果指定的集合为null
	public TreeSet(Comparator<? super E> comparator)
		构造一个新的空树集，根据指定的比较器排序。插入到集合中的所有元素必须由指定的比较器相互比较:comparator.compare(e1, e2)不能为集合中的任何元素e1和e2抛出ClassCastException异常。如果用户试图向违反此约束的集合中添加元素，则add调用将引发ClassCastException。
	public TreeSet(SortedSet<E> s)
		构造一个新的树集，该树集包含相同的元素，并且使用与指定排序集相同的顺序。
		【Throws】：
			NullPointerException 如果指定的集合为null
		
Method Summary（方法概要）：
	add(E e):boolean 
		如果指定的元素不存在，则将其添加到此集合中。更正式地说，如果集合不包含元素e2(e==null ? e2==null : e.equals(e2))，则将指定的元素e添加到此集合中。如果此集合已经包含元素，则调用将使集合保持不变并返回false。
		【Throws】：
			ClassCastException 如果指定的对象无法与此集合中当前的元素进行比较
			NullPointerException 如果指定的元素为null，并且此集合使用自然顺序，或者其比较器不允许null元素
	addAll(Collection<? extends E> c):boolean 
		将指定集合中的所有元素添加到此集合中。如果此集合由于调用而更改，则为true。
		【Throws】：
			ClassCastException 如果无法将提供的元素与集合中当前的元素进行比较
			NullPointerException 如果指定的集合为null，或者任何元素为null，并且此集合使用自然顺序，或者其比较器不允许null元素
	ceiling(E e):E
		返回此 集合中大于等于给定元素的最小元素；如果不存在这样的元素，则返回 null。
		【Throws】：
			● ClassCastException 如果无法将指定的元素与集合中当前的元素进行比较
			● NullPointerException 如果指定的元素为null，并且此集合不允许null元素
	clear():void 
		删除此集合中的所有元素。此调用返回后，集合将为空。
	clone():Object 
		返回此树集实例的浅副本。（不克隆元素本身。）
	comparator():Comparator<? super E>
		返回用于对该集合中的元素排序的比较器，如果该集合使用其元素的自然顺序，则返回null。
	contains(Object o):boolean 
		如果此集合包含指定元素，则返回true。更正式地说，如果且仅当此集合包含至少一个元素(o==null ? e==null : o.equals(e))。	
		【Throws】：
			ClassCastException 如果指定的对象无法与此集合中当前的元素进行比较
			NullPointerException 如果指定的元素为null，并且此集合使用自然顺序，或者其比较器不允许null元素
	descendingIterator():Iterator<E> 
		 按降序返回此集合中元素的迭代器。	 
	descendingSet():NavigableSet<E> 
		返回包含在此集合中的元素的逆序视图。降序集由该集合支持，因此对该集合的更改反映在降序集中，反之亦然。如果在对任一集合进行迭代的过程中修改了任一集合（通过迭代器自己的remove操作除外），则迭代的结果不确定。
		返回的集具有与Collections.reverseOrder(comparator())等效的顺序。表达式s.descendingSet().descendingSet()返回的s视图实质上等同于s。
	first():E 
		返回当前在此集合中的第一个（最低）元素。
		【Throws】：
			● NoSuchElementException 如果此集合为空
	floor(E e):E 
		 返回此集合中小于或等于给定元素的最大元素，如果没有此类元素，则返回null。
		 【Throws】：
			● ClassCastException 如果无法将指定的元素与集合中当前的元素进行比较
			● NullPointerException 如果指定的元素为null，并且此集合不允许null元素
	headSet(E toElement):SortedSet<E> 
		 △返回此集合中元素严格小于toElement的部分的视图。这个集合支持返回的集合，因此返回的集合中的更改反映在这个集合中，反之亦然。返回的集合支持此集合支持的所有可选集合操作。
		返回的集将在尝试插入超出其范围的元素时引发IllegalArgumentException异常。
		相当于headSet(toElement, false)
		【Throws】：
			● ClassCastException 如果toElement与这个集合的比较器不兼容（或者如果集合没有比较器，如果toElement没有实现Comparable接口）。如果无法将toElement与集合中当前的元素进行比较，则实现可能（但不必）引发此异常。
			● NullPointerException 如果指定的元素为null，并且此集合不允许null元素
			● IllegalArgumentException 如果此集合本身具有限制的范围，并且toElement位于范围的边界之外
	headSet(E toElement, boolean inclusive):NavigableSet<E> 
		返回此集合中元素小于（或等于，如果inclusive为true）toElement的部分的视图。这个集合支持返回的集合，因此返回的集合中的更改反映在这个集合中，反之亦然。返回的集合支持此集合支持的所有可选集合操作。
		返回的集将在尝试插入超出其范围的元素时引发IllegalArgumentException异常。
		【Throws】：
			● ClassCastException 如果toElement与这个集合的比较器不兼容（或者如果集合没有比较器，如果toElement没有实现Comparable接口）。如果无法将toElement与集合中当前的元素进行比较，则实现可能（但不必）引发此异常。
			● NullPointerException 如果指定的元素为null，并且此集合不允许null元素
			● IllegalArgumentException 如果此集合本身具有限制的范围，并且toElement位于范围的边界之外
	higher(E e):E 
		返回此集合中严格大于给定元素的最小元素；如果不存在这样的元素，则返回 null。
		【Throws】：
			● ClassCastException 如果无法将指定的元素与集合中当前的元素进行比较
			● NullPointerException 如果指定的元素为null，并且此集合不允许null元素
	isEmpty():boolean 
		如果此集合不包含元素，则返回true。
	iterator():Iterator<E> 
		返回此集合中包含的元素的迭代器。
	last():E 
		返回当前在此集合中的最后一个（最高）元素。
		【Throws】：
			● NoSuchElementException 如果此集合为空
	lower(E e):E 
		返回此集合中严格小于给定元素的最大的元素；如果没有此类元素，则返回空值。
		【Throws】：
			● ClassCastException 如果无法将指定的元素与集合中当前的元素进行比较
			● NullPointerException 如果指定的元素为null，并且此集合不允许null元素
	pollFirst():E 
		检索并删除第一个（最低）元素，或者如果该集合为空，则返回null。
	pollLast():E 
		检索并删除最后一个（最高）元素，或者如果该集为空，则返回null。
	remove(Object o):boolean 
		从此集合中删除指定元素的单个实例（如果存在）。更正式地说，删除元素e，以便(o==null ? e==null : o.equals(e))。如果此集合包含指定元素，则返回“true”（如果此集合因调用而更改，也返回“true”）。
	size():int 
		 返回此 集合中的元素数量。
	spliterator():default Spliterator<E>
		△ 创建后期绑定并且在集合元素上实现fail-fast机制的拆分器。
		拆分器报告Spliterator.SIZED、Spliterator.DISTINCT、Spliterator.SORTED和Spliterator.ORDERED。重写实现应该记录额外特征值的报告。
		如果树集合的比较器（参见Spliterator.getComparator()）为null，则拆分器的比较器（参见comparator()）为null。否则，拆分器的比较器与树集的比较器相同，或实施相同的总排序。
	subSet(E fromElement, boolean fromInclusive,E toElement,  boolean toInclusive):NavigableSet<E> 
		返回此集合中元素范围从fromElement（fromInclusive为true则包含fromElement）到toElement（toInclusive为true则包含toElement）的部分的视图。如果fromElement和toElement相等，则返回的集为空。这个集合支持返回的集合，因此返回的集合中的更改反映在这个集合中，反之亦然。返回的集合支持此集合支持的所有可选集合操作。
		【Throws】：
			● ClassCastException 如果fromElement和toElement与这个集合的比较器不兼容（或者如果集合没有比较器，如果fromElement和toElement没有实现Comparable接口）。如果无法将fromElement和toElement与集合中当前的元素进行比较，则实现可能（但不必）引发此异常。
			● NullPointerException 如果fromElement和toElement元素为null，并且此集合不允许null元素
			● IllegalArgumentException 如果此集合本身具有限制的范围，并且fromElement和toElement位于范围的边界之外
	subSet(E fromElement, E toElement):SortedSet<E> 
		△ 返回此集合中元素范围从fromElement（含fromElement）到toElement（不含toElement）的部分的视图。（如果fromElement和toElement相等，则返回的集合为空。）返回的集合由该集合支持，因此返回集合中的更改反映在该集合中，反之亦然。返回的集合支持此集合支持的所有可选集合操作。
		返回的集将在尝试插入超出其范围的元素时引发IllegalArgumentException异常。
		相当于subSet(fromElement, true, toElement, false)
		【Throws】：
			● ClassCastException 如果fromElement和toElement与这个集合的比较器不兼容（或者如果集合没有比较器，如果fromElement和toElement没有实现Comparable接口）。如果无法将fromElement和toElement与集合中当前的元素进行比较，则实现可能（但不必）引发此异常。
			● NullPointerException 如果fromElement和toElement元素为null，并且此集合不允许null元素
			● IllegalArgumentException 如果此集合本身具有限制的范围，并且fromElement和toElement位于范围的边界之外
	tailSet(E fromElement):SortedSet<E> 
		△ 返回此集合中元素大于或等于fromElement的部分的视图。这个集合支持返回的集合，因此返回的集合中的更改反映在这个集合中，反之亦然。返回的集合支持此集合支持的所有可选集合操作。
		返回的集将在尝试插入超出其范围的元素时引发IllegalArgumentException。
		相当于tailSet(fromElement, true)
		【Throws】：
			● ClassCastException 如果fromElement与这个集合的比较器不兼容（或者如果集合没有比较器，如果fromElement没有实现Comparable接口）。如果无法将fromElement与集合中当前的元素进行比较，则实现可能（但不必）引发此异常。
			● NullPointerException 如果指定的元素为null，并且此集合不允许null元素
			● IllegalArgumentException 如果此集合本身具有限制的范围，并且fromElement位于范围的边界之外			
	tailSet(E fromElement, boolean inclusive):NavigableSet<E> 		
		返回此集合中元素大于（或等于，如果inclusive为true）fromElement的部分的视图。这个集合支持返回的集合，因此返回的集合中的更改反映在这个集合中，反之亦然。返回的集合支持此集合支持的所有可选集合操作。				
		返回的集将在尝试插入超出其范围的元素时引发IllegalArgumentException异常。
		【Throws】：
			● ClassCastException 如果fromElement与这个集合的比较器不兼容（或者如果集合没有比较器，如果fromElement没有实现Comparable接口）。如果无法将fromElement与集合中当前的元素进行比较，则实现可能（但不必）引发此异常。
			● NullPointerException 如果指定的元素为null，并且此集合不允许null元素
			● IllegalArgumentException 如果此集合本身具有限制的范围，并且fromElement位于范围的边界之外
			
------------------------------------------------------------------------------------------------------------------------------------------------------
附录：
	1、注：文档中的△符号表示覆盖重写方法。	
	2、注：文档中的★符号表示抽象方法或者直接抛出UnsupportedOperationException异常的方法，总之没有实现具体功能代码的方法。
	



