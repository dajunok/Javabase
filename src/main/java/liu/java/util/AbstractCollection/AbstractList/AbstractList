AbstractList<E>：抽象列表类。【since 1.2】
	这个类提供列表接口的框架实现，以最小化实现这个由“随机访问”数据存储（如数组）支持的接口所需的工作量。对于顺序访问数据（如链接列表），应优先使用AbstractSequentialList。
	★ 为了实现一个不可修改的列表，程序员只需要扩展这个类并提供 get(int)和size()方法的实现。
	★ 要实现一个可修改的列表，程序员必须另外重写set(int, E)方法（否则将引发UnsupportedOperationException异常）。如果列表的大小是可变的，程序员必须另外重写add(int, E)和remove(int)方法。
	程序员通常应根据Collection接口规范中的建议提供一个void (no argument)和集合构造器。
	与其他抽象集合实现不同，程序员不必提供迭代器实现；迭代器和列表迭代器由此类实现，位于“随机访问”方法之上：get(int), set(int, E), add(int, E) 与 remove(int)。
	此类中每个非抽象方法的文档详细描述了其实现。如果正在实现的集合允许更有效的实现，则可以重写这些方法中的每一个。
	该类是Java集合框架的成员。		
	
	类定义：public abstract class AbstractList<E> extends AbstractCollection<E> implements List<E>
------------------------------------------------------------------------------------------------------------------------------------------------------
属性：
	protected transient int modCount = 0
		此列表在结构上被修改的次数。结构修改是那些改变列表大小的修改，或者以这样一种方式干扰列表，正在进行的迭代可能会产生不正确的结果。
		迭代器和列表迭代器方法返回的迭代器和列表迭代器实现，使用此字段。如果此字段的值意外更改，迭代器（或列表迭代器）将引发ConcurrentModificationException异常，以响应next, remove, previous, set 或 add 操作。这提供了快速失败的行为，而不是在迭代过程中面对并发修改时的非确定性行为。
		子类使用此字段是可选的。如果子类希望提供fail-fast迭代器（和list迭代器），那么它只需要在其add(int, E)和remove(int)方法中增加该字段（以及它重写的导致对列表进行结构修改的任何其他方法）。对add(int, E)或remove(int)的单个调用必须在此字段中添加不超过一个，否则迭代器（和列表迭代器）将引发虚假的ConcurrentModificationExceptions。如果实现不希望提供fail-fast迭代器，则可以忽略此字段。
构造器：
	protected AbstractList()
		唯一构造器。（对于子类构造函数的调用，通常是隐式的。）

方法：
	add(E e):boolean 
		将指定的元素附加到此列表的末尾（可选操作）。
		支持此操作的列表可能会限制哪些元素可以添加到此列表中。特别是，一些列表将拒绝添加空元素，而其他列表将对可能添加的元素类型施加限制。列表类应该在它们的文档中明确地指定对可以添加哪些元素的任何限制。
		此实现调用add(size(), e)
		请注意，除非重写add(int, E)，否则此实现将引发UnsupportedOperationException异常。
	add(int index, E element):void 
		在此列表中的指定位置插入指定的元素（可选操作）。将当前位于该位置的元素（如果有）和任何后续元素右移（在其索引中添加一个元素）。	
		★ 此实现始终抛出UnsupportedOperationException异常。（子类需覆盖实现功能代码）
	addAll(int index, Collection<? extends E> c):boolean 
		在指定位置将指定集合中的所有元素插入此列表（可选操作）。将当前位于该位置的元素（如果有）和任何后续元素右移（增加其索引）。新元素将按指定集合的迭代器返回它们的顺序出现在此列表中。如果在操作进行过程中修改了指定的集合，则此操作的行为未定义。（请注意，如果指定的集合是此列表，并且不是空的，则会发生这种情况。）
		此实现获取指定集合上的迭代器并对其进行迭代，使用add(int, E)将从迭代器获取的元素插入此列表的适当位置，一次一个。为了提高效率，许多实现将重写此方法。
		请注意，除非重写add(int, E)，否则此实现将引发UnsupportedOperationException异常。
	clear():void 
		从此列表中删除所有元素（可选操作）。此调用返回后，列表将为空。
		此实现调用removeRange(0, size())方法
		请注意，除非重写remove(int index)或removeRange(int fromIndex, int toIndex)，否则此实现将引发UnsupportedOperationException异常。
	equals(Object o):boolean 
		将指定的对象与此列表比较是否相等。如果且仅当指定的对象也是列表时，两个列表的大小相同，并且两个列表中所有对应的元素对都相等，则返回true。（两个元素e1和e2相等，如果（(e1==null ? e2==null : e1.equals(e2))）换句话说，如果两个列表包含的元素顺序相同，则定义为相等。
		此实现首先检查指定的对象是否是此列表。如果是，则返回true；如果不是，则检查指定对象是否为列表。如果不是，则返回false；如果是，则对两个列表进行迭代，比较相应的元素对。如果任何比较返回false，则此方法返回false。如果迭代器先于另一个耗尽元素，则返回false（因为列表的长度不相等）；否则，在迭代完成时返回true。
	get(int index):abstract E 
		★ 返回此列表中指定位置的元素。（抽象方法，需要子类覆盖实现）
	hashCode():int 
		返回此列表的哈希代码值。
		此实现正好使用用于在List.hashCode()方法的文档中定义列表哈希函数的代码。
	indexOf(Object o):int 
		返回此列表中指定元素的第一个匹配项的索引，如果此列表不包含元素，则返回-1。更正式地说，返回最低的索引i，以便(o==null ? get(i)==null : o.equals(get(i)))，如果没有此类索引，则为-1。
		此实现首先获取一个列表迭代器（使用listIterator()）。然后，它迭代列表，直到找到指定的元素或到达列表的末尾。
	iterator():Iterator<E> 
		以正确的顺序返回此列表中元素的迭代器。
		此实现返回迭代器接口的简单实现，依赖于支持列表的size(), get(int), 和 remove(int)方法。
		请注意，此方法返回的迭代器将引发UnsupportedOperationException ，以响应其remove方法，除非重写列表的remove(int)方法。
		如（受保护的）modcount字段的规范中所述，此实现可以在面对并发修改时抛出运行时异常。
	lastIndexOf(Object o):int 
		返回此列表中指定元素最后一次出现的索引，如果此列表不包含元素，则返回-1。更正式地说，返回最高的索引i，以便(o==null ? get(i)==null : o.equals(get(i)))，如果没有此类索引，则为-1。
		此实现首先获取指向列表结尾的列表迭代器（使用listIterator(size())）。然后，它在列表上向后迭代，直到找到指定的元素，或者到达列表的开头。	
	listIterator():ListIterator<E> 
		返回此列表中元素的列表迭代器（按正确的顺序）。此实现返回listIterator(0)。
	listIterator(final int index):ListIterator<E> 
		返回此列表中元素的列表迭代器（按正确的顺序），从列表中的指定位置开始。指定的索引指示将通过对next的初始调用返回的第一个元素。对previous的初始调用将返回具有指定索引减去1的元素。
		此实现返回ListIterator接口的简单实现，该实现扩展了iterator()方法返回的迭代器接口的实现。ListIterator实现依赖于支持列表的get(int), set(int, E), add(int, E) 和 remove(int) 方法。
		请注意，此实现返回的列表迭代器将针对其移除、设置和添加方法引发UnsupportedOperationException异常，除非重写列表的remove(int), set(int, E), 和 add(int, E) 方法。
		如（受保护的）modcount字段的规范中所述，此实现可以在面对并发修改时抛出运行时异常。
	remove(int index):E 
		删除此列表中指定位置的元素（可选操作）。将任何后续元素向左移动（从其索引中减去一个）。返回从列表中删除的元素。
		★ 此实现始终抛出UnsupportedOperationException异常。（子类需覆盖实现功能代码）
	set(int index, E element):E 
		将此列表中指定位置的元素替换为指定的元素（可选操作）。
		★ 此实现始终抛出UnsupportedOperationException异常。（子类需覆盖实现功能代码）
	subList(int fromIndex, int toIndex):List<E> 
		返回指定的fromIndex（含）和toIndex（含）之间此列表部分的视图。（如果fromindex和toindex相等，则返回的列表为空。）返回的列表由此列表支持，因此返回列表中的非结构更改将反映在此列表中，反之亦然。返回的列表支持此列表支持的所有可选列表操作。
		这种方法不需要显式的范围操作（数组通常存在的类型）。任何需要列表的操作都可以通过传递子列表视图而不是整个列表来用作范围操作。例如，以下习惯用法从列表中删除一系列元素：
			list.subList(from, to).clear();
		可以为indexOf和lastIndexOf构造类似的习语，collections类中的所有算法都可以应用于subList。
		如果支持列表（即此列表）在结构上进行了除通过返回列表以外的任何方式的修改，则此方法返回的列表的语义将变为未定义的。（结构修改是指那些改变列表大小的修改，或者以某种方式干扰列表，使正在进行的迭代可能产生不正确的结果。）
		此实现返回一个将AbstractList子类化的列表。子类在私有字段中存储支持列表中子列表的偏移量、子列表的大小（可能在其生存期内发生更改）以及支持列表的预期modcount值。子类有两个变体，其中一个实现了RandomAccess。如果此列表实现了RandomAccess，则返回的列表将是实现RandomAccess的子类的实例。
		子类的set(int, E), get(int), add(int, E), remove(int), addAll(int, Collection) 和 removeRange(int, int) 方法在边界检查索引并调整偏移量后，都委托给支持抽象列表上的相应方法。addAll(Collection c) 方法只返回addAll(size, c)。
		listIterator(int)方法通过支持列表上的列表迭代器返回“包装对象”，该列表迭代器由支持列表上的相应方法创建。迭代器方法只返回listIterator()，而size方法只返回子类的size字段。
		所有方法首先检查支持列表的实际modcount是否等于其预期值，如果不是，则抛出ConcurrentModificationException异常。
		
------------------------------------------------------------------------------------------------------------------------------------------------------
