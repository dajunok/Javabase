一、案例说明：
	1、案例利用事件委托弥补观察者模式不足。
二、源代码文件（.java）介绍：
三、知识点：
	1、利用Java自带的接口和类实现了观察者模式，但其实两种观察者模式存在不足的地方。之前两种观察者模式的观察者（订阅者）都是实现了一个同一个接口，
		实现了接口中的update方法，但是如果两个观察者风马牛不相及，完全无关呢？或者他们的方法名不一样这个时候该怎么办呢？
		C#提供了事件委托，但在Java中比没有提供。此时，我们可以利用Java的反射机制来实现事件委托从而来弥补观察者模式的不足。
	2、观察者模式：订阅者模式通常也称为发布-订阅模式，发布者也称为通知者，订阅者也称为观察者。通知者发出通知，
		各发布者则收到通知后做出相应的动作。由于存在不同的订阅者和通知者，所以将这两者抽象出来。
	3、观察者：相当于事件监听器。
	