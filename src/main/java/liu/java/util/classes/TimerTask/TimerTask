-------------------------------------TimerTask-----------------------------------------------------------------------------------------------------------------------------------
TimerTask：定时任务。【since JDK1.3】
	一种任务，可由定时器安排一次或重复执行。
	
	类定义	：public abstract class TimerTask implements Runnable
	实现接口	：Runnable
------------------------------------------------------------------------------------------------------------------------------------------------------
Constructor Summary（构造器概要）：
	protected TimerTask()
		创建新的计时器任务。

Method Summary（方法概要）：
	cancel():boolean 
		取消此计时器任务。如果任务已计划为一次性执行，但尚未运行或尚未计划，则它将永远不会运行。如果任务已被计划为重复执行，则它将不再运行。（如果此调用发生时任务正在运行，则任务将运行到完成，但不会再次运行。）
		请注意，从重复计时器任务的run方法中调用此方法绝对可以确保计时器任务不会再次运行。
		此方法可以重复调用；第二次和后续调用无效。
		如果此任务计划为一次性执行，但尚未运行，或者此任务计划为重复执行，则为true。如果任务计划为一次性执行且已运行，或者任务从未计划，或者任务已取消，则返回false。（不严格地说，如果此方法阻止执行一个或多个计划的执行，则返回true。）
	run():abstract void 
		★ 此计时器任务要执行的操作。
	scheduledExecutionTime():long 
		返回此任务最近实际执行的计划执行时间。（如果在任务执行过程中调用此方法，则返回值是正在执行的任务的计划执行时间。）
		通常从任务的run方法中调用此方法，以确定任务的当前执行是否足够及时以保证执行计划的活动：
			   public void run() {
			       if (System.currentTimeMillis() - scheduledExecutionTime() >=
			           MAX_TARDINESS)
			               return;  // Too late; skip this execution.
			       // Perform the task
			   }
		此方法通常不与固定延迟执行重复任务一起使用，因为它们的计划执行时间可以随时间推移而变化，因此不具有太大的意义。
		以Date.getTime()返回的格式，计划执行此任务的最新时间。如果任务尚未开始第一次执行，则返回值不确定。
	
	
------------------------------------------------------------------------------------------------------------------------------------------------------
附录：
	1、注：文档中的△符号表示覆盖重写方法。	
	2、注：文档中的★符号表示抽象方法或者直接抛出UnsupportedOperationException异常的方法，总之没有实现具体功能代码的方法。

















