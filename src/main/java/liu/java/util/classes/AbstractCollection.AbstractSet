----------------------------------------AbstractSet<E>--------------------------------------------------------------------------------------------------------------
AbstractSet<E>：抽象集合。【Since:1.2】
	数学意义上的抽象集合。
	此类提供了set接口的框架实现，以最小化实现此接口所需的工作量。
	通过扩展此类实现集合的过程与通过扩展AbstractCollection实现集合的过程相同，只是此类子类中的所有方法和构造函数必须遵守集合接口施加的附加约束（例如，add方法不得允许添加多个对象到集合的实例）。
	注意，这个类不会重写AbstractCollection类中的任何实现。它只是为equals和hashCode添加实现。
	该类是Java集合框架的成员。
	
	
	类定义	：public abstract class AbstractSet<E> extends AbstractCollection<E> implements Set<E>
	子类		：ConcurrentSkipListSet, CopyOnWriteArraySet, EnumSet, HashSet, TreeSet
	实现接口	：Iterable<E>,Collection<E>,Set<E>
------------------------------------------------------------------------------------------------------------------------------------------------------
Constructor Summary（构造器概要）
	protected AbstractSet()
		唯一构造器。（对于子类构造函数的调用，通常是隐式的。）

Method Summary（方法概要）：
	equals(Object o):boolean 
		△ 将指定的对象与此集进行相等比较。如果给定对象也是一个集合，则返回“true”，两个集合的大小相同，并且给定集合的每个成员都包含在此集合中。这样可以确保equals方法在set接口的不同实现中正常工作。
		此实现首先检查指定的对象是否是此集合；如果是，则返回true。然后，它检查指定对象是否是一个大小与该集大小相同的集；如果不是，则返回false。如果是，则返回containsAll((Collection) o)。
	hashCode():int 
		△ 返回此集的哈希代码值。集合的哈希代码定义为集合中元素的哈希代码之和，其中null元素的哈希代码定义为0。这就确保了s1.equals(s2)意味着s1.hashCode()==s2.hashCode()对于任意两个集合S1和S2，正如Object.hashCode()的约定所要求的那样。
	removeAll(Collection<?> c):boolean 
		△ 从此集合中删除包含在指定集合中的所有元素（可选操作）。如果指定的集合也是集合，则此操作将有效地修改此集合，使其值为两个集合的不对称集合差。
		此实现通过对每个集合调用size方法来确定和指定的集合哪个集合较小。如果这个集合的元素较少，那么实现将迭代这个集合，依次检查迭代器返回的每个元素，以查看它是否包含在指定的集合中。如果它是这样包含的，那么它将使用迭代器的remove方法从此集合中移除。如果指定的集合中的元素较少，则实现将迭代指定的集合，并使用该集合的remove方法从此集合中移除迭代器返回的每个元素。
		注意，如果迭代器方法返回的迭代器没有实现remove方法，则此实现将引发UnsupportedOperationException异常。
		【Throws】：
			UnsupportedOperationException 如果此集合不支持removeAll操作
			ClassCastException 如果此集合的元素的类与指定集合不兼容（可选）
			NullPointerException 如果此集合包含null元素，并且指定的集合不允许null元素（可选），或者指定的集合为null
			
------------------------------------------------------------------------------------------------------------------------------------------------------
附录：
	1、注：文档中的△符号表示覆盖重写方法。	
	2、注：文档中的★符号表示抽象方法或者直接抛出UnsupportedOperationException异常的方法，总之没有实现具体功能代码的方法。
	



