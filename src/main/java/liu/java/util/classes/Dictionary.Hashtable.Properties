-------------------------------------------Properties-----------------------------------------------------------------------------------------------------------
Properties：属性列表	【since JDK1.0】
	properties类表示一组持久的属性。属性可以保存到流中，也可以从流中加载。属性列表中的每个键及其对应值都是一个字符串。
	属性列表可以包含另一个属性列表作为其“默认值”；如果在原始属性列表中找不到属性键，则搜索第二个属性列表。
	因为Properties继承自Hashtable，所以Put和PutAll方法可以应用于Properties对象。强烈建议不要使用它们，因为它们允许调用者插入键或值不是字符串的条目。应改用setProperty方法。如果对包含非字符串键或值的“已损坏”Properties对象调用store或save方法，则调用将失败。类似地，如果在包含非字符串键的“已损坏”属性对象上调用propertyNames或list方法，则对该方法的调用将失败。
	LOAD(Reader)或store(Writer, String)方法以下面指定的简单面向行格式从基于字符的流加载和存储属性。load(InputStream)和store(OutputStream, String) 方法与对应的load(Reader)和store(Writer, String)工作方式相同，但输入/输出流使用ISO 8859-1字符编码。在该编码中不能直接表示的字符可以使用Java语言规范的第3.3节中定义的Unicode-escape来编写；在转义序列中只允许一个“U”字符。native2ascii工具可用于将属性文件转换为其他字符编码或从其他字符编码转换为另外字符编码。
	loadFromXML(InputStream)和storeToXML(OutputStream, String, String)方法以简单的XML格式加载和存储属性。默认情况下，使用UTF-8字符编码，但是如果需要，可以指定特定的编码。实现需要支持UTF-8和UTF-16，并且可能支持其他编码。XML属性文档具有以下DOCTYPE声明：
		<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
	注意系统的URI（http://java.sun.com/dtd/properties.dtd）不能被访问，当导出或导入属性时；它只是被作为字符串唯一标识一个DTD，是：
	    <?xml version="1.0" encoding="UTF-8"?>
	
	    <!-- DTD for properties -->
	
	    <!ELEMENT properties ( comment?, entry* ) >
	
	    <!ATTLIST properties version CDATA #FIXED "1.0">
	
	    <!ELEMENT comment (#PCDATA) >
	
	    <!ELEMENT entry (#PCDATA) >
	
	    <!ATTLIST entry key CDATA #REQUIRED>
	这个类是线程安全的：多个线程可以共享一个属性对象，而不需要外部同步。
	
	
	类定义	：public class Properties extends Hashtable<Object,Object>
	实现接口	：Map<Object,Object>, Cloneable,Serializable
	子类		：Provider
------------------------------------------------------------------------------------------------------------------------------------------------------	
Constructor Summary（构造器概要）：
	public Properties()
		创建没有默认值的空属性列表。
	public Properties(Properties defaults)
		使用指定的defaults创建空属性列表。

----------------------------------------------------------------------------------------------------------------	
Method Summary（方法概要）：
	getProperty(String key):String 
		在此属性列表中搜索具有指定键的属性。如果在此属性列表中找不到该键，则递归检查默认属性列表及其默认值。如果找不到属性，则该方法返回null值。
	getProperty(String key, String defaultValue):String 
		在此属性列表中搜索具有指定键的属性。如果在此属性列表中找不到该键，则递归检查默认属性列表及其默认值。如果找不到属性，该方法将返回defaultValue参数。
	list(PrintStream out):void 
		将此属性列表输出到指定的输出流。此方法对调试很有用。
		【Throws】：
			ClassCastException 如果此属性列表中的任何键不是字符串。
	list(PrintWriter out):void 
		将此属性列表输出到指定的输出流。此方法对调试很有用。
		【Throws】：
			ClassCastException 如果此属性列表中的任何键不是字符串。
	load(InputStream inStream):synchronized void 
		从输入字节流读取属性列表（键和元素对）。输入流采用load(Reader)中指定的简单的面向行格式，并假定使用ISO 8859-1字符编码；即每个字节都是一个拉丁字符。不在LaTun1中的字符，以及某些特殊字符，用Java语言规范第3.3节中定义的Unicode-escapes来表示键和元素。
		此方法返回后，指定的流将保持打开状态。
		【Throws】：
			IOException 如果从输入流读取时出错。
			IllegalArgumentException 如果输入流包含格式错误的Unicode转义序列。
	load(Reader reader):synchronized void 
		以简单的面向行格式从输入字符流中读取属性列表（键和元素对）。
		属性按行处理。有两种“行”，自然行和逻辑行。自然行定义为一行字符，由一组行终止符字符（\n或\r或\r\n）或流结尾终止。自然行可以是空行、注释行，也可以包含全部或部分key-element对。逻辑行包含key-element对的所有数据，通过用反斜杠字符‘\’转义行终止符序列，可以跨几个相邻的自然行分布这些数据。请注意，注释行不能以这种方式扩展；作为注释的每一自然行都必须有自己的注释指示器，如下所述。从输入读取行，直到到达流的末尾。
		只包含空白字符的自然行被视为空白，并被忽略。注释行有一个ASCII '#'或 '!'作为第一个非空白字符，注释行也被忽略，不编码key-element信息。除了行终止符之外，此格式还将字符空格（' '，'\u0020'）、制表符（“\t”，'\u0009”）和表单提要（“\f”，'\u000c”）视为空白。
		如果逻辑行分布在多个自然行上，则转义行终止符序列、行终止符序列的反斜杠和下一行开头的任何空白对键或元素值没有影响。键和元素解析（加载时）讨论的其余部分将假定在删除行继续符后，构成键和元素的所有字符都出现在一个自然行上。注意，仅检查行终止符序列前面的字符以确定行终止符是否被转义是不够的；要转义行终止符，必须有奇数个连续反斜杠。由于输入是从左到右处理的，因此行尾符（或其他地方）之前的2n连续反斜杠的偶数非零在转义处理之后编码n个反斜杠。
		该键包含行中以第一个非空白字符开头的所有字符，以及最多（但不包括）第一个未转义的“=”、“：”或除行终止符以外的空白字符。所有这些键终止字符都可以通过前一个反斜杠字符转义而包含在键中；例如：
			\:\=
		将是两个字符的键“：=”。行终止符字符可以使用\r和\n转义序列包含。跳过该键后的任何空白；如果该键后的第一个非空白字符是“=”或“：”，则忽略该字符，并且跳过该键后的任何空白字符。行中的所有剩余字符都成为关联元素字符串的一部分；如果没有剩余字符，则元素是空字符串“”。一旦识别了构成键和元素的原始字符序列，就可以按照上面的描述执行转义处理。
		例如，下面三行中的每一行都指定了关键的“Truth”和相关的元素值“Beauty”。
			 Truth = Beauty
			  Truth:Beauty
			 Truth                    :Beauty
		作为另一个示例，以下三行指定一个属性：
		 fruits                           apple, banana, pear, \
                                  cantaloupe, watermelon, \
                                  kiwi, mango
		键是“fruits”，相关元素是：“apple, banana, pear, cantaloupe, watermelon, kiwi, mango”
		请注意，每个‘\’前面都有一个空格，这样在最终结果中每个逗号后面都会出现一个空格；续行上的‘\’、行终止符和前导空格只会被丢弃，不会被一个或多个其他字符替换。
		作为第三个示例，行：
			cheeses
		指定键为“cheeses”，关联元素为空字符串“”。
		键和元素中的字符可以用类似于字符和字符串文字的转义序列来表示（参见Java语言规范的第3.3节和3.106）。字符转义序列和用于字符和字符串的Unicode转义的区别是：
		键和元素中的字符可以用类似于字符和字符串文字的转义序列来表示（参见Java语言规范的第3.3节和3.106）。字符转义序列和用于字符和字符串的Unicode转义的区别是：
			● 无法识别八进制转义。
			● 字符序列\b不代表退格字符。
			● 方法不将无效转义符之前的反斜杠字符\视为错误；反斜杠将自动删除。例如，在Java字符串中，序列“\z”会导致编译时错误。相反，此方法会悄悄地删除反斜杠。因此，此方法将两个字符序列“\b”视为等同于单个字符“b”。
			● 单引号和双引号不需要转义；但是，根据上面的规则，单引号和双引号前面的反斜杠字符仍然分别产生单引号和双引号字符。
			● Unicode转义序列中只允许使用一个“u”字符。
		此方法返回后，指定的流将保持打开状态。		
		【Throws】：
			IOException 如果从输入流读取时出错。
			IllegalArgumentException 如果输入中出现格式错误的Unicode转义符。
	loadFromXML(InputStream in):synchronized void 
		将指定输入流上XML文档表示的所有属性加载到此属性表中。
		XML文档必须具有以下doctype声明：
			<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
		此外，文档必须满足上述DTD属性。需要一个实现来读取使用“utf-8”的XML文档或“UTF-16”编码。实现可能支持额外的编码。
		此方法返回后将关闭指定的流。
		【Throws】：
			IOException 如果从指定的输入流读取会导致IOException。
			UnsupportedEncodingException 如果可以读取文档的编码声明并指定不支持的编码
			InvalidPropertiesFormatException  输入流上的数据不构成具有强制文档类型的有效XML文档。
			IllegalArgumentException 如果in为null。
	propertyNames():Enumeration<?> 
		返回此属性列表中所有键的枚举，如果尚未从主属性列表中找到同名键，则包括默认属性列表中的非重复键。
		【Throws】：
			ClassCastException 如果此属性列表中的任何键不是字符串。
	save(OutputStream out, String comments):void 
		☆ 已淘汰（过时）。如果在保存属性列表时发生I/O错误，则此方法不会引发IOException。保存属性列表的首选方法是通过store(OutputStream out, String comments) 方法或storeToXML(OutputStream os, String comment)方法。
		【Throws】：
			ClassCastException 如果此属性列表中的任何键不是字符串。
	setProperty(String key, String value):synchronized Object 
		调用Hashtable方法put。是getProperty方法的并行性提供。强制对属性键和值使用字符串。返回的值是要放入的Hashtable调用的结果。
	store(OutputStream out, String comments):void 
		将此属性表中的此属性列表（键和元素对）以适合使用load(Reader)方法的格式写入输出字符流。
		此方法不会将此属性表（如果有）的默认表中的属性写入输出字符流。
		如果comments参数不为空，则首先将一个ASCII # 字符、comments字符串和一个行分隔符写入输出流。因此，这些评论可以作为识别性评论。换行符（“\n”）、回车符（“\r”）或紧跟换行符注释的回车符中的任何一个都将被编写器生成的行分隔符替换，如果注释中的下一个字符不是字符或字符！然后在该行分隔符后写出一个ASCII。
		接下来，总是编写一个注释行，由一个ASCII字符、当前日期和时间（就像是由当前时间的ToString日期方法生成的一样）和一个由编写器生成的行分隔符组成。
		然后，这个属性表中的每个条目都被写出，每行一个。对于每个条目，将写入键字符串，然后写入一个ASCII=，然后写入关联的元素字符串。对于键，所有空格字符都用前面的\字符写入。对于元素，前导空格字符（而不是嵌入或尾随空格字符）是用前导\字符编写的。键和元素字符，#, !, =,和: 用前面的反斜杠写入，以确保正确加载它们。
		在写入条目之后，将刷新输出流。此方法返回后，输出流保持打开状态。
		【Throws】：
			IOException 如果从指定的输入流读取会导致IOException。
			ClassCastException 如果此属性列表中的任何键不是字符串。
			NullPointerException 如果writer为null。
	store(Writer writer, String comments):void 
		将此属性表中的此属性列表（键和元素对）以适合使用load(Reader)方法的格式写入输出字符流。
		此方法不会将此属性表（如果有）的默认表中的属性写入输出字符流。
		如果comments参数不为空，则首先将一个ASCII # 字符、comments字符串和一个行分隔符写入输出流。因此，这些评论可以作为识别性评论。换行符（“\n”）、回车符（“\r”）或紧跟换行符注释的回车符中的任何一个都将被编写器生成的行分隔符替换，如果注释中的下一个字符不是字符或字符！然后在该行分隔符后写出一个ASCII。
		接下来，总是编写一个注释行，由一个ASCII字符、当前日期和时间（就像是由当前时间的ToString日期方法生成的一样）和一个由编写器生成的行分隔符组成。
		然后，这个属性表中的每个条目都被写出，每行一个。对于每个条目，将写入键字符串，然后写入一个ASCII=，然后写入关联的元素字符串。对于键，所有空格字符都用前面的\字符写入。对于元素，前导空格字符（而不是嵌入或尾随空格字符）是用前导\字符编写的。键和元素字符，#, !, =,和: 用前面的反斜杠写入，以确保正确加载它们。
		在写入条目之后，将刷新输出流。此方法返回后，输出流保持打开状态。
		【Throws】：
			IOException 如果从指定的输入流读取会导致IOException。
			ClassCastException 如果此属性列表中的任何键不是字符串。
			NullPointerException 如果writer为null。
	storeToXML(OutputStream os, String comment):void 
		发出表示此表中包含的所有属性的XML文档。
		对props.storeToXML(os, comment) 形式的此方法的调用与调用props.storeToXML(os, comment, "UTF-8") 的行为完全相同。
		【Throws】：
			IOException 如果写入指定的输出流会导致IOException。
			ClassCastException 如果此属性列表中的任何键不是字符串。
			NullPointerException 如果os为null。
	storeToXML(OutputStream os, String comment, String encoding):void 
		使用指定的编码，发出表示此表中包含的所有属性的XML文档。
		XML文档将具有以下doctype声明：
			 <!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
		如果指定的注释为空，则文档中不会存储任何注释。
		需要实现来支持使用“utf-8”或“utf-16”编码的XML文档的编写。一个实现可能支持额外的编码。
		此方法返回后，指定的流将保持打开状态。
		【Throws】：
			IOException 如果写入指定的输出流会导致IOException。
			UnsupportedEncodingException 如果实现不支持编码。
			ClassCastException 如果此属性列表中的任何键不是字符串。
			NullPointerException 如果os为null或者encoding为null。
	stringPropertyNames():Set<String> 
		返回此属性列表中的一组键，其中键及其对应值是字符串，如果在主属性列表中未找到同名键，则在默认属性列表中包括不同键。省略键或值不是字符串类型的属性。
		属性对象不支持返回的Set。对该属性的更改不会反映在集合中，反之亦然。
	
------------------------------------------------------------------------------------------------------------------------------------------------------		
附录：
	1、注：文档中的☆符号已过时或淘汰掉的方法。
	2、注：文档中的△符号表示覆盖重写方法。
	3、注：文档中的★符号表示抽象方法或者直接抛出UnsupportedOperationException异常的方法，总之没有实现具体功能代码的方法。
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	