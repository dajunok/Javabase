-------------------------------------------AbstractCollection<E>-----------------------------------------------------------------------------------------------------------
AbstractCollection<E>：抽象集合类。【Since:1.2】
	此类提供了集合接口的框架实现，以最小化实现此接口所需的工作量。
	★ 为了实现一个不可修改的集合，程序员只需要扩展这个类并提供iterator（迭代器）方法和size方法的实现。（迭代器方法返回的迭代器必须实现HasNext和Next。）
	★ 要实现可修改的集合，程序员必须另外重写此类的Add方法（否则将引发不支持的OperationException），以及迭代器方法返回的迭代器必须另外实现其Remove方法。
	程序员通常应根据Collection接口规范中的建议提供一个void（无参数）构造器与Collection构造器。
	此类中每个非抽象方法的文档详细描述了其实现。如果正在实现的集合允许更有效的实现，则可以重写这些方法中的每一个。
	该类是Java集合框架的成员。
		
	类定义	：public abstract class AbstractCollection<E> implements Collection<E>
	实现接口	：Iterable<E>,Collection<E>
------------------------------------------------------------------------------------------------------------------------------------------------------
构造器：
	protected AbstractCollection()
		唯一构造器。（对于子类构造函数的调用，通常是隐式的。）

方法：
	add(E e):boolean 
		确保此集合包含指定的元素（可选操作）。如果此集合因调用而更改，则返回true。（如果此集合不允许重复，并且已包含指定元素，则返回false。）
		支持此操作的集合可能会限制哪些元素可以添加到此集合中。特别是，一些集合将拒绝添加null元素，而其他集合将对可能添加的元素类型施加限制。集合类应该在它们的文档中明确地指定可以添加哪些元素的任何限制。		
		如果集合由于某个特定元素已经包含该元素以外的任何原因而拒绝添加该元素，则它必须引发异常（而不是返回false）。这将保留集合在该调用返回后始终包含指定元素的不变量。
		★ 此实现总是引发UnsupportedOperationException异常。（需要子类实现具体功能代码）
	addAll(Collection<? extends E> c):boolean 
		将指定集合中的所有元素添加到此集合中（可选操作）。如果在操作进行过程中修改了指定的集合，则此操作的行为未定义。（这意味着如果指定的集合是此集合，并且此集合不是空的，则此调用的行为是未定义的。）
		此实现，迭代的指定集合，并将迭代器返回的每个对象依次添加到此集合中。
		请注意，此实现将引发UnsupportedOperationException异常，除非重写了Add方法（假定指定的集合为非空）。
	clear():void 
		从此集合中删除所有元素（可选操作）。此方法返回后，集合将为空。
		此实现，迭代此集合，使用Iterator.remove操作移除每个元素。为了提高效率，大多数实现可能会选择重写此方法。
		注意，如果此集合的迭代器方法返回的迭代器未实现Remove方法，并且此集合非空，则此实现将引发UnsupportedOperationException异常。
	contains(Object o):boolean 
		如果此集合包含指定元素，则返回true。更正式地说，如果且仅当此集合包含至少一个元素(o==null ? e==null : o.equals(e))。	
		此实现，迭代集合中的元素，依次检查每个元素是否与指定元素相等。
	containsAll(Collection<?> c):boolean 
		如果此集合包含指定集合中的所有元素，则返回true。
		此实现，迭代指定的集合，依次检查迭代器返回的每个元素，以查看它是否包含在此集合中。如果所有元素都如此包含，则返回true，否则返回false。
	isEmpty():boolean 
		如果此集合不包含元素，则返回true。
		此实现,返回size() == 0。	
	iterator():abstract Iterator<E> 
		★ 返回此集合中包含的元素的迭代器。(抽象方法，需要子类实现）
	remove(Object o):boolean 
		从此集合中删除指定元素的单个实例（如果存在）（可选操作）。更正式地说，删除元素e，以便(o==null ? e==null : o.equals(e))。如果此集合包含指定元素，则返回“true”（如果此集合因调用而更改，也返回“true”）。
		此实现，迭代集合以查找指定的元素。如果找到元素，则使用迭代器的remove方法从集合中移除元素。
		请注意，如果此集合的迭代器方法返回的迭代器未实现remove方法，并且此集合包含指定的对象，则此实现，将引发UnsupportedOperationException异常。
	removeAll(Collection<?> c):boolean 
		删除包含在此集合中的，也包含在指定集合中的所有元素（可选操作）。此调用返回后，此集合将不包含与指定集合相同的元素。
		如果此集合由于调用而更改，则返回true。
		这个实现，迭代这个集合，依次检查迭代器返回的每个元素，看看它是否包含在指定的集合中。如果它是这样包含的，那么它将使用迭代器的remove方法从此集合中移除。
		请注意，如果迭代器方法返回的迭代器未实现remove方法，并且此集合包含一个或多个与指定集合相同的元素，则此实现将引发UnsupportedOperationException异常。
	retainAll(Collection<?> c):boolean 
		仅保留此集合中包含在指定集合中的元素（可选操作）。换句话说，从该集合中删除不包含在指定集合中的所有元素。如果此集合由于调用而更改，则返回true。
		这个实现,迭代这个集合，依次检查迭代器返回的每个元素，看看它是否包含在指定的集合中。如果不包含，则使用迭代器的remove方法将其从此集合中移除。	
		请注意，如果迭代器方法返回的迭代器未实现remove方法，并且此集合包含指定集合中不存在的一个或多个元素，则此实现将引发UnsupportedOperationException。
	size():abstract int 
		★ 返回此 collection 中的元素数量。如果此 collection 包含的元素大于 Integer.MAX_VALUE，则返回 Integer.MAX_VALUE。(抽象方法，需要子类实现）
	toArray():Object[] 
		返回包含此集合中所有元素的数组。如果此集合对迭代器返回元素的顺序作出任何保证，则此方法必须以相同的顺序返回元素。
		返回的数组将是“安全的”，因为此集合不维护对它的引用。（换句话说，即使此集合由数组支持，此方法也必须分配一个新数组）。因此，调用者可以自由修改返回的数组。
		此方法充当基于数组和基于集合的API之间的桥梁。
		此实现返回一个数组，该数组包含此集合迭代器返回的所有元素，顺序相同，存储在数组的连续元素中，从索引0开始。返回数组的长度等于迭代器返回的元素数量，即使此集合的大小在迭代期间发生更改，如果集合允许在迭代期间进行并发修改，也可能发生这种情况。size方法仅作为优化提示调用；即使迭代器返回的元素数不同，也会返回正确的结果。
		该方法相当于调用：
			List<E> list = new ArrayList<E>(size());
			 for (E e : this)
				 list.add(e);
			 return list.toArray();
	toArray(T[] a):<T> T[] 
		返回包含此集合中所有元素的数组；返回的数组的运行时类型是指定数组的运行时类型。如果集合符合指定的数组，则在其中返回。否则，将为新数组分配指定数组的运行时类型和此集合的大小。
		如果此集合适合具有备用空间的指定数组（即，数组中的元素多于此集合），则紧跟集合结尾的数组中的元素将设置为空。（只有当调用方知道此集合不包含任何空元素时，才有助于确定此集合的长度。）
		如果此集合对迭代器返回元素的顺序作出任何保证，则此方法必须以相同的顺序返回元素。
		与Collection.toArray()方法一样，此方法充当基于数组和基于集合的API之间的桥梁。此外，此方法允许对输出数组的运行时类型进行精确控制，并且可以在某些情况下用于节省分配成本。
		假设x是一个已知仅包含字符串的集合。以下代码可用于将集合转储到新分配的字符串数组中：
			String[] y = x.toArray(new String[0]);
		请注意，toArray(new Object[0])在功能上与toArray()相同。
		此实现返回一个数组，该数组包含此集合迭代器以相同顺序返回的所有元素，存储在数组的连续元素中，从索引0开始。如果迭代器返回的元素数太大，无法放入指定的数组中，则元素将返回到新分配的数组中，其长度等于迭代器返回的元素数，即使迭代过程中此集合的大小发生了变化，如果集合允许并发修改，也可能发生这种情况。迭代过程中的离子。size方法仅作为优化提示调用；即使迭代器返回的元素数不同，也会返回正确的结果。
		该方法相当于调用：
			List<E> list = new ArrayList<E>(size());
			 for (E e : this)
				 list.add(e);
			 return list.toArray(a);
	toString():String 
		返回此集合的字符串表示形式。字符串表示形式由集合元素的列表组成，这些元素按迭代器返回的顺序排列，用方括号（"[]"）括起来。相邻元素由字符“,”（逗号和空格）分隔。元素按String.valueOf(Object)转换为字符串。
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
附录：
	1、注：文档中的△符号表示覆盖重写方法。	
	2、注：文档中的★符号表示抽象方法或者直接抛出UnsupportedOperationException异常的方法，总之没有实现具体功能代码的方法。


















