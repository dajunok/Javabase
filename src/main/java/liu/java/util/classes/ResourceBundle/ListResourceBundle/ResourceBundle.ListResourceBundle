-------------------------------ListResourceBundle-----------------------------------------------------------------------------------------------------------------------
ListResourceBundle：列表资源包。【since JDK1.1】
	ListResourceBundle是ResourceBundle的抽象子类，它在一个方便易用的列表中管理区域设置的资源。有关一般资源束的更多信息，请参阅ResourceBundle。
	子类必须重写getContents并提供一个数组，其中数组中的每个项都是一对元素对象。每对元素的第一个元素是键，它必须是字符串，第二个元素是与该键关联的值。
	下面的示例显示具有基础名称（base name）“MyResources”的资源包族的两个成员。“MyResources”是bundle系列的默认成员，“MyResources_fr”是法国成员。这些成员是基于ListResourceBundle的（一个相关的示例演示了如何将bundle添加到此基于属性文件的族中）。本例中的键的形式为“s1”等。实际的键完全取决于您的选择，只要它们与您在程序中用于从包中检索对象的键相同。键区分大小写。
		 public class MyResources extends ListResourceBundle {
		     protected Object[][] getContents() {
		         return new Object[][] {
		         // LOCALIZE THIS
		             {"s1", "The disk \"{1}\" contains {0}."},  // MessageFormat pattern
		             {"s2", "1"},                               // location of {0} in pattern
		             {"s3", "My Disk"},                         // sample disk name
		             {"s4", "no files"},                        // first ChoiceFormat choice
		             {"s5", "one file"},                        // second ChoiceFormat choice
		             {"s6", "{0,number} files"},                // third ChoiceFormat choice
		             {"s7", "3 Mar 96"},                        // sample date
		             {"s8", new Dimension(1,5)}                 // real object, not just string
		         // END OF MATERIAL TO LOCALIZE
		         };
		     }
		 }
		
		 public class MyResources_fr extends ListResourceBundle {
		     protected Object[][] getContents() {
		         return new Object[][] {
		         // LOCALIZE THIS
		             {"s1", "Le disque \"{1}\" {0}."},          // MessageFormat pattern
		             {"s2", "1"},                               // location of {0} in pattern
		             {"s3", "Mon disque"},                      // sample disk name
		             {"s4", "ne contient pas de fichiers"},     // first ChoiceFormat choice
		             {"s5", "contient un fichier"},             // second ChoiceFormat choice
		             {"s6", "contient {0,number} fichiers"},    // third ChoiceFormat choice
		             {"s7", "3 mars 1996"},                     // sample date
		             {"s8", new Dimension(1,3)}                 // real object, not just string
		         // END OF MATERIAL TO LOCALIZE
		         };
		     }
		 }	
	如果同时被多个线程使用，那么ListResourceBundle子类的实现必须是线程安全的。此类中方法的默认实现是线程安全的。
	
	
	
	
	类定义	：public abstract class ListResourceBundle extends ResourceBundle
	内部类	：ResourceBundle.Control
------------------------------------------------------------------------------------------------------------------------------------------------------		
Field Summary（字段概要）：
	parent:protected ResourceBundle 
		此包的父包。当这个包不包含特定资源时，getobject会搜索父包。
		
Constructor Summary（构造器概要）：
	public ListResourceBundle()
		唯一构造器。（对于子类构造函数的调用，通常是隐式的。）
Method Summary（方法概要）：
	getContents():abstract protected Object[][] 
		★ 返回一个数组，其中每个项都是对象数组中的一对元素对象。每对元素的第一个元素是键，它必须是字符串，第二个元素是与该键关联的值。有关详细信息，请参见类描述。
	getKeys():Enumeration<String> 
		△ 返回此ResourceBundle及其父包中包含的键的枚举。
	handleGetObject(String key):final Object 
		△ 从该资源包中获取给定键的对象。如果此资源包不包含给定键的对象，则返回null。
	handleKeySet():protected Set<String> 
		△ 返回仅包含在此ResourceBundle中的一组键。
------------------------------------------------------------------------------------------------------------------------------------------------------
附录：
	1、注：文档中的☆符号已过时或淘汰掉的方法。★符号表示抽象方法
	2、注：文档中的△符号表示覆盖重写方法。
	3、'::' 关键字：	双冒号可以访问类的构造方法，对象方法，静态方法。就是把方法当做参数传到stream内部，使stream的每个元素都传入到该方法里面执行一下。
	4、单实例：（即单例设计模式）。“一个类有且仅有一个实例，并且自行实例化向整个系统提供。”单例模式是设计模式中最简单的形式之一。这一模式的目的是使得类的一个对象成为系统中的唯一实例。要实现这一点，可以从客户端对其进行实例化开始。因此需要用一种只允许生成对象类的唯一实例的机制，“阻止”所有想要生成对象的访问。使用工厂方法来限制实例化过程。这个方法应该是静态方法（类方法），因为让类的实例去生成另一个唯一实例毫无意义。























