-------------------------------Scanner-----------------------------------------------------------------------------------------------------------------------
Scanner：文本扫描器。【since 1.5】
	一个简单的文本扫描器，可以使用正则表达式解析基元类型和字符串。
	Scanner使用一个分隔符模式将其输入拆分为标记，默认情况下，该模式与空白匹配。然后，可以使用不同的next方法将生成的标记转换为不同类型的值。
	例如，此代码允许用户从System.in读取数字：
		Scanner sc = new Scanner(System.in);
		int i = sc.nextInt();
	作为另一个示例，此代码允许从文件myNumbers中的条目分配long类型：
		Scanner sc = new Scanner(new File("myNumbers"));
	      while (sc.hasNextLong()) {
	          long aLong = sc.nextLong();
	      }
	扫描器也可以使用除空白之外的分隔符。此示例从字符串中读取以下几项：
	     String input = "1 fish 2 fish red fish blue fish";
	     Scanner s = new Scanner(input).useDelimiter("\\s*fish\\s*");
	     System.out.println(s.nextInt());
	     System.out.println(s.nextInt());
	     System.out.println(s.next());
	     System.out.println(s.next());
	     s.close();		
	打印以下输出：
		 1
	     2
	     red
	     blue
	此代码可以生成相同的输出，它使用正则表达式一次解析所有四个标记：
	     String input = "1 fish 2 fish red fish blue fish";
	     Scanner s = new Scanner(input);
	     s.findInLine("(\\d+) fish (\\d+) fish (\\w+) fish (\\w+)");
	     MatchResult result = s.match();
	     for (int i=1; i<=result.groupCount(); i++)
	         System.out.println(result.group(i));
	     s.close();	
	扫描器使用的默认空白分隔符由Character.isWhitespace识别。reset()方法将扫描程序分隔符的值重置为默认的空白分隔符，而不管它以前是否被更改过。
	扫描操作可能会阻止等待输入。
	next()和hasNext()方法及其基元类型的陪伴方法（如nextInt()和hasNextInt()）首先跳过与分隔符模式匹配的任何输入，然后尝试返回下一个标记。HasNext和Next方法都可能阻止等待进一步输入。hasNext方法块是否没有连接到其关联的next方法是否将阻塞。
	findInLine(java.lang.String)、 findWithinHorizon(java.lang.String, int)和skip(java.util.regex.Pattern)方法独立于定界符模式运行。这些方法将尝试匹配指定的模式，而不考虑输入中的分隔符，因此可以在分隔符不相关的特殊情况下使用。这些方法可能会阻止等待更多输入。
	当scanner抛出一个InputMismatchException时，scanner将不会传递导致异常的标记，以便可以通过其他方法检索或跳过它。
	根据分隔模式的类型，可以返回空标记。例如，模式“\\s+”不会返回空标记，因为它与分隔符的多个实例匹配。定界模式“\\s”可能返回空标记，因为它一次只传递一个空格。
	扫描器可以从实现Readable接口的任何对象中读取文本。如果调用底层可读的Readable.read(java.nio.CharBuffer)方法抛出一个IOException，则扫描程序假定已到达输入的结尾。底层Readable.read(java.nio.CharBuffer)引发的最近IOException可以通过ioException()方法进行检索。
	当Scanner关闭时，如果源实现了Closeable接口，它将关闭其输入源。
	如果没有外部同步，多线程使用Scanner是不安全的。
	除非另有说明，否则将null参数传递到Scanner的任何方法都将导致引发NullPointerException。
	Scanner默认将数字解释为十进制，除非使用useRadix(int)方法设置了不同的基数。reset()方法将把扫描器的基数值重置为10，而不管它以前是否被更改过。
	Localized numbers（本地化数字）
	此类的一个实例能够以标准格式以及扫描器区域设置（locale）的格式扫描数字。扫描器的初始区域设置是由Locale.getDefault(Locale.Category.FORMAT)方法返回的值；它可以通过useLocale(java.util.Locale)方法进行更改。reset()方法将扫描程序区域设置的值重置为初始区域设置，而不管它以前是否被更改过。
	本地化格式是根据以下参数定义的，对于特定区域设置，这些参数取自该区域设置的DecimalFormat对象df及其DecimalFormatSymbols对象dfs。
		● LocalGroupSeparator(本地化组分隔符)	
			用于分隔数千个组的字符，即dfs.getGroupingSeparator()	
		● LocalDecimalSeparator（本地小数分隔符）	
			用于小数点的字符，即dfs.getDecimalSeparator()
		● localpositiveprefix（本地化正数前缀）		
			出现在正数之前的字符串（可能为空），即df.getPositivePrefix()		
		● LocalPositiveSuffix（本地化正数后缀	）	
			出现在正数之后的字符串（可能为空），即df.getPositiveSuffix()	
		● LocalNegativePrefix（本地化负数前缀）	
			出现在负数之前的字符串（可能为空），即df.getNegativePrefix()
		● LocalNegativeSuffix（本地化负数后缀）	
			出现在负数之后的字符串（可能为空），即df.getNegativeSuffix()		
		● LocalNaN（本地化NaN） 	
			表示浮点值非数字的字符串，即dfs.getNaN()	
		● LocalInfinity（本地化无穷大）	
			表示浮点值无穷大的字符串，即dfs.getInfinity()	
	Number syntax（数字语法）
	可以由此类的实例解析为数字的字符串按照以下正则表达式语法指定，其中Rmax是所用基数中的最高数字（例如，Rmax是以10为基数的9）。
		NonAsciiDigit（非ASCII码数字）:
			对应一个非ASCII码“c”，Character.isDigit(c)返回true。
		Non0Digit（非零数字）:
			[1-Rmax] | NonASCIIDigit
		Digit（数字）:
			[0-Rmax] | NonASCIIDigit
		GroupedNumeral:
			( Non0Digit Digit? Digit?  ( LocalGroupSeparator Digit Digit Digit )+ )
		Numeral（数字）:
			( ( Digit+ ) | GroupedNumeral )
		Integer（整数）:
			( [-+]? ( Numeral ) ) | LocalPositivePrefix Numeral LocalPositiveSuffix | LocalNegativePrefix Numeral LocalNegativeSuffix
		DecimalNumeral（十进制数字）:
			Numeral	| Numeral LocalDecimalSeparator Digit* | LocalDecimalSeparator Digit+
		Exponent（指数）:
			( [eE] [+-]? Digit+ )
		Decimal（十进制）:
			( [-+]? DecimalNumeral Exponent? )	| LocalPositivePrefix DecimalNumeral LocalPositiveSuffix Exponent?	| LocalNegativePrefix DecimalNumeral LocalNegativeSuffix Exponent?
		HexFloat（十六进制浮点数）:
			[-+]? 0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+ ([pP][-+]?[0-9]+)?
		NonNumber（非数字）:
			NaN | LocalNan | Infinity | LocalInfinity
		SignedNonNumber（有符号的非数字）:
			( [-+]? NonNumber )	| LocalPositivePrefix NonNumber LocalPositiveSuffix	| LocalNegativePrefix NonNumber LocalNegativeSuffix
		Float（浮点数）:
			Decimal | HexFloat | SignedNonNumber
	在上面的正则表达式中，空白不重要。
		
			
		
	类定义	：public final class Scanner implements Iterator<String>, Closeable
	实现接口	：Iterator<String>, Closeable
------------------------------------------------------------------------------------------------------------------------------------------------------		
Constructor Summary（构造器概要）：
	public Scanner(File source)
		构造一个新的扫描程序，该扫描程序生成从指定文件扫描。文件中的字节使用底层平台的默认字符集转换为字符。
		【Throws】：
			FileNotFoundException 如果source没有找到
	public Scanner(File source, String charsetName)
		构造一个新的扫描程序，该扫描程序生成从指定文件扫描。文件中的字节将使用指定的字符集转换为字符。
		【Throws】：
			FileNotFoundException 如果source没有找到
			IllegalArgumentException 如果找不到指定的编码
	public Scanner(InputStream source)
		构造一个新的扫描器，该扫描器生成从指定输入流扫描。流中的字节使用底层平台的默认字符集转换为字符。
	public Scanner(InputStream source, String charsetName)
		构造一个新的扫描器，该扫描器生成从指定输入流扫描。流中的字节使用指定的字符集转换为字符。
		【Throws】：
			IllegalArgumentException 如果找不到指定的编码
	public Scanner(Readable source)
		构造一个新的扫描程序，该扫描程序生成从指定源扫描。
	public Scanner(String source)
		构造一个新的扫描程序，该扫描程序生成从指定字符串扫描。
	public Scanner(ReadableByteChannel source)
		构造一个新的扫描器，该扫描器生成从指定通道扫描。源中的字节使用底层平台的默认字符集转换为字符。
	public Scanner(ReadableByteChannel source, String charsetName)
		构造一个新的扫描器，该扫描器生成从指定通道扫描的值。源中的字节将使用指定的字符集转换为字符。
		【Throws】：
			IllegalArgumentException 如果指定的字符集不存在
	public Scanner(Path source)
		构造一个新的扫描程序，该扫描程序生成从指定文件扫描。文件中的字节使用底层平台的默认字符集转换为字符。
		【Throws】：
			IOException 如果打开源时发生I/O错误
	public Scanner(Path source, String charsetName)
		构造一个新的扫描程序，该扫描程序生成从指定文件扫描值。文件中的字节将使用指定的字符集转换为字符。
		【Throws】：
			IOException 如果打开源时发生I/O错误
			IllegalArgumentException 如果指定的字符集不存在
Method Summary（方法概要）：
	close():void 
		如果这个扫描器还没有关闭，那么如果它的底层可读性也实现了Closeable的接口，那么将调用可读性的close方法。如果这个扫描器已经关闭，那么调用这个方法将没有效果。
		关闭扫描器后尝试执行检索操作将导致IllegalStateException。
	delimiter():Pattern 
		返回此扫描器当前用于匹配分隔符的模式。
	findInLine(String pattern):String 
		尝试查找从指定字符串构造的模式的下一个匹配项，忽略分隔符。
		对findInLine(pattern)形式的此方法的调用与调用findInLine(Pattern.compile(pattern))的行为完全相同。
		【Throws】：
			IllegalStateException 如果scanner被关闭
	findInLine(Pattern pattern):String 
		尝试查找指定模式的下一个匹配项，忽略分隔符。如果在下一行分隔符之前找到模式，则扫描器将前进到匹配的输入之前，并返回匹配该模式的字符串。如果在下一行分隔符之前的输入中没有检测到这样的模式，则返回null值，并且扫描器的位置不变。此方法可能会阻塞等待与模式匹配的输入。
		由于此方法继续搜索输入以查找指定的模式，因此如果不存在行分隔符，它可能会缓冲所有搜索所需标记的输入。
		【Throws】：
			IllegalStateException 如果scanner被关闭
	findWithinHorizon(String pattern, int horizon):String 
		尝试查找从指定字符串构造的模式的下一个匹配项，忽略分隔符。
		对模式为findWithinHorizon(pattern)的此方法的调用与调用findWithinHorizon(Pattern.compile(pattern, horizon))的行为完全相同。
		【Throws】：
			IllegalStateException 如果scanner被关闭
			IllegalArgumentException 如果horizon为负数
	findWithinHorizon(Pattern pattern, int horizon):String 
		尝试查找指定模式的下一个匹配项。
		此方法通过输入搜索到指定的搜索范围，忽略分隔符。如果发现模式，扫描器将前进超过匹配的输入，并返回匹配该模式的字符串。如果没有检测到这样的模式，则返回null，并且扫描器的位置保持不变。此方法可能会阻止等待与模式匹配的输入。
		扫描器将永远不会搜索超过其当前位置的horizon代码点。请注意，匹配可能被horizon裁剪；也就是说，如果horizon更大，任意匹配结果可能会有所不同。扫描器将horizon视为透明的非锚定边界（请参见Matcher.useTransparentBounds(boolean)和Matcher.useAnchoringBounds(boolean))。
		如果horizon为0，则忽略horizon，此方法继续通过输入搜索指定的模式，而不进行绑定。在这种情况下，它可以缓冲搜索模式的所有输入。
		如果horizon为负，则引发IllegalArgumentException异常。
		【Throws】：
			IllegalStateException 如果scanner被关闭
			IllegalArgumentException 如果horizon为负数
	hasNext():boolean 
		△ 如果此扫描器的输入中有其他标记，则返回true。此方法可能会在等待输入扫描时阻塞。扫描器不会超出任何输入。
	hasNext(String pattern):boolean 
		如果下一个标记与从指定字符串构造的模式匹配，则返回true。扫描器不会超出任何输入。
		对hasNext(pattern)模式的此方法的调用与调用hasNext(Pattern.compile(pattern))的操作完全相同。
		【Throws】：
			IllegalStateException 如果scanner被关闭
	hasNext(Pattern pattern):boolean 
		如果下一个完整标记与指定模式匹配，则返回true。完整的标记由匹配分隔符模式的输入进行前缀和后缀固定。此方法在等待输入时可能会阻塞。扫描器不会超过任何输入。
		【Throws】：
			IllegalStateException 如果scanner被关闭
	hasNextBigDecimal():boolean 
		如果使用nextBigDecimal()方法可以将此扫描器输入中的下一个标记解释为BigDecimal，则返回true。扫描器不会超过任何输入。
		【Throws】：
			IllegalStateException 如果scanner被关闭
	hasNextBigInteger():boolean 
		如果使用nextBigInteger()方法可以将此扫描器输入中的下一个标记解释为BigInteger，则返回true。扫描器不会超过任何输入。
		【Throws】：
			IllegalStateException 如果scanner被关闭
	hasNextBigInteger(int radix):boolean 
		如果使用nextBigInteger()方法可以将此扫描器输入中的下一个标记解释为指定基数中的BigInteger，则返回true。扫描器不会超过任何输入。
		【Throws】：
			IllegalStateException 如果scanner被关闭
	hasNextBoolean():boolean 
		如果可以使用从字符串“true|false”创建的不区分大小写的模式将此扫描器输入中的下一个标记解释为布尔值，则返回true。扫描器没有超过匹配的输入。
		【Throws】：
			IllegalStateException 如果scanner被关闭
	hasNextByte():boolean 
		如果使用nextByte()方法可以将此扫描器输入中的下一个标记解释为默认基数中的字节值，则返回true。扫描器不会超过任何输入。
		【Throws】：
			IllegalStateException 如果scanner被关闭
	hasNextByte(int radix):boolean 
		如果使用nextByte()方法可以将此扫描器输入中的下一个标记解释为指定基数中的字节值，则返回true。扫描器不会超过任何输入。
		【Throws】：
			IllegalStateException 如果scanner被关闭
	hasNextDouble():boolean 
		如果使用nextDouble()方法可以将此扫描器输入中的下一个标记解释为默认基数中的double值，则返回true。扫描器不会超过任何输入。
		【Throws】：
			IllegalStateException 如果scanner被关闭
	hasNextFloat():boolean
		如果使用nextFloat()方法可以将此扫描器输入中的下一个标记解释为默认基数中的浮点数值，则返回true。扫描器不会超过任何输入。
		【Throws】：
			IllegalStateException 如果scanner被关闭 
	hasNextInt():boolean 
		如果使用nextInt()方法可以将此扫描器输入中的下一个标记解释为默认基数中的int值，则返回true。扫描器不会超过任何输入。
		【Throws】：
			IllegalStateException 如果scanner被关闭 
	hasNextInt(int radix):boolean 
		如果使用nextInt()方法可以将此扫描器输入中的下一个标记解释为指定基数中的int值，则返回true。扫描器不会超过任何输入。
		【Throws】：
			IllegalStateException 如果scanner被关闭 
	hasNextLine():boolean 
		如果此扫描器的输入中有另一行，则返回“true”。此方法在等待输入时可能会阻塞。扫描器不会超过任何输入。
		【Throws】：
			IllegalStateException 如果scanner被关闭 
	hasNextLong():boolean 
		如果使用nextLong()方法可以将此扫描器输入中的下一个标记解释为默认基数中的long值，则返回true。扫描器不会超过任何输入。
		【Throws】：
			IllegalStateException 如果scanner被关闭 
	hasNextLong(int radix):boolean 
		如果使用nextLong()方法可以将此扫描器输入中的下一个标记解释为指定基数中的long值，则返回true。扫描器不会超过任何输入。
		【Throws】：
			IllegalStateException 如果scanner被关闭 
	hasNextShort():boolean 
		如果使用nextShort()方法可以将此扫描器输入中的下一个标记解释为默认基数中的short值，则返回true。扫描器不会超过任何输入。
		【Throws】：
			IllegalStateException 如果scanner被关闭 
	hasNextShort(int radix):boolean 
		如果使用nextShort()方法可以将此扫描器输入中的下一个标记解释为指定基数中的short值，则返回true。扫描器不会超过任何输入。
		【Throws】：
			IllegalStateException 如果scanner被关闭 
	ioException():IOException 
		返回此扫描器的底层Readable最近抛出的IOException。如果不存在此类异常，则此方法返回null。
	locale():Locale 
		返回此扫描器的区域设置（locale）。
		扫描器的区域设置会影响其默认基元匹配正则表达式的许多元素；请参见上面的本地化数字。
	match():MatchResult 
		返回此扫描器上次执行扫描操作的匹配结果。如果没有执行匹配，或者最后一次匹配不成功，则此方法将引发IllegalStateException。
		扫描器的各种next方法使匹配结果在不引发异常的情况下完成时可用。
		例如，在调用返回int的nextInt()方法后，此方法返回一个匹配结果，用于搜索上面定义的整数正则表达式。同样，如果成功，findInLine(java.lang.String)、findWithinHorizon(java.lang.String, int)和skip(java.util.regex.Pattern)方法将使匹配可用。
		【Throws】：
			IllegalStateException 如果没有匹配结果可用
	next():String 
		△ 查找并返回来自此扫描器的下一个完整标记。完整标记的前面和后面是与分隔符模式匹配的输入。此方法可能会在等待输入扫描时阻塞，即使之前对hasNext()的调用返回了true。
		【Throws】：
			NoSuchElementException 如果没有更多的标记可用
			IllegalStateException 如果scanner被关闭 
	next(String pattern):String 
		如果下一个标记与从指定字符串构造的模式匹配，则返回该标记。如果匹配成功，扫描器将前进超过匹配模式的输入。
		【Throws】：
			NoSuchElementException 如果没有更多的标记可用
			IllegalStateException 如果scanner被关闭 
	next(Pattern pattern):String 
		如果下一个标记与指定的模式匹配，则返回该标记。此方法可能会在等待输入扫描时阻塞，即使之前对hasNext（pattern）的调用返回了true。如果匹配成功，扫描器将前进超过匹配模式的输入。
		【Throws】：
			NoSuchElementException 如果没有更多的标记可用
			IllegalStateException 如果scanner被关闭 
	nextBigDecimal():BigDecimal 
		以BigDecimal模式扫描输入的下一个标记。
		如果下一个标记与上面定义的Decimal正则表达式匹配，则该标记将转换为BigDecimal值，就像删除所有组分隔符一样，通过Character.digit将非ASCII数字映射为ASCII数字，并将生成的字符串传递给BigDecimal(String)构造函数。
		【Throws】：
			InputMismatchException 如果下一个标记不匹配Decimal正则表达式，或超出范围
			NoSuchElementException 如果没有更多的标记可用
			IllegalStateException 如果scanner被关闭 
	nextBigInteger():BigInteger 
		以BigInteger形式扫描输入的下一个标记。
		对该方法的nextBigInteger()形式的调用与调用nextBigInteger(radix)的操作完全相同，其中基数是该扫描程序的默认基数。
	nextBigInteger(int radix):BigInteger 
		以BigInteger形式扫描输入的下一个标记。
		如果下一个标记与上面定义的Integer正则表达式匹配，则该标记将转换为BigInteger值，就像删除所有组分隔符一样，通过Character.digit将非ASCII数字映射为ASCII数字，并使用指定的基数将生成的字符串传递给BigInteger(String)构造函数。
		【Throws】：
			InputMismatchException 如果下一个标记不匹配BigInteger正则表达式，或超出范围
			NoSuchElementException 如果没有更多的标记可用
			IllegalStateException 如果scanner被关闭 
	nextBoolean():boolean 
		将输入的下一个标记扫描为boolean值并返回该值。如果下一个标记无法转换为有效的boolean值，则此方法将引发InputMismatchException。如果匹配成功，扫描器将前进超过匹配的输入。
		【Throws】：
			InputMismatchException 如果下一个标记是一个无效的boolean
			NoSuchElementException 如果没有更多的标记可用
			IllegalStateException 如果scanner被关闭 
	nextByte():byte 
		以字节形式扫描输入的下一个标记。
		对nextByte()形式的此方法的调用与调用nextByte(radix)的操作完全相同，其中基数是此扫描程序的默认基数。
		【Throws】：
			InputMismatchException  如果下一个标记不匹配Integer正则表达式，或超出范围
			NoSuchElementException 如果没有更多的标记可用
			IllegalStateException 如果scanner被关闭 
	nextByte(int radix):byte 
		以字节形式扫描输入的下一个标记。如果下一个标记无法转换为有效的字节值，则此方法将引发InputMismatchException异常，如下所述。如果转换成功，扫描器将前进超过匹配的输入。
		如果下一个标记与上面定义的Integer正则表达式匹配，则该标记将转换为字节值，就像删除所有特定于区域设置的前缀、组分隔符和特定于区域设置的后缀一样，然后通过Character.digit将非ASCII数字映射为ASCII数字，如果存在特定于区域设置的负前缀和后缀，则在前面加一个负号（-），并将生成的字符串用指定的基数传递给Byte.parseByte。
		【Throws】：
			InputMismatchException  如果下一个标记不匹配Integer正则表达式，或超出范围
			NoSuchElementException 如果没有更多的标记可用
			IllegalStateException 如果scanner被关闭 
	nextDouble():double 
		以double形式扫描输入的下一个标记。如果下一个标记无法转换为有效的double值，则此方法将引发InputMismatchException异常，如下所述。如果转换成功，扫描器将前进超过匹配的输入。
		如果下一个标记与上面定义的float正则表达式匹配，则该标记将转换为double值，就像删除所有特定于区域设置的前缀、组分隔符和特定于区域设置的后缀一样，然后通过Character.digit将非ASCII数字映射为ASCII数字，如果存在特定于区域设置的负前缀和后缀，则在前面加一个负号（-），并将生成的字符串传递给Double.parseDouble。如果标记与本地化的NaN或无穷大字符串匹配，则根据需要将“NaN”或“Infinity”传递给Double.ParseDouble。
		【Throws】：
			InputMismatchException  如果下一个标记不匹配Integer正则表达式，或超出范围
			NoSuchElementException 如果没有更多的标记可用
			IllegalStateException 如果scanner被关闭 
	nextFloat():float 
		以浮点数形式扫描输入的下一个标记。如果下一个标记无法转换为有效的浮点值，则此方法将引发InputMismatchException异常，如下所述。如果转换成功，扫描器将前进超过匹配的输入。
		如果下一个标记与上面定义的float正则表达式匹配，则该标记将转换为浮点值，就像删除所有特定于区域设置的前缀、组分隔符和特定于区域设置的后缀一样，然后通过Character.digit将非ASCII数字映射为ASCII数字，如果存在特定于区域设置的负前缀和后缀，则在前面加一个负号（-），并将生成的字符串传递给Float.parseFloat。如果标记与本地化的NaN或无穷大字符串匹配，则根据需要将“NaN”或“Infinity”传递给Float.parseFloat。
		【Throws】：
			InputMismatchException  如果下一个标记不匹配Integer正则表达式，或超出范围
			NoSuchElementException 如果没有更多的标记可用
			IllegalStateException 如果scanner被关闭 
	nextInt():int 
		以int形式扫描输入的下一个标记。
		对nextInt()形式的此方法的调用与调用nextInt(radix)的操作完全相同，其中基数是此扫描程序的默认基数。
		【Throws】：
			InputMismatchException  如果下一个标记不匹配Integer正则表达式，或超出范围
			NoSuchElementException 如果没有更多的标记可用
			IllegalStateException 如果scanner被关闭 
	nextInt(int radix):int 
		以int形式扫描输入的下一个标记。如果下一个标记无法转换为有效的int值，则此方法将引发InputMismatchException异常，如下所述。如果转换成功，扫描器将前进超过匹配的输入。
		如果下一个标记与上面定义的Integer正则表达式匹配，则该标记将转换为int值，就像删除所有特定于区域设置的前缀、组分隔符和特定于区域设置的后缀一样，然后通过Character.digit将非ASCII数字映射为ASCII数字，如果存在特定于区域设置的负前缀和后缀，则在前面加一个负号（-），并将生成的字符串传递给Integer.parseInt。
		【Throws】：
			InputMismatchException  如果下一个标记不匹配Integer正则表达式，或超出范围
			NoSuchElementException 如果没有更多的标记可用
			IllegalStateException 如果scanner被关闭 
	nextLine():String 
		将此扫描器推进到当前行之后，并返回跳过的输入。此方法返回当前行除了末尾任何行分隔符的其余部分。位置设置为下一行的开始。
		由于此方法继续在输入中搜索行分隔符，因此如果不存在行分隔符，它可能会缓冲所有搜索要跳过的行的输入。
		【Throws】：
			NoSuchElementException 如果line没有找到
			IllegalStateException 如果scanner被关闭 
	nextLong():long 
		以long形式扫描输入的下一个标记。
		对nextLong()形式的此方法的调用与调用nextLong(radix)的操作完全相同，其中基数是此扫描程序的默认基数。
		【Throws】：
			InputMismatchException  如果下一个标记不匹配Integer正则表达式，或超出范围
			NoSuchElementException 如果没有更多的标记可用
			IllegalStateException 如果scanner被关闭 
	nextLong(int radix):long 
		以long形式扫描输入的下一个标记。如果下一个标记无法转换为有效的long值，则此方法将引发InputMismatchException异常，如下所述。如果转换成功，扫描器将前进超过匹配的输入。
		如果下一个标记与上面定义的Integer正则表达式匹配，则该标记将转换为long值，就像删除所有特定于区域设置的前缀、组分隔符和特定于区域设置的后缀一样，然后通过Character.digit将非ASCII数字映射为ASCII数字，如果存在特定于区域设置的负前缀和后缀，则在前面加一个负号（-），并将生成的字符串传递给Long.parseLong。
		【Throws】：
			InputMismatchException  如果下一个标记不匹配Integer正则表达式，或超出范围
			NoSuchElementException 如果没有更多的标记可用
			IllegalStateException 如果scanner被关闭 
	nextShort():short 
		以short形式扫描输入的下一个标记。
		对nextShort()形式的此方法的调用与调用nextShort(radix)的操作完全相同，其中基数是此扫描程序的默认基数。
		【Throws】：
			InputMismatchException  如果下一个标记不匹配Integer正则表达式，或超出范围
			NoSuchElementException 如果没有更多的标记可用
			IllegalStateException 如果scanner被关闭 
	nextShort(int radix):short 
		以short形式扫描输入的下一个标记。如果下一个标记无法转换为有效的short值，则此方法将引发InputMismatchException异常，如下所述。如果转换成功，扫描器将前进超过匹配的输入。
		如果下一个标记与上面定义的Integer正则表达式匹配，则该标记将转换为short值，就像删除所有特定于区域设置的前缀、组分隔符和特定于区域设置的后缀一样，然后通过Character.digit将非ASCII数字映射为ASCII数字，如果存在特定于区域设置的负前缀和后缀，则在前面加一个负号（-），并将生成的字符串传递给Short.parseShort。
		【Throws】：
			InputMismatchException  如果下一个标记不匹配Integer正则表达式，或超出范围
			NoSuchElementException 如果没有更多的标记可用
			IllegalStateException 如果scanner被关闭 
	radix():int 
		返回扫描器的默认基数。
		扫描器的基数影响其默认数字匹配正则表达式的元素；请参见上面的本地化数字。
	remove():void 
		△ 迭代器的此实现不支持移除操作。
		【Throws】：
			UnsupportedOperationException 如果调用此方法。（此类没有实现具体功能代码）
	reset():Scanner 
		重置此扫描器。
		重置使扫描器丢弃所有显式状态信息，这些状态信息可能是通过useDelimiter(java.util.regex.Pattern)、useLocale(java.util.Locale)或useRadix(int)调用而改变的。
		对scanner.reset()形式的此方法的调用与以下调用的行为完全相同。
			scanner.useDelimiter("\\p{javaWhitespace}+").useLocale(Locale.getDefault(Locale.Category.FORMAT)).useRadix(10);
	skip(String pattern):Scanner 
		跳过指定字符串构造的模式匹配的输入。
		对skip(pattern)形式的这种方法的调用与调用skip(Pattern.compile(pattern))的行为完全相同。
		【Throws】：
			IllegalStateException 如果scanner被关闭 
	skip(Pattern pattern):Scanner 
		跳过与指定模式匹配的输入，忽略分隔符。如果指定模式的锚定匹配成功，此方法将跳过输入。
		如果在当前位置找不到与指定模式的匹配，则不会跳过任何输入，并引发NoSuchElementException异常。
		由于此方法试图匹配从扫描器当前位置开始的指定模式，因此可以匹配大量输入的模式（例如".*"）可能会导致扫描器缓冲大量输入。
		请注意，通过使用不匹配任何内容的模式（例如sc.skip("[ \t]*")），可以跳过某些内容而不冒抛出NoSuchElementException的风险。
		【Throws】：
			NoSuchElementException 如果找不到指定的模式
			IllegalStateException 如果scanner被关闭 
	toString():String 
		△ 返回此扫描器的字符串表示形式。扫描器的字符串表示形式包含可能对调试有用的信息。未指定确切格式。
	useDelimiter(String pattern):Scanner 
		将此扫描器的分隔模式设置为从指定字符串构造的模式。
		对useDelimiter(pattern)形式的此方法的调用与调用useDelimiter(Pattern.compile(pattern))的行为完全相同。
		调用reset()方法会将扫描器的分隔符设置为默认值。
	useDelimiter(Pattern pattern):Scanner 
		 将此扫描器的分隔模式设置为指定的模式。
	useLocale(Locale locale):Scanner 
		将此扫描器的区域设置为指定的区域设置。
		扫描器的区域设置会影响其默认基元匹配正则表达式的许多元素；请参见上面的本地化数字。
		调用 reset()方法会将扫描器的区域设置为初始区域设置。
	useRadix(int radix):Scanner 
		将此扫描器的默认基数设置为指定的基数。
		扫描器的基数影响其默认数字匹配正则表达式的元素；请参见上面的本地化数字。
		如果基数小于character.min基数或大于character.max基数，则引发IllegalArgumentException。
		调用reset()方法将扫描器的基数设置为10。
		【Throws】：
			IllegalArgumentException 如果基数超出范围
------------------------------------------------------------------------------------------------------------------------------------------------------
附录：
	1、注：文档中的☆符号已过时或淘汰掉的方法。
	2、注：文档中的△符号表示覆盖重写方法。
	3、'::' 关键字：	双冒号可以访问类的构造方法，对象方法，静态方法。就是把方法当做参数传到stream内部，使stream的每个元素都传入到该方法里面执行一下。
	4、单实例：（即单例设计模式）。“一个类有且仅有一个实例，并且自行实例化向整个系统提供。”单例模式是设计模式中最简单的形式之一。这一模式的目的是使得类的一个对象成为系统中的唯一实例。要实现这一点，可以从客户端对其进行实例化开始。因此需要用一种只允许生成对象类的唯一实例的机制，“阻止”所有想要生成对象的访问。使用工厂方法来限制实例化过程。这个方法应该是静态方法（类方法），因为让类的实例去生成另一个唯一实例毫无意义。
	






















