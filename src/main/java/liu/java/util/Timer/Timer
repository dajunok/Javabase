-------------------------------------Timer-----------------------------------------------------------------------------------------------------------------------------------
Timer：计时器（定时器）。【since JDK1.3】
	线程在后台线程中调度任务以供将来执行的功能。任务可以安排为一次性执行，也可以定期重复执行。
	与每个Timer对象对应的是一个单独的后台线程，用于按顺序执行计时器的所有任务。计时器任务应该很快完成。如果一个计时器任务需要过多的时间来完成，它会“占用”计时器的任务执行线程。这反过来又会延迟后续任务的执行，当（如果）违规任务最终完成时，这些任务可能会“聚集”并快速连续执行。
	在对Timer对象的最后一个实时引用结束并且所有未完成的任务都已完成执行之后，计时器的任务执行线程将优雅地终止（并成为垃圾收集的对象）。然而，这可能需要任意长的时间才能发生。默认情况下，任务执行线程不作为守护进程线程运行，因此它能够防止应用程序终止。如果调用方希望快速终止计时器的任务执行线程，则调用方应调用计时器的cancel方法。
	如果计时器的任务执行线程意外终止，例如，因为调用了其stop方法，则进一步尝试在计时器上调度任务将导致IllegalStateException异常，就像调用了计时器的cancel方法一样。
	这个类是线程安全的：多个线程可以共享一个Timer对象，而不需要外部同步。
	此类不提供实时保证：它使用Object.wait(long)方法调度任务。
	Java 5引入了java.util.concurrent包，其中的一个并发实用程序是ScheduledThreadPoolExecutor，它是一个线程池，用于以给定的速率或延迟重复执行任务。它实际上是Timer/TimerTask组合的更通用的替代品，因为它允许多个服务线程，接受不同的时间单位，并且不需要TimerTask（只需实现Runnable接口）子类。将ScheduledThreadPoolExecutor配置为一个线程使其等效于Timer。
	实现注意：这个类可扩展为大量并发计划的任务（数千个任务应该没有问题）。在内部，它使用二进制堆来表示其任务队列，因此调度任务的成本是O(log n)，其中n是并发调度任务的数量。
	实现说明：所有构造函数都启动一个计时器线程。
	
	类定义	：public class Timer
------------------------------------------------------------------------------------------------------------------------------------------------------
Constructor Summary（构造器概要）：
	public Timer()
		创建新计时器。关联的线程不作为守护程序运行。
	Timer(boolean isDaemon)
		创建一个新的计时器，该计时器的关联线程可以指定为作为守护进程运行。如果计时器将用于计划重复的“维护活动”，则会调用守护进程线程，只要应用程序正在运行，就必须执行这些活动，但不应延长应用程序的寿命。
	Timer(String name)
		创建关联线程具有指定名称的新计时器。关联的线程不作为守护程序运行。
		【Throws】：
			NullPointerException 如果name为null
	Timer(String name, boolean isDaemon)
		创建一个新的计时器，该计时器的关联线程具有指定的名称，并且可以指定为作为守护进程运行。
		【Throws】：
			NullPointerException 如果name为null

Method Summary（方法概要）：
	cancel():void 
		终止此计时器，放弃当前计划的任何任务。不干扰当前正在执行的任务（如果存在）。一旦计时器被终止，它的执行线程就会优雅地终止，并且不能在其上调度更多的任务。
		请注意，从该计时器调用的计时器任务的run方法中调用此方法绝对可以确保正在进行的任务执行是该计时器将执行的最后一个任务执行。
		此方法可以重复调用；第二次和后续调用无效。
	purge():int 
		从计时器的任务队列中删除所有已取消的任务。调用此方法不会影响计时器的行为，但会从队列中删除对已取消任务的引用。如果没有对这些任务的外部引用，它们就可以进行垃圾收集。
		大多数程序将不需要调用此方法。它是为很少取消大量任务的应用程序而设计的。调用此方法会以时间换取空间：方法的运行时可能与n + c log n成比例，其中n是队列中的任务数，c是取消的任务数。
		请注意，允许在此计时器上计划的任务中调用此方法。
	schedule(TimerTask task, Date time):void 
		安排指定任务在指定时间执行。如果时间是过去的，则计划立即执行任务。
		【Throws】：
			IllegalArgumentException 如果time.getTime()为负。
			IllegalStateException 如果任务已被调度或取消，则计时器被取消，或计时器线程终止。
			NullPointerException 如果task或time为null
	schedule(TimerTask task, Date firstTime, long period):void 
		从指定的时间开始（firstTime），为重复的固定延迟执行计划指定的任务。随后的执行大约以固定的时间间隔（period）进行，以指定的时间间隔分隔。
		在固定延迟执行中，每个执行都是相对于上一次执行的实际执行时间进行调度的。如果由于任何原因（如垃圾收集或其他后台活动）延迟执行，则后续执行也将延迟。从长远来看，执行频率通常会略低于指定周期的倒数（假设Object.wait(long)底层的系统时钟是准确的）。因此，如果调度计划的首次是在过去，则计划立即执行。
		固定延迟执行适用于需要“平滑度”的重复性活动。换句话说，它适用于短期内保持频率准确比长期内更重要的活动。这包括大多数动画任务，例如定期闪烁光标。它还包括一些任务，在这些任务中，为了响应人类输入而执行常规活动，例如，只要按住一个键，就会自动重复一个字符。
		【Throws】：
			IllegalArgumentException 如果firstTime.getTime() < 0或者period <= 0。
			IllegalStateException 如果任务已被调度或取消，则计时器被取消，或计时器线程终止。
			NullPointerException 如果task或firstTime为null
	schedule(TimerTask task, long delay):void 
		在指定的延迟之后计划执行指定的任务。
		【Throws】：
			IllegalArgumentException 如果delay为负数，或者delay + System.currentTimeMillis()等于负数。
			IllegalStateException 如果任务已被调度或取消，则计时器被取消，或计时器线程终止。
			NullPointerException 如果task为null
	schedule(TimerTask task, long delay, long period):void 
		为重复的固定延迟执行调度指定的任务，从指定的延迟（delay）之后开始。随后的执行大约按规定的时间间隔（period）进行。
		在固定延迟执行中，每个执行都是相对于上一次执行的实际执行时间进行调度的。如果由于任何原因（如垃圾收集或其他后台活动）延迟执行，则后续执行也将延迟。从长远来看，执行频率通常会略低于指定周期的倒数（假设Object.wait(long)底层的系统时钟是准确的）
		固定延迟执行适用于需要“平滑度”的重复性活动。换句话说，它适用于短期内保持频率准确比长期内更重要的活动。这包括大多数动画任务，例如定期闪烁光标。它还包括一些任务，在这些任务中，为了响应人类输入而执行常规活动，例如，只要按住一个键，就会自动重复一个字符。
		【Throws】：
			IllegalArgumentException 如果delay为负数，或者delay + System.currentTimeMillis()等于负数，或者period <= 0。
			IllegalStateException 如果任务已被调度或取消，则计时器被取消，或计时器线程终止。
			NullPointerException 如果task或firstTime为null
	scheduleAtFixedRate(TimerTask task, Date firstTime,long period):void 
		从指定的时间开始（firstTime），为重复的固定速率执行计划指定的任务。随后的执行大约以固定的时间间隔（period）进行，以指定的时间间隔分隔。
		在固定速率执行中，每个执行都是相对于初始执行的计划执行时间来计划的。如果一个执行由于任何原因（如垃圾收集或其他后台活动）被延迟，两个或多个执行将快速连续发生以“赶上”。从长远来看，执行频率将正好是指定时间段的倒数（假设Object.wait(long)底层的系统时钟是准确的）。因此，如果调度计划的首次是在过去，那么任何“错过”的执行都将被计划为立即“赶超”执行。
		固定速率执行适用于对绝对时间敏感的重复活动，例如每小时响一次钟声或每天在特定时间运行计划维护。它也适用于执行固定次数的总时间很重要的重复活动，例如倒计时计时器，每秒钟计时一次，持续10秒。最后，固定速率执行适合于调度必须保持彼此同步的多个重复计时器任务。
		【Throws】：
			IllegalArgumentException 如果firstTime.getTime() < 0或者period <= 0。
			IllegalStateException 如果任务已被调度或取消，则计时器被取消，或计时器线程终止。
			NullPointerException 如果task或firstTime为null
	scheduleAtFixedRate(TimerTask task, long delay, long period):void 
		为指定的任务安排重复的固定速率执行，从指定的延迟（delay）之后开始。随后的执行大约以固定的时间间隔（period）进行，以指定的时间间隔分隔。
		在固定速率执行中，每个执行都是相对于初始执行的计划执行时间来计划的。如果一个执行由于任何原因（如垃圾收集或其他后台活动）被延迟，两个或多个执行将快速连续发生以“赶上”。从长远来看，执行频率将正好是指定时间段的倒数（假设Object.wait(long)底层的系统时钟是准确的）。
		固定速率执行适用于对绝对时间敏感的重复活动，例如每小时响一次钟声或每天在特定时间运行计划维护。它也适用于执行固定次数的总时间很重要的重复活动，例如倒计时计时器，每秒钟计时一次，持续10秒。最后，固定速率执行适合于调度必须保持彼此同步的多个重复计时器任务。
		【Throws】：
			IllegalArgumentException 如果delay为负数，或者delay + System.currentTimeMillis()等于负数，或者period <= 0。
			IllegalStateException 如果任务已被调度或取消，则计时器被取消，或计时器线程终止。
			NullPointerException 如果task或firstTime为null
------------------------------------------------------------------------------------------------------------------------------------------------------
附录：
	1、注：文档中的△符号表示覆盖重写方法。	
	2、注：文档中的★符号表示抽象方法或者直接抛出UnsupportedOperationException异常的方法，总之没有实现具体功能代码的方法。

















