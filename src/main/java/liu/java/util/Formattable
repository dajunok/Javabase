-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Formattable：可格式化接口。【Since:1.5】
	任何需要使用Formatter的“s”转换说明符，执行自定义格式化的类，都必须实现Formattable接口。这个接口允许对任意对象进行格式化的基本控制。
	格式化表不一定对多线程访问安全。线程安全是可选的，可以由扩展和实现此接口的类来强制执行。
	
	接口定义：public interface Formattable		
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	formatTo(Formatter formatter, int flags, int width, int precision):void 
		使用formatter格式化对象。
		【Throws】：
			● IllegalFormatException 如果任何参数无效。（有关所有可能的格式错误的规范，请参阅格式化程序类规范的详细信息部分）
	参数说明：
		● formatter 格式化程序。实现类可以调用formatter.out()或formatter.locale()来分别获取此formatter使用的Appendable或Locale。
		● flags		修改输出格式的标志。该值被解释为位掩码。可以设置以下标志的任意组合：FormattableFlags.LEFT_JUSTIFY、FormattableFlags.UPPERCASE、FormattableFlags.ALTERNATE。如果没有设置标志，将使用实现类的默认格式。
		● width		输出的最小字符数（宽度）。如果转换值的长度小于width，则输出将被' '填充，直到字符总数等于width。默认在开头填充。如果设置了FormattableFlags.LEFT_JUSTIFY标志，则填充将位于末尾。如果宽度为-1，则没有最小值。
		● precision 输出的最大字符数（精度）。精度在宽度之前应用，因此即使宽度大于精度，输出也将被截断为精度字符。如果精度为-1，则字符数没有明确限制。
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
附录：
	1、bitmask：位掩码。它是一个表达特殊含义的整数。整数的每一位代表一个boolean类型的字段，二进制0表示false，1表示true。
		例如：用一个4位二进制整数表示对数据表的操作权限：查询（ALLOW_SELECT）、添加（ALLOW_INSERT）、修改（ALLOW_UPDATE）、删除（ALLOW_DELETE）
		public class NewPermission {
			public static final int ALLOW_SELECT = 1 << 0; // 0001	对应十进制	1
			public static final int ALLOW_INSERT = 1 << 1; // 0010	对应十进制	2
			public static final int ALLOW_UPDATE = 1 << 2; // 0100	对应十进制	4
			public static final int ALLOW_DELETE = 1 << 3; // 1000	对应十进制	8
			private int flag;
			// 重新设置权限
			public void setPermission(int permission) {
				flag = permission;
			}		 
			//添加一项或多项权限
			public void enable(int permission) {flag |= permission;	}			
			//删除一项或多项权限
			public void disable(int permission) {	flag &= ~permission;}
			//是否拥某些权限
			public boolean isAllow(int permission) {return (flag & permission) == permission;}
			//是否禁用了某些权限
			public boolean isNotAllow(int permission) {	return (flag & permission) == 0;}
			//是否仅仅拥有某些权限
			public boolean isOnlyAllow(int permission) {return flag == permission;}
		}
		
		
		





















	