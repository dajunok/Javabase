-------------------------------------------Hashtable<K,V>-----------------------------------------------------------------------------------------------------------
Hashtable<K,V>：哈希表。【since JDK1.0】
	此类实现一个哈希表，该表将键映射到值。任何非空对象都可以用作键或值。
	要成功存储和检索哈希表中的对象，用作键的对象必须实现hashCode方法和equals方法。
	Hashtable实例有两个影响其性能的参数：初始容量和负载系数。容量是哈希表中的存储bucket数，初始容量只是创建哈希表时的容量。注意散列表是打开的：在“散列冲突”的情况下，单个bucket存储多个条目，必须按顺序搜索。加载因子是一个度量散列表在自动增加其容量之前被允许达到的完整性的度量。初始容量和负载系数参数只是实现的提示。有关何时以及是否调用rehash方法的确切细节取决于实现。
	通常，默认的负载系数（.75）在时间和空间成本之间提供了一个很好的权衡。更高的值减少了空间开销，但增加了查找条目的时间成本（这反映在大多数哈希表操作中，包括get和put）。
	最初的容量控制着浪费空间和需要重新刷新操作之间的权衡，这是非常耗时的。如果初始容量大于哈希表将包含的最大条目数除以其加载因子，则不会发生重新刷新操作。但是，将初始容量设置得太高会浪费空间。
	如果要在哈希表中创建多个条目，则使用足够大的容量创建哈希表可能会使条目插入的效率高于允许它根据需要执行自动重新刷新以增加表的效率。
	此示例创建一个数字哈希表。它使用数字的名称作为键：
		Hashtable<String, Integer> numbers = new Hashtable<String, Integer>();
		numbers.put("one", 1);
		numbers.put("two", 2);
		numbers.put("three", 3)
	要检索数字，请使用以下代码：
	   Integer n = numbers.get("two");
	   if (n != null) {
	     System.out.println("two = " + n);
	   }			
	
	这个类的所有“集合视图方法”返回的迭代器都是fail-fast机制：如果在迭代器创建后的任何时候对映射进行了结构修改，那么除了通过迭代器自己的remove方法之外，迭代器将以任何方式引发ConcurrentModificationException异常。因此，在面对并发修改时，迭代器会快速而清晰地失败，而不是在未来的不确定时间内冒任意、不确定的风险。哈希表的键和元素方法返回的枚举不会fail-fast机制。
	请注意，不能保证迭代器的fail-fast行为，因为一般来说，在不同步的并发修改的情况下，不可能做出任何硬保证。fail-fast迭代器在尽最大努力的基础上抛出ConcurrentModificationException。因此，编写一个依赖于这个异常的程序来保证其正确性是错误的：迭代器的fail-fast行为应该只用于检测错误。
	在Java 2平台V1.2中，该类被改装以实现MAP接口，使其成为Java集合框架的成员。与新的集合实现不同，哈希表是同步的。如果不需要线程安全实现，建议使用HashMap代替Hashtable。如果需要线程安全的高度并发实现，那么建议使用ConcurrentHashMap代替哈希表。	
	
	
	类定义	：public class Hashtable<K,V> extends Dictionary<K,V> implements Map<K,V>, Cloneable, java.io.Serializable
	实现接口	：Map<K,V>, Cloneable, java.io.Serializable
	子类		：Properties, UIDefaults
------------------------------------------------------------------------------------------------------------------------------------------------------	
构造器：
	public Hashtable()
	public Hashtable(int initialCapacity)
	public Hashtable(int initialCapacity, float loadFactor)
	public Hashtable(Map<? extends K, ? extends V> t)

方法：
	clear():synchronized void  			
		△ 从该Map中删除所有映射（可选操作）。此调用返回后，映射将为空。		
	clone():synchronized Object 
		△ 返回此HashMap实例的浅副本：键和值本身没有克隆。
	compute(K key,BiFunction<? super K, ? super V, ? extends V> remappingFunction):synchronized V 
		△ 尝试计算Map的指定键及其当前映射值（如果没有当前映射，则为null）。例如，要创建字符串msg或将其附加到值映射，请执行以下操作：
			map.compute(key, (k, v) -> (v == null) ? msg : v.concat(msg))
		（方法merge()通常更容易用于此目的。）
		如果函数返回null，则删除映射（如果最初不存在，则保持不存在）。如果函数本身抛出（未选中）异常，则该异常将被重新抛出，并且当前映射保持不变。
	computeIfAbsent(K key,Function<? super K, ? extends V> mappingFunction):synchronized V 
		△ 如果指定的键尚未与某个值关联（或映射为null），则尝试使用给定的mappingFunction计算其值，并将其输入此映射，除非为null。
		如果函数返回null，则不记录任何映射。如果函数本身抛出（未选中）异常，则该异常将被重新抛出，并且不会记录任何映射。最常见的用法是构造一个新对象，作为初始映射值或旧结果，如：
			map.computeIfAbsent(key, k -> new Value(f(k)));
		或者要实现多值映射，Map<K,Collection<V>>，支持每个键的多个值：
			 map.computeIfAbsent(key, k -> new HashSet<V>()).add(v);
	computeIfPresent(K key,BiFunction<? super K, ? super V, ? extends V> remappingFunction):synchronized V 
		△ 如果指定键的值存在且不为null，则尝试在给定键及其当前映射值的情况下计算新映射。
		如果函数返回null，则删除映射。如果函数本身抛出（未选中）异常，则该异常将被重新抛出，并且当前映射保持不变。
	contains(Object value):synchronized boolean 
	containsKey(Object key):synchronized boolean 
		△ 如果Map包含指定键的映射，则返回true。
	containsValue(Object value):synchronized boolean 
		△ 如果此映射将一个或多个键映射到指定值，则返回true。
	elements():synchronized Enumeration<V> 	
	entrySet():synchronized  Set<Entry<K,V>>			
		△ 返回Map中包含的映射的Set视图。集合由映射支持，因此对映射的更改反映在集合中，反之亦然。如果在对集合进行迭代时修改映射（通过迭代器自己的remove操作或通过迭代器返回的映射项上的setValue操作除外），则迭代的结果未定义。集合支持元素移除，它通过Iterator.remove, Set.remove, removeAll, retainAll and clear操作从映射中移除相应的映射。它不支持添加或添加所有操作。
	equals(Object o):synchronized boolean 
	forEach(BiConsumer<? super K, ? super V> action):synchronized void 
		△ 对此映射中的每个条目（映射条目）执行给定的操作，直到所有条目都已处理或该操作引发异常为止。除非实现类另有指定，否则将按照条目集合迭代（如果指定了迭代顺序）的顺序执行操作。该操作引发的异常将中继到调用方。
	get(Object key):synchronized V 
		△ 返回指定键映射到的值，如果此映射不包含键的映射，则返回null。
		更正式地说，如果这个映射包含从键k到值v的映射，那么(key==null ? k==null : key.equals(k))，则此方法返回v；否则返回null。（最多可以有一个这样的映射。）	
		则返回值为null并不一定表示映射不包含键的映射；映射也可能显式地将键映射为null。containsKey操作可用于区分这两种情况。
	getOrDefault(Object key, V defaultValue):synchronized V 
		△ 返回指定键key映射到的值，如果此映射不包含键的映射，则返回默认值。
	hashCode():synchronized int 
	isEmpty():synchronized boolean 
		△ 如果Map为空（不包含任何key-value映射）返回true。	
	keys():synchronized Enumeration<K> 
	keySet():synchronized Set<K> 
		△ 返回此映射中包含的键的集合视图。集合由映射支持，因此对映射的更改反映在集合中，反之亦然。如果在对集合进行迭代时修改映射（通过迭代器自己的移除操作除外），则迭代的结果未定义。集合支持元素移除，它通过Iterator.remove, Set.remove, removeAll, retainAll, clear操作从映射中移除相应的映射。它不支持add或addAll操作。
	merge(K key, V value,BiFunction<? super V, ? super V, ? extends V> remappingFunction):synchronized V 
		△ 如果指定的键尚未与值关联或与null关联，请将其与给定的非空值关联。否则，将关联值替换为给定remappingFunction的结果，或者如果结果为空，则移除该值。当键拥有多个映射值时，可以使用此方法。例如，要创建字符串msg或将其附加到值映射，请执行以下操作：
			map.merge(key, msg, String::concat)
		如果函数返回空值，则删除映射。如果函数本身抛出（未选中）异常，则该异常将被重新抛出，并且当前映射保持不变。	
	put(K key, V value):synchronized V			
		△ 将指定的值与此映射中的指定键相关联（可选操作）。如果映射之前包含键的映射，则旧值将替换为指定的值。
	putAll(Map<? extends K, ? extends V> m):synchronized void 			
		△将指定映射中的所有映射复制到此映射（可选操作）。对于指定映射中从键k到值v的每个映射，此调用的效果相当于在此映射上调用一次put(k, v)。如果在操作过程中修改了指定的映射，则此操作的行为未定义。	
		【Throws】：
			NullPointerException 如果指定的映射为空
	putIfAbsent(K key, V value):synchronized V 
		如果指定的键尚未与某个值关联（或映射到空值），则将其与给定值关联并返回空值，否则返回当前值（旧值）。
	remove(Object key):synchronized V 			 
		从该映射中删除键的映射（如果存在）。
	remove(Object key, Object value):synchronized boolean 
		仅当指定键当前映射到指定值时才删除该项（即指定值与旧值相同）。成功删除返回true。
	replace(K key, V value):synchronized V 
		仅当指定键当前映射到某个值时才替换该项。
		返回与指定键关联的上一个值，如果没有键的映射，则为空。（如果实现支持空值，则空返回还可以指示先前与键关联的映射空值。）
	replace(K key, V oldValue, V newValue):synchronized boolean 
		只有在当前key映射到指定值(oldValue)时才替换指定键的条目(newValue)。如果值被替换，返回true。
	replaceAll(BiFunction<? super K, ? super V, ? extends V> function):synchronized void 
		将每个条目的值替换为对该条目调用给定function的结果，直到所有条目都被处理或function引发异常为止。function抛出的异常将中继到调用方。
	size():synchronized int 
		△ 返回此map中的键值映射数量。如果map包含超过Integer.MAX_VALUE元素，则返回Integer.MAX_VALUE。
	toString():synchronized String 
	values():synchronized Collection<V>
		△ 返回此Map中包含的所有值的集合视图。集合由映射支持，因此对映射的更改反映在集合中，反之亦然。如果在对集合进行迭代时修改映射（通过迭代器自己的移除操作除外），则迭代的结果不确定。集合支持元素移除，它通过Iterator.remove, Collection.remove, removeAll, retainAll , clear操作从map中移除相应的映射。它不支持add或addAll操作。

------------------------------------------------------------------------------------------------------------------------------------------------------		
附录：
	1、注：文档中的☆符号已过时或淘汰掉的方法。
	2、注：文档中的△符号表示覆盖重写方法。
	3、注：文档中的★符号表示抽象方法或者直接抛出UnsupportedOperationException异常的方法，总之没有实现具体功能代码的方法。
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	