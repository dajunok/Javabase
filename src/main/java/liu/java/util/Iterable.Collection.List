List<E>接口：列表 【Since:1.2】
	有序集合（也称为序列）。这个接口的用户可以精确控制每个元素在列表中的插入位置。用户可以通过其整数索引（列表中的位置）访问元素，并搜索列表中的元素。
	与集合不同，列表通常允许重复元素。更正式地说，列表通常允许元素e1和e2对，这样e1.equals(e2)，如果它们允许空元素，那么它们通常允许多个空元素。有人可能希望通过在用户尝试插入运行时抛出异常来实现一个禁止重复的列表，这不是不可想象的，但是我们希望这种用法很少出现。
	列表接口在迭代器的iterator, add, remove, equals 和  hashCode方法上放置了除集合接口中指定的以外的其他规定。为了方便起见，这里还包括其他继承方法的声明。
	列表接口提供了四种方法来对列表元素进行位置（索引）访问。列表（如Java数组）是零基（下标以0开始）的。注意，对于某些实现（例如LinkedList类），这些操作可以按照与索引值成比例的时间执行。因此，如果调用者不知道实现，那么迭代列表中的元素通常比，索引它（通过索引查找）要好。
	列表接口提供了一个特殊的迭代器，称为ListIterator迭代器，除了迭代器接口提供的正常操作之外，它还允许元素插入和替换以及双向访问。提供了一种方法来获取从列表中指定位置开始的列表迭代器。
	列表接口提供两种方法来搜索指定的对象。从性能的角度来看，这些方法应该谨慎使用。在许多实现中，它们将执行高代价的线性搜索（速度更快）。
	列表接口提供了两种方法，可以在列表中的任意点高效地插入和删除多个元素。
	注意：虽然允许列表将自己作为元素包含，但建议特别小心：Equals和HashCode方法不再在此类列表中定义良好。
	有些列表实现对可能包含的元素有限制。例如，一些实现禁止空元素，一些实现对其元素的类型有限制。试图添加不合格元素会引发未选中的异常（ unchecked exception），通常为NullPointerException或ClassCastException。试图查询不合格元素的存在可能会引发异常，或者只是返回false；一些实现将显示前一种行为，而一些实现将显示后一种行为。更一般地说，在不合格元素上尝试操作，如果完成操作不会导致不合格元素插入到列表中，可能会引发异常，或者根据实现的选择，可能会成功。此类异常在该接口的规范中标记为“可选”。
	此接口是Java集合框架的成员。
	
	接口定义	：public interface List<E> extends Collection<E>
	父接口	：Iterable<E>,Collection<E>		
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
	add(E e):boolean 
		△将指定的元素附加到此列表的末尾（可选操作）。
		支持此操作的列表可能会限制哪些元素可以添加到此列表中。特别是，一些列表将拒绝添加空元素，而其他列表将对可能添加的元素类型施加限制。列表类应该在它们的文档中明确地指定对可以添加哪些元素的任何限制。
		【Throws】：
			● UnsupportedOperationException
				如果此列表不支持添加操作（一般指没有实现功能代码，需要子类自己实现）
			● ClassCastException
				如果指定元素的类阻止将其添加到此列表中
			● NullPointerException
				如果指定的元素为空，并且此列表不允许空元素
			● IllegalArgumentException 
				如果此元素的某些属性阻止将其添加到此列表中
	add(int index, E element):void
		在此列表中的指定位置插入指定元素（可选操作）。将当前位于该位置的元素（如果有的话）和任何后续元素移到右边（向它们的索引中添加一个）。
		【Throws】：
			● UnsupportedOperationException	如果此列表不支持add操作（一般指没有实现功能代码，需要子类自己实现）
			● ClassCastException	如果指定元素的类阻止将其添加到此列表中
			● NullPointerException	如果指定的元素为null，并且此列表不允许null元素
			● IllegalArgumentException 如果此元素的某些属性阻止将其添加到此列表中 
			● IndexOutOfBoundsException	如果索引超出范围(index < 0 || index > size())
	addAll(int index, Collection<? extends E> c):boolean
		将指定集合中的所有元素插入到指定位置的列表中（可选操作）。将当前位于该位置的元素（如果有的话）和任何后续元素向右移动（增加它们的索引）。新元素将以指定集合的迭代器返回的顺序出现在此列表中。如果在操作进行中修改指定的集合，则此操作的行为未定义。（注意，如果指定的集合是这个列表，并且它是非空的，则会发生这种情况。）成功插入所有元素后返回true。
		【Throws】：
			● UnsupportedOperationException	如果此列表不支持addAll操作（一般指没有实现功能代码，需要子类自己实现）
			● ClassCastException	如果指定集合的元素的类阻止将其添加到此列表中
			● NullPointerException	如果指定的集合包含一个或多个null元素，并且此列表不允许null元素，或者指定的集合为null
			● IllegalArgumentException 如果指定集合的某个元素的某些属性阻止将其添加到此列表中
			● IndexOutOfBoundsException	如果索引超出范围(index < 0 || index > size())
	addAll(Collection<? extends E> c):boolean 
		△按指定集合的迭代器返回元素的顺序（可选操作）将指定集合中的所有元素追加到此列表的末尾。如果在操作进行过程中修改了指定的集合，则此操作的行为未定义。（请注意，如果指定的集合是此列表，并且不是空的，则会发生这种情况。）
		【Throws】：
			● UnsupportedOperationException	如果此列表不支持addAll操作（一般指没有实现功能代码，需要子类自己实现）
			● ClassCastException	如果指定集合的元素的类阻止将其添加到此列表中
			● NullPointerException	如果指定的集合包含一个或多个null元素，并且此列表不允许null元素，或者指定的集合为null
			● IllegalArgumentException 如果指定集合的某个元素的某些属性阻止将其添加到此列表中
	clear():void 
		△从此列表中删除所有元素（可选操作）。此调用返回后，列表将为空。
	contains(Object o):boolean 
		△如果此列表包含指定元素，则返回true。更正式地说，如果并且仅当此列表包含至少一个元素(o==null ? e==null : o.equals(e))。
		【Throws】：
			● ClassCastException	如果指定元素的类型与此列表不兼容（可选）
			● NullPointerException	如果指定的元素为null，并且此列表不允许null元素（可选）
	containsAll(Collection<?> c):boolean 
		△如果此列表包含指定集合的所有元素，则返回true。
		【Throws】：
			● ClassCastException	如果指定集合中的一个或多个元素的类型与此列表不兼容（可选）
			● NullPointerException	如果指定的集合包含一个或多个null元素，并且此列表不允许null元素（可选），或者指定的集合为null
	equals(Object o):boolean 
		△将指定的对象与此列表比较是否相等。如果且仅当指定的对象也是列表时，两个列表的大小相同，并且两个列表中所有对应的元素对都相等，则返回true。（两个元素e1和e2相等，如果（e1==null ? e2==null : e1.equals(e2))）换句话说，如果两个列表包含的元素顺序相同，则定义为相等。此定义确保equals方法在列表接口的不同实现中正常工作。
	get(int index):E	
		返回列表中指定位置的元素。
		【Throws】：
			● IndexOutOfBoundsException	如果索引超出范围(index < 0 || index >= size())
	hashCode():int 
		△ 返回此列表的哈希代码值。列表的哈希代码定义为以下计算的结果：
			int hashCode = 1;
			 for (E e : list)
				 hashCode = 31*hashCode + (e==null ? 0 : e.hashCode());
		这样可以确保list1.equals(list2)意味着list1.hashCode()==list2.hashCode()对于任何两个列表list1和list2，都是按照Object.hashCode()的常规约定执行的。
	indexOf(Object o):int
		返回此列表中指定元素的第一个匹配项的索引，如果此列表不包含元素，则返回-1。更正式地说，返回最低的索引i，以便(o==null ? get(i)==null : o.equals(get(i)))，如果没有此类索引，则为-1。
		【Throws】：
			● ClassCastException	如果指定元素的类型与此列表不兼容（可选）
			● NullPointerException	如果指定的元素为null，并且此列表不允许null元素（可选）
	isEmpty():boolean 
		△ 如果此列表不包含元素，则返回true。
	iterator():Iterator<E> 
		△ 以正确的顺序返回此列表中元素的迭代器。
	lastIndexOf(Object o):int
		返回此列表中指定元素的最后一次出现的索引位置，如果该列表不包含指定元素，则返回-1。也就是它会从序列的队尾向队头进行遍历。
		【Throws】：
			● ClassCastException	如果指定元素的类型与此列表不兼容（可选）
			● NullPointerException	如果指定的元素为null，并且此列表不允许null元素（可选）
	listIterator():ListIterator<E>
		返回此列表中的元素的列表迭代器（按适当顺序）。
	listIterator(int index):ListIterator<E>
		从列表中的指定位置开始，返回列表中元素的列表迭代器（按适当顺序）。
	remove(int index):E
		删除列表中指定位置的元素（可选操作）。向左移动任何后续元素（从其索引中减去一个）。返回从列表中删除的元素。
		【Throws】：
			● UnsupportedOperationException 如果此列表不支持删除操作（一般指没有实现功能代码，需要子类自己实现）
			● IndexOutOfBoundsException 如果索引超出范围(index < 0 || index >= size())
	remove(Object o):boolean 
		△ 从该列表中删除指定元素的第一个匹配项（如果存在）（可选操作）。如果此列表不包含元素，则它是不变的。更正式地说，删除索引i最低的元素，这样(o==null ? get(i)==null : o.equals(get(i))) (if such an element exists)（如果存在这样的元素）。如果此列表包含指定元素，则返回“true”（如果此列表因调用而更改，则返回“true”）。
		【Throws】：
			● ClassCastException	如果指定元素的类型与此列表不兼容（可选）
			● NullPointerException 如果指定的元素为空，并且此列表不允许空元素（可选）
			● UnsupportedOperationException 如果此列表不支持remove操作（一般指没有实现功能代码，需要子类自己实现）
	removeAll(Collection<?> c):boolean 
		△ 从此列表中删除指定集合中包含的所有元素（可选操作）。如果此列表因调用而更改，则为true
		【Throws】：
			● UnsupportedOperationException 如果此列表不支持removeAll操作
			● ClassCastException	如果此列表的元素的类与指定的集合不兼容（可选）
			● NullPointerException 如果此列表包含null元素，并且指定的集合不允许null元素（可选），或者指定的集合为null				
	replaceAll(UnaryOperator<E> operator):default void
		将此列表中的每个元素替换为将operator应用于该元素的结果。由operator引发的错误或运行时异常将中继（断言）到调用方。
		对于此列表，默认实现等效于：
				final ListIterator<E> li = list.listIterator();
				while (li.hasNext()) {li.set(operator.apply(li.next()));}	
		如果列表的列表迭代器不支持set操作（set方法），则在替换第一个元素时将引发UnsupportedOperationException异常。
		【Throws】：
			● UnsupportedOperationException 如果这列表是不可更改的。如果元素不可以被替换，一般指不支持修改，该实现将抛出此异常。
			● NullPointerException 如果指定的operator为null，或者operator操作结果值为null，并且此列表不允许null元素（可选）				
	retainAll(Collection<?> c):boolean 
		△仅保留此列表中包含在指定集合中的元素（可选操作）。换句话说，从该列表中删除不包含在指定集合中的所有元素。如果此列表因调用而更改，则为true
		【Throws】：
			● UnsupportedOperationException 如果此列表不支持retainAll操作（一般指没有实现功能代码，需要子类自己实现）
			● ClassCastException	如果此列表的元素的类与指定的集合不兼容（可选）
			● NullPointerException 如果此列表包含null元素，并且指定的集合不允许null元素（可选），或者指定的集合为null	
	set(int index, E element):E
		用指定的元素替换列表中指定位置的元素（可选操作）。返回以前位于指定位置的元素（返回旧元素）
		【Throws】：
			● UnsupportedOperationException	如果此列表不支持set操作（一般指没有实现功能代码，需要子类自己实现）
			● ClassCastException	如果指定元素的类阻止将其添加到此列表中
			● NullPointerException	如果指定的元素为null，并且此列表不允许null元素
			● IllegalArgumentException 如果此元素的某些属性阻止将其添加到此列表中 
			● IndexOutOfBoundsException	如果索引超出范围(index < 0 || index >= size())
	size():int 
		△ 返回此列表中的元素数量。如果此列表包含的元素超过Integer.MAX_VALUE，则返回Integer.MAX_VALUE。
	sort(Comparator<? super E> c):default void
		根据c指定的比较规则（比较器）对容器元素进行排序。
		此列表中的所有元素都必须使用指定的比较器进行相互比较（即，c.compare(e1, e2)不能对列表中的任何元素e1和e2抛出ClassCastException异常）。
		如果指定的comparator为空，那么列表中的所有元素都必须实现Comparable接口，并且应该使用元素的自然顺序。
		此列表必须可修改，但不必调整大小。
		默认实现获取包含此列表中所有元素的数组，对数组进行排序，并在此列表上迭代，从数组中的相应位置重置每个元素。（这避免了尝试在适当位置对链接列表排序所导致的n2 log(n)性能。）
		这个实现是一个稳定的、自适应的、迭代的合并排序，当输入数组部分排序时，需要的比较远少于n lg（n），而当输入数组随机排序时，提供传统合并排序的性能。如果输入数组接近排序，则实现需要大约n个比较。临时存储需求从几乎排序的输入数组的小常量到随机排序的输入数组的n/2对象引用不等。
		该实现在其输入数组中充分利用了升序和降序的同等优势，并且可以利用同一输入数组不同部分的升序和降序。它非常适合合并两个或更多排序的数组：只需连接数组并对结果数组进行排序。
		【Throws】：
			● ClassCastException 如果列表包含使用指定的比较器不能相互比较的元素
			● UnsupportedOperationException 如果列表的列表迭代器不支持set操作（一般指没有实现功能代码，需要子类自己实现）
			● IllegalArgumentException 如果发现比较器违反比较器契约
	spliterator():default Spliterator<E> 
		△ 在此列表中的元素上创建Spliterator。
		spliterator报告Spliterator.SIZED和Spliterator.ORDERED。实现应该记录额外特征值的报告。
		默认实现从列表的迭代器创建一个后期绑定spliterator。spliterator继承列表迭代器的 fail-fast属性。
		创建的Spliterator还报告Spliterator.SUBSIZED。			
	subList(int fromIndex, int toIndex):List<E>
		返回指定的fromIndex（含）和toIndex（含）之间此列表部分的视图。（如果fromindex和toindex相等，则返回的列表为空。）返回的列表由此列表支持，因此返回列表中的非结构更改将反映在此列表中，反之亦然。返回的列表支持此列表支持的所有可选列表操作。
		这种方法不需要显式的范围操作（数组通常存在的类型）。任何需要列表的操作都可以通过传递子列表视图而不是整个列表来用作范围操作。例如，以下习惯用法从列表中删除一系列元素：
			list.subList(from, to).clear();
		可以为indexOf和lastIndexOf构造类似的习语，Collections类中的所有算法都可以应用于子列表。
		如果支持列表（即此列表）在结构上进行了除通过返回列表以外的任何方式的修改，则此方法返回的列表的语义将变为未定义的。（结构修改是指那些改变列表大小的修改，或者以某种方式干扰列表，使正在进行的迭代可能产生不正确的结果。）
		【Throws】：
			● IndexOutOfBoundsException	对于非法的端点索引值(fromIndex < 0 || toIndex > size || fromIndex > toIndex)
	toArray():Object[] 
		△ 返回一个数组，该数组按正确的顺序（从第一个元素到最后一个元素）包含此列表中的所有元素。
		返回的数组将是“安全的”，因为此列表不维护对它的引用。（换句话说，此方法必须分配一个新数组，即使此列表由数组支持）。因此，调用者可以自由修改返回的数组。
		此方法充当基于数组和基于集合的API之间的桥梁。
	toArray(T[] a):<T> T[] 
		△ 返回一个数组，该数组按正确的顺序（从第一个元素到最后一个元素）包含此列表中的所有元素；返回的数组的运行时类型是指定数组的运行时类型。如果列表符合指定的数组，则将在其中返回。否则，将为新数组分配指定数组的运行时类型和此列表的大小。
		如果列表适合具有备用空间的指定数组（即数组中的元素多于列表中的元素），则紧跟列表末尾的数组中的元素将设置为空。（只有当调用者知道列表不包含任何空元素时，这对于确定列表的长度很有用。）
		与toArray()方法一样，此方法充当基于数组和基于集合的API之间的桥梁。此外，此方法允许对输出数组的运行时类型进行精确控制，并且可以在某些情况下用于节省分配成本。
		假设x是一个已知仅包含字符串的列表。以下代码可用于将列表转储到新分配的字符串数组中：
			String[] y = x.toArray(new String[0]);
		请注意，toArray(new Object[0])功能与toArray()相同
		【Throws】：
			● ArrayStoreException 如果指定数组的运行时类型不是此列表中每个元素的运行时类型的父类型
			● NullPointerException 如果指定的数组为null
			
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
附录：
	1、注：文档中的△符号表示覆盖重写方法。
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
			
