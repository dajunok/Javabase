----------------------------------------Level--------------------------------------------------------------------------------------------------------------
Level：日志级别。	【Since:1.4】
	Level类定义了一组可用于控制日志记录输出的标准日志记录级别。日志级别对象是有序的，由有序整数指定。在给定级别启用日志记录还可以在所有更高级别启用日志记录。
	客户机通常应使用预定义的级别常量，如Level.SEVERE。
	按降序排列的级别为：
		● SEVERE (highest value)
		● WARNING
		● INFO
		● CONFIG
		● FINE
		● FINER
		● FINEST (lowest value)
	此外，还有一个级别OFF可用于关闭日志记录，以及一个级别ALL可用于启用所有消息的日志记录。
	第三方可以通过子类化级别定义额外的日志记录级别。在这种情况下，子类应该注意选择唯一的整数级别值，并通过定义合适的readResolve方法确保它们在序列化过程中保持Object唯一性属性。
	
	
	类定义	：public class Level implements java.io.Serializable
	实现接口	：Serializable
------------------------------------------------------------------------------------------------------------------------------------------------------
Field Summary（字段概要）：
	ALL
		表示应记录所有消息。此级别初始化为Integer.MIN_VALUE。
	CONFIG
		静态配置消息的消息级别。
		CONFIG消息旨在提供各种静态配置信息，以帮助调试可能与特定配置关联的问题。例如，配置消息可能包括CPU类型、图形深度、GUI用户界面外观等。该级别初始化为700。
	FINE
		提供跟踪信息的消息级别。
		FINE, FINER, 和 FINEST用于相对详细的追踪。这三个级别的确切含义因子系统而异，但一般来说，FINEST应用于最大量的详细输出，FINER应用于稍不详细的输出，FINE应用于最少量（最重要）的消息。
		通常，FINE级别应该用于对特定子系统不感兴趣的开发人员广泛感兴趣的信息。
		FINE消息可能包括一些小的（可恢复的）故障。表明潜在性能问题的问题也值得作为FINE记录。此级别初始化为500。
	FINER
		表示一个相当详细的跟踪消息。默认情况下，在此级别跟踪输入、返回或引发异常的日志记录调用。此级别初始化为400。
	FINEST
		表示一个非常详细的跟踪消息。此级别初始化为300。
	INFO
		是信息性消息的消息级别。
		通常，INFO消息将写入控制台或其等效对象。因此，INFO级别只能用于对最终用户和系统管理员有意义的相当重要的消息。此级别初始化为800。
	OFF
		可以用来关闭日志记录的特殊级别。此级别初始化为Integer.MAX_VALUE。
	SEVERE
		表示严重故障的消息级别。
		一般来说，严重（SEVERE）的消息应该描述一些非常重要的事件，这些事件会妨碍程序的正常执行。对于最终用户和系统管理员来说，它们应该是可以合理理解的。此级别初始化为1000。
	WARNING
		表示潜在问题的消息级别。
		一般来说，警告（WARNING）消息应该描述最终用户或系统管理者感兴趣的事件，或者指出潜在问题的事件。此级别初始化为900。


Constructor Summary（构造器概要）：
	protected Level(String name, int value)
		name - 级别的名称，例如“SEVERE”。
		value - 级别的整数值。
		使用给定的整数值创建命名级别Level。
		注意，这个构造函数是protected修饰的，允许子类化。一般来说，日志记录的客户机应该使用一个恒定级别的对象，例如SEVERE或FINEST。但是，如果客户机需要添加新的日志记录级别，他们可以对级别进行子类化并定义新的常量。
		【Throws】：
			NullPointerException 如果name为null。
	protected Level(String name, int value, String resourceBundleName)
		name - 级别的名称，例如“SEVERE”。
		value - 级别的整数值。
		resourceBundleName - 用于本地化给定名称的绑定资源的名称。如果resourceBundleName为null或为空字符串，则忽略它。
		创建具有给定整数值和给定本地化资源名称的命名级别。
		【Throws】：
			NullPointerException 如果name为null。
			
Method Summary（方法概要）：
	parse(String name):static synchronized Level 
		将级别名称字符串解析为级别。
		参数字符串可以由级别名称或整数值组成。
		例如：
			● "SEVERE"
			● "1000"
	equals(Object ox):boolean 
		ox - 要与之比较的引用对象。
		比较两个对象的值是否相等。
		只有当两个对象具有相同的级别值时才为true。
	getLocalizedName():String 
		为当前默认区域设置返回Level的本地化字符串名称。
		如果没有可用的本地化信息，则返回非本地化名称。
	getName():String 
		返回Level的非本地化字符串名称。
	getResourceBundleName():String 
		返回Level的本地化资源绑定名称，如果未定义本地化绑定，则返回null。
	hashCode():int 
		生成哈希代码。
	intValue():final int 
		获取此级别的整数值。此整数值可用于Level对象之间的有效排序比较。
	toString():String 
		返回此级别的字符串表示形式。
	
	
	
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
附录：
	1、注：文档中的△符号表示覆盖重写方法，✘符号表示已淘汰的方法。	
	2、注：文档中的★符号表示抽象方法或者直接抛出UnsupportedOperationException异常的方法，总之没有实现具体功能代码的方法。	
	3、manifest文件：描述Jar文件的打包、运行信息。













		