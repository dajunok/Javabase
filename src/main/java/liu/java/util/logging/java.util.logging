----------------------------------------Package java.util.logging--------------------------------------------------------------------------------------------------------------
											【Since 1.4】
Package Description（包描述说明）：
	提供JavaTM 2平台核心日志记录设施的类和接口。日志API的中心目标是支持在客户站点维护和维护软件。
	志的主要目标用途有四种：
		1、由最终用户和系统管理员进行问题诊断。这包括简单记录可在本地修复或跟踪的常见问题，例如资源不足、安全故障和简单配置错误。
		2、由现场服务工程师进行问题诊断。现场服务工程师使用的日志记录信息可能比系统管理员要求的要复杂和详细得多。通常，这些信息需要在特定子系统中进行额外的日志记录。
		3、由开发组织进行问题诊断。当现场出现问题时，可能需要将捕获的日志信息返回给原始开发团队进行诊断。这些日志信息可能非常详细，而且相当难以理解。这些信息可能包括对特定子系统内部执行的详细跟踪。
		4、开发人员的问题诊断。日志API也可用于帮助调试正在开发的应用程序。这可能包括由目标应用程序生成的日志信息以及由低级库生成的日志信息。但是请注意，虽然这种使用是完全合理的，但是日志API并不打算取代开发环境中可能已经存在的常规调试和分析工具。
	此包的关键元素包括：
		● Logger（记录器）：应用程序在其上进行日志记录调用的主要实体。logger对象用于记录特定系统或应用程序组件的消息。
		● LogRecord（日志记录）：用于在日志框架和单个日志处理程序之间传递日志记录请求。
		● Handler（处理器）：将日志记录对象导出到各种目标，包括memory（内存）、output streams（输出流）、consoles（控制台）、files（文件）和sockets（套接字）。为此，存在各种各样的处理程序子类。其他处理器可以由第三方开发，并在核心平台的顶部交付。
		● Level（级别）：定义一组可用于控制日志记录输出的标准日志记录级别。程序可以配置为输出某些级别的日志记录，而忽略其他级别的输出。
		● Filter（过滤器）：提供对日志记录内容的细粒度控制，而不是日志级别提供的控制。日志API支持通用的过滤机制，允许应用程序代码附加任意的过滤器来控制日志输出。
		● Formatter（格式化程序）：提供对格式化LogRecord对象的支持。这个包包括两个格式化程序SimpleFormatter和XMLFormatter，分别用于格式化纯文本或XML格式的日志记录。与Handler一样，其他格式化程序可能由第三方开发。
	Logging API提供静态和动态配置控制。静态控制使现场服务人员能够设置特定的配置，然后使用新的日志记录设置重新启动应用程序。动态控制允许在当前运行的程序中更新日志配置。API还允许为系统的不同功能区域启用或禁用日志记录。例如，一个现场服务工程师可能对跟踪所有AWT事件感兴趣，但可能对套接字事件或内存管理不感兴趣。

Null Pointers（Null 指针）：
	通常，除非JavaDoc中另有说明，否则如果传递null参数，方法和构造函数将抛出NullPointerException。此规则的一个广泛例外是logger类中的日志记录便利方法（config、entering、existing、fine、finer、finest、log、logp、logrb、severe、through和warning方法）将接受除初始Level参数（如果有）之外的所有参数的null值。

Interface Summary（接口概要）
	Filter
	LoggingMXBean

Class Summary(类概要)
	ConsoleHandler
	ErrorManager
	FileHandler
	Formatter
	Handler
	Level
	Logger
	LoggingPermission
	LogManager
	LogRecord
	MemoryHandler
	SimpleFormatter
	SocketHandler
	StreamHandler
	XMLFormatter





------------------------------------------------------------------------------------------------------------------------------------------------------
附录：
	1、block-structured：块状结构。块状结构(block-like construct)指的是一个类，方法或构造函数的主体。 需要注意的是，数组初始化中的初始值可被选择性地视为块状结构。
	2、manifest文件：描述Jar文件的打包、运行信息。

	
	
	
	
		
		