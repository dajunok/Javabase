一、案例说明：
二、源代码文件（.java）介绍：
三、知识点：（注：文档中的△符号表示覆盖重写方法。）
	12、NavigableMap<K,V>接口：NavigableMap扩展了 SortedMap，因此它也是一种基于对键进行排序的Map。并且具有了针对给定搜索目标返回最接近匹配项的导航方法。方法 lowerEntry、floorEntry、ceilingEntry
			和 higherEntry 分别返回与小于、小于等于、大于等于、大于给定键的键关联的 Map.Entry 对象，如果不存在这样的键，则返回 null。
			类似地，方法 lowerKey、floorKey、ceilingKey 和 higherKey 只返回关联的键。所有这些方法是为查找条目而不是遍历条目而设计的。
			可以按照键的升序或降序访问和遍历 NavigableMap。descendingMap 方法返回映射的一个视图，该视图表示的所有关系方法和方向方法都是逆向的。
			升序操作和视图的性能很可能比降序操作和视图的性能要好。subMap、headMap 和 tailMap 方法与名称相似的 SortedMap 方法的不同之处在于：
			可以接受用于描述是否包括（或不包括）下边界和上边界的附加参数。任何 NavigableMap 的 Submap 必须实现 NavigableMap 接口。
			此接口还定义了 firstEntry、pollFirstEntry、lastEntry 和 pollLastEntry 方法，它们返回和/或移除最小和最大的映射关系（如果存在），否则返回 null。
			subMap(K, K)、headMap(K) 和 tailMap(K) 方法被指定为返回 SortedMap，以允许现有 SortedMap 实现能相容地改进为实现 NavigableMap，但鼓励此接口的扩展和实现重写这些方法以返回 NavigableMap。类似地，可以重写 SortedMap.keySet() 以返回 NavigableSet。

		父接口：SortedMap<K,V>,Map<K,V>
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
		ceilingEntry(K key):Map.Entry<K,V> 
			返回一个键-值映射关系，它与大于等于给定键的最小键关联；如果不存在这样的键，则返回 null。
		ceilingKey(K key):K 
			返回大于等于给定键的最小键；如果不存在这样的键，则返回 null。
		descendingKeySet():NavigableSet<K> 
			返回此映射中所包含键的逆序 NavigableSet 视图。
		descendingMap():NavigableMap<K,V> 
			返回此映射中所包含映射关系的逆序视图。
		firstEntry():Map.Entry<K,V> 
			返回一个与此映射中的最小键关联的键-值映射关系(Entry)；如果映射(Map)为空，则返回 null。
		floorEntry(K key):Map.Entry<K,V> 
			返回一个键-值映射关系(Entry)，它与小于等于给定键的最大键关联；如果不存在这样的键，则返回 null。
		floorKey(K key):K 
			返回小于等于给定键的最大键；如果不存在这样的键，则返回 null。
		headMap(K toKey, boolean inclusive):NavigableMap<K,V> 
			返回此映射的部分视图，其键小于（或等于，如果 inclusive 为 true）toKey。
		higherEntry(K key):Map.Entry<K,V> 
			返回一个键-值映射关系，它与严格大于给定键的最小键关联；如果不存在这样的键，则返回 null。	
		higherKey(K key):K 
			返回严格大于给定键的最小键；如果不存在这样的键，则返回 null。
		lastEntry():Map.Entry<K,V> 
			返回与此映射中的最大键关联的键-值映射关系；如果映射为空，则返回 null。
		lowerEntry(K key):Map.Entry<K,V> 
			 返回一个键-值映射关系，它与严格小于给定键的最大键关联；如果不存在这样的键，则返回 null。
		lowerKey(K key):K 
			返回严格小于给定键的最大键；如果不存在这样的键，则返回 null。
		navigableKeySet():NavigableSet<K> 
			返回此映射中所包含键的 NavigableSet 视图。
		pollFirstEntry():Map.Entry<K,V> 
			 移除并返回与此映射中的最小键关联的键-值映射关系(Entry)；如果映射为空，则返回 null。
		pollLastEntry():Map.Entry<K,V> 
			移除并返回与此映射中的最大键关联的键-值映射关系；如果映射为空，则返回 null。
		subMap(K fromKey, boolean fromInclusive,K toKey, boolean toInclusive):NavigableMap<K,V> 
			 返回此映射的部分视图，其键的范围从 fromKey 到 toKey。（注意：fromInclusive表示是否包含fromKey这个边界；toInclusive表示是否包含toKey这个边界）
		tailMap(K fromKey, boolean inclusive):NavigableMap<K,V> 
			返回此映射的部分视图，其键大于（或等于，如果 inclusive 为 true）fromKey。				
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
	13、Iterator<E>接口：迭代器。用来迭代collection容器中元素的迭代器。	
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------	
		forEachRemaining(Consumer<? super E> action):default void 
			对剩余的每个元素执行给定的操作，直到所有元素都被处理或操作引发异常为止。
		hasNext():boolean 
			如果迭代器包含更多元素，则返回true。
		next():E 
			返回迭代器中的下一个元素。
		remove():default void 
			从集合中移除此迭代器返回的最后一个元素（即将迭代器最新返回的元素删除并继续迭代）。使用迭代器 的 remove() 方法后，迭代器删除了当前读取的元素 “b”，并且继续往下遍历元素，达到了在删除元素时不破坏遍历的目的。
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
	14、ListIterator<E>接口：列表迭代器。它允许程序员沿任一方向遍历列表，在迭代期间修改列表，并获取迭代器在列表中的当前位置。ListIterator没有当前元素；
			其光标位置始终位于调用previous（）将返回的元素和将返回的元素之间。
					
		父接口：Iterator<E>
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
		add(E e):void 
			将指定的元素插入列表。
		hasPrevious():boolean 
			如果列表迭代器在反向遍历列表时包含更多元素，则返回true。
		nextIndex():int 
			返回列表中ListIterator所在位置后面元素的索引
		previous():E 
			返回列表中的前一个元素，并向后移动光标位置。
		previousIndex():int 
			返回列表中ListIterator所在位置的前一个元素索引，该索引将由对Previous（）的后续调用返回。
		set(E e):void 
			将next（）或previous（）返回的最后一个元素替换为指定的元素。
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
	15、Spliterator<T>接口：可分割迭代器。不同以往的iterator需要顺序迭代，Spliterator可以分割为若干个小的迭代器进行并行操作，
			既可以实现多线程操作提高效率，又可以避免普通迭代器的fail-fast机制所带来的异常。Spliterator可以配合1.8新加的Stream进行并行流的实现，大大提高处理效率。。
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
	属性：通过characteristics（）方法返回的值，用来标识实现类所具有的的特征
		public static final int ORDERED    = 0x00000010;//表示元素是有序的（每一次遍历结果相同）
		public static final int DISTINCT   = 0x00000001;//表示元素不重复
		public static final int SORTED     = 0x00000004;//表示元素是按一定规律进行排列（有指定比较器）
		public static final int SIZED      = 0x00000040;//是否确定大小
		public static final int NONNULL    = 0x00000100;//表示迭代器中没有null元素
		public static final int IMMUTABLE  = 0x00000400;//表示元素不可变
		public static final int CONCURRENT = 0x00001000;//表示迭代器可以多线程操作
		public static final int SUBSIZED   = 0x00004000;//表示子Spliterators都具有SIZED特性
	方法：
		characteristics():int 
			返回Spliterator对象的一组特征值(指的是上面的属性值)。一般实现类中的属性就是几个属性进行或（||）操作之后的结果。
		estimateSize():long 
			返回一个预估的值，等于执行forEachRemaining方法时调用tryAdvance的次数。	如果这个值过大，或者需要太复杂的计算过程，那么直接回返回long型的最大值
		forEachRemaining(Consumer<? super T> action):default void 
			对Spliterator的每一个对象执行tryAdvance操作
		getComparator():default Comparator<? super T> 
			如果Spliterator的具体实现具有SORTED属性，那么此方法会返回一个相应的比较器，否则会返回null
		getExactSizeIfKnown():default long 
			返回Spliterator对象确切的大小，如果存在SIZED属性，则返回estimateSize()方法的返回值，否则返回-1
		hasCharacteristics(int characteristics):default boolean 
			根据characteristics()与参数相与的结果看Spliterator对象是否包含参数指定的属性
		tryAdvance(Consumer<? super T> action):boolean 
			如果有剩余的元素存在，执行参数给定的操作，并返回true，否则就返回false。 如果Spliterator对象具有ORDERED属性，那么tryAdvance也会按照相应的顺序去执行。
		trySplit():Spliterator<T> 
			如果这个Spliterator是可以被分割的，那么这个方法会返回一个Spliterator，与原来的Spliterator平分其中的元素，如果原Spliterator的元素个数单数，
			两个Spliterator的元素个数相差1，基本是相同的。如果Spliterator不能再分割，那么会返回null	
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
	16、OfPrimitive<T, T_CONS, T_SPLITR extends Spliterator.OfPrimitive<T, T_CONS, T_SPLITR>>接口：
			它是Spliterator<T>接口的一个内部接口，并且扩展于Spliterator<T>接口。与Spliterator几乎无差别，只是将trySplit，tryAdvance，forEachRemaining三个方法中的参数类型做了一点小小的变化，更加适合基本参数类型。
		泛型参数说明：
			
		父接口：Spliterator<T>
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
		forEachRemaining(T_CONS action):default void 
			对剩余的每个元素执行给定的操作，在当前线程中按顺序执行，直到处理完所有元素或操作引发异常为止。
		tryAdvance(T_CONS action):boolean 
			如果存在剩余的元素，则对其执行给定的操作，返回true；否则返回false。
		trySplit():T_SPLITR 
			如果可以对该spliterator进行分区，则返回一个包含元素的spliterator，从该方法返回时，不覆盖原spliterator 。
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
	17、Spliterator$OfDouble接口：它是Spliterator<T>接口的一个内部接口，扩展于OfPrimitive<Double, DoubleConsumer, OfDouble>。
			专门用于Double类型的的Spliterator。
	
		父接口：Spliterator.OfPrimitive<Double,DoubleConsumer,Spliterator.OfDouble>,Spliterator<Double>		
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
		forEachRemaining(Consumer<? super Double> action):default void 
			对剩余的每个元素执行给定的操作，在当前线程中按顺序执行，直到处理完所有元素或操作引发异常为止。
		forEachRemaining(DoubleConsumer action):default void 
			对剩余的每个元素执行给定的操作，在当前线程中按顺序执行，直到处理完所有元素或操作引发异常为止。
		tryAdvance(Consumer<? super Double> action):default boolean 
			如果存在剩余的元素，则对其执行给定的操作，返回true；否则返回false。
		tryAdvance(DoubleConsumer action):boolean 
			如果存在剩余的元素，则对其执行给定的操作，返回true；否则返回false。
		trySplit():OfDouble
			如果可以对该spliterator进行分区，则返回一个包含元素的spliterator，从该方法返回时，不覆盖原spliterator 。
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
	18、Spliterator$OfInt接口：它是Spliterator<T>接口的一个内部接口，扩展于OfPrimitive<Integer, IntConsumer, OfInt>。
			专门用于int值的Spliterator。
	
		父接口：Spliterator.OfPrimitive<Integer,IntConsumer,Spliterator.OfInt>,Spliterator<Integer>	
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
		forEachRemaining(Consumer<? super Integer> action):default void 
			对剩余的每个元素执行给定的操作，在当前线程中按顺序执行，直到处理完所有元素或操作引发异常为止。
		forEachRemaining(IntConsumer action):default void 
			对剩余的每个元素执行给定的操作，在当前线程中按顺序执行，直到处理完所有元素或操作引发异常为止。
		tryAdvance(Consumer<? super Integer> action):default boolean 
			如果存在剩余的元素，则对其执行给定的操作，返回true；否则返回false。
		tryAdvance(IntConsumer action):boolean 
			如果存在剩余的元素，则对其执行给定的操作，返回true；否则返回false。
		trySplit():OfInt 
			如果可以对该spliterator进行分区，则返回一个包含元素的spliterator，从该方法返回时，不覆盖原spliterator 。
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	19、Spliterator$OfLong接口：它是Spliterator<T>接口的一个内部接口，扩展于PrimitiveIterator<Long,LongConsumer>
			专门用于Long值的Spliterator。
		
		父接口：Spliterator.OfPrimitive<Long,LongConsumer,Spliterator.OfLong>,Spliterator<Long>
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
		forEachRemaining(Consumer<? super Long> action):default void 
			对剩余的每个元素执行给定的操作，在当前线程中按顺序执行，直到处理完所有元素或操作引发异常为止。
		forEachRemaining(LongConsumer action):default void 
			对剩余的每个元素执行给定的操作，在当前线程中按顺序执行，直到处理完所有元素或操作引发异常为止。
		tryAdvance(Consumer<? super Long> action):default boolean 
			如果存在剩余的元素，则对其执行给定的操作，返回true；否则返回false。
		tryAdvance(LongConsumer action):boolean 
			如果存在剩余的元素，则对其执行给定的操作，返回true；否则返回false。
		trySplit():OfLong 
			如果可以对该spliterator进行分区，则返回一个包含元素的spliterator，从该方法返回时，不覆盖原spliterator 。
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	20、PrimitiveIterator<T, T_CONS>接口：原始迭代器。为int、long和double值提供了专门的子类型。			
		
		父接口：Iterator<T>	
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------	
		forEachRemaining(T_CONS action):void 
			对剩余的每个元素执行给定的操作，按元素在迭代时发生的顺序执行，直到所有元素都被处理或操作引发异常为止。
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	21、PrimitiveIterator$OfDouble接口：专门针对Double类型的迭代器
		
		父接口：PrimitiveIterator<Double,DoubleConsumer>,Iterator<Double>		
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------	
		forEachRemaining(Consumer<? super Double> action):default void 
			对剩余的每个元素执行给定的操作，直到所有元素都被处理或操作引发异常为止。
		forEachRemaining(DoubleConsumer action):default void 
			对剩余的每个元素执行给定的操作，直到所有元素都被处理或操作引发异常为止。
		next():default Double 
			返回迭代中的下一个元素。
		nextDouble():double 
			返回迭代中的下一个double元素。
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
	22、PrimitiveIterator$OfInt接口：专门针对int类型的迭代器
		
		父接口：PrimitiveIterator<Integer,IntConsumer>,Iterator<Integer>		
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------	
		forEachRemaining(Consumer<? super Integer> action):default void 
			对剩余的每个元素执行给定的操作，直到所有元素都被处理或操作引发异常为止。
		forEachRemaining(IntConsumer action):default void 
			对剩余的每个元素执行给定的操作，直到所有元素都被处理或操作引发异常为止。
		next():default Integer 
			返回迭代中的下一个元素。
		nextDouble():int
			返回迭代中的下一个int元素。
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
	23、PrimitiveIterator$OfLong接口：专门针对long类型的迭代器
		
		父接口：PrimitiveIterator<Long,LongConsumer>,Iterator<Long>	
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------	
		forEachRemaining(Consumer<? super Long> action):default void 
			对剩余的每个元素执行给定的操作，直到所有元素都被处理或操作引发异常为止。
		forEachRemaining(LongConsumer action):default void 
			对剩余的每个元素执行给定的操作，直到所有元素都被处理或操作引发异常为止。
		next():default Long 
			返回迭代中的下一个元素。
		nextDouble():long
			返回迭代中的下一个long元素。
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
	24、Enumeration<E>接口：枚举接口。实现枚举接口的对象生成一系列元素，一次一个。对NextElement方法的连续调用返回序列的连续元素。目前已被迭代器Iterator<E>淘汰
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------	
		hasMoreElements():boolean 
			测试此枚举是否包含更多元素。
		nextElement():E 
			如果此枚举对象至少还要提供一个元素，则返回此枚举的下一个元素。
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
	25、Formattable接口：可格式化接口。任何需要使用Formatter的“s”转换说明符执行自定义格式化的类都必须实现Formattable接口。这个接口允许对任意对象进行格式化的基本控制。
	
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------	
		formatTo(Formatter formatter, int flags, int width, int precision):void 
			使用提供的formatter格式化对象。
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
	26、Comparable<T>接口：可比较接口。这个接口对实现它的每个类的对象施加了一个总的顺序。这种排序称为类的自然排序，类的CompareTo方法称为类的自然比较方法。
			实现此接口的对象列表（和数组）可以按collections.sort（和array.sort）自动排序。实现此接口的对象可以用作sorted map中的键或sorted set中的元素，而无需指定比较器。
	
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
		compareTo(T o):int 
			将此对象与指定的顺序对象进行比较。返回负整数、零或正整数，因为当前对象小于、等于或大于指定对象。
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	
	27、Comparator<T>接口：比较器，用于排序、分组。比较器可以传递给排序方法，（例如collections.sort或array.sort）允许对排序顺序进行精确控制。比较器还可用于控制某些数据结构（如sorted sets或sorted maps）的顺序。或者为没有自然排序的对象集合提供排序。
	
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
		comparing(Function<? super T, ? extends U> keyExtractor):static <T, U extends Comparable<? super U>> Comparator<T> 
			接受一个函数，该函数从类型T中提取一个可比较的排序键，并返回一个通过该排序键进行比较的比较器。
		comparing(Function<? super T, ? extends U> keyExtractor,Comparator<? super U> keyComparator):static <T, U> Comparator<T>
			接受从类型T中提取排序键的函数，并返回使用指定的比较器与该排序键进行比较的比较器。 
		comparingDouble(ToDoubleFunction<? super T> keyExtractor):static<T> Comparator<T> 
			接受一个函数，该函数从类型T中提取一个Double排序键，并返回一个比较器，该比较器通过该排序键进行比较。
		comparingInt(ToIntFunction<? super T> keyExtractor):static <T> Comparator<T> 
			接受一个函数，该函数从类型T中提取int排序键，并返回一个比较器，该比较器通过该排序键进行比较。
		comparingLong(ToLongFunction<? super T> keyExtractor):static <T> Comparator<T> 
			接受一个函数，该函数从类型T中提取一个long排序键，并返回一个比较器，该比较器通过该排序键进行比较。
		naturalOrder():static <T extends Comparable<? super T>> Comparator<T> 
			返回按自然顺序比较Comparable对象的比较器。
		nullsFirst(Comparator<? super T> comparator):static <T> Comparator<T> 
			返回一个null-friendly(空友好)比较器，该比较器将空（null）视为小于非空(non-null)。
		nullsLast(Comparator<? super T> comparator):static <T> Comparator<T> 
			返回一个null-friendly(空友好)比较器，该比较器认为空（null）大于非空（non-null）。
		reverseOrder():static <T extends Comparable<? super T>> Comparator<T> 
			返回一个与自然顺序相反的比较器。
		compare(T o1, T o2):int 
			比较其顺序的两个参数。
		equals(Object obj):boolean 
			指定的对象是否“等于”此比较器。
		reversed():default Comparator<T> 
			返回一个比较器，强制执行此比较器的反向顺序。
		thenComparing(Comparator<? super T> other):default Comparator<T> 
			用指定的比较器返回一个lexicographic-order比较器。
		thenComparing(Function<? super T, ? extends U> keyExtractor):default <U extends Comparable<? super U>> Comparator<T> 
			返回具有提取可比较排序键的函数的lexicographic-order比较器。
		thenComparing(Function<? super T, ? extends U> keyExtractor,Comparator<? super U> keyComparator):default <U> Comparator<T> 
			返回一个lexicographic-order比较器，该比较器具有提取要与给定比较器进行比较的键的函数。
		thenComparingDouble(ToDoubleFunction<? super T> keyExtractor):default Comparator<T> 
			返回具有提取Double排序键的函数的lexicographic-order单词顺序比较器。
		thenComparingInt(ToIntFunction<? super T> keyExtractor):default Comparator<T>
			返回具有提取int排序键的函数的lexicographic-order单词顺序比较器。
		thenComparingLong(ToLongFunction<? super T> keyExtractor):default Comparator<T> 
			返回具有提取Long排序键的函数的lexicographic-order单词顺序比较器。			
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	28、RandomAccess接口：随机访问接口。列表实现类使用的标记接口，用于指示它们支持快速（通常是恒定时间）随机访问。此接口的主要目的是允许通用算法在应用于随机或顺序访问列表时更改其行为以提供良好的性能。
		
		实现类：ArrayList, AttributeList, CopyOnWriteArrayList, RoleList, RoleUnresolvedList, Stack, Vector
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
	29、Observer接口：观察对象接口。当一个类希望被通知可观察对象的变化时，它可以实现Observer接口。
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
		update(Observable o, Object arg):void 
			只要更改Observed对象，此方法就会被调用。	
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
	30、EventListener：事件监听器。是一个标记接口，就是说该接口内是没有任何方法的。所有事件监听器都需要实现该接口。事件监听器注册在事件源上，当事件源的属性或状态改变的时候，调用相应监听器内的回调方法。

	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		