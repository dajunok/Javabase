一、案例说明：
二、源代码文件（.java）介绍：
三、知识点：（注：文档中的△符号表示覆盖重写方法。）
		
	20、PrimitiveIterator<T, T_CONS>接口：原始迭代器。为int、long和double值提供了专门的子类型。			
		
		父接口：Iterator<T>	
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------	
		forEachRemaining(T_CONS action):void 
			对剩余的每个元素执行给定的操作，按元素在迭代时发生的顺序执行，直到所有元素都被处理或操作引发异常为止。
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	21、PrimitiveIterator$OfDouble接口：专门针对Double类型的迭代器
		
		父接口：PrimitiveIterator<Double,DoubleConsumer>,Iterator<Double>		
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------	
		forEachRemaining(Consumer<? super Double> action):default void 
			对剩余的每个元素执行给定的操作，直到所有元素都被处理或操作引发异常为止。
		forEachRemaining(DoubleConsumer action):default void 
			对剩余的每个元素执行给定的操作，直到所有元素都被处理或操作引发异常为止。
		next():default Double 
			返回迭代中的下一个元素。
		nextDouble():double 
			返回迭代中的下一个double元素。
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
	22、PrimitiveIterator$OfInt接口：专门针对int类型的迭代器
		
		父接口：PrimitiveIterator<Integer,IntConsumer>,Iterator<Integer>		
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------	
		forEachRemaining(Consumer<? super Integer> action):default void 
			对剩余的每个元素执行给定的操作，直到所有元素都被处理或操作引发异常为止。
		forEachRemaining(IntConsumer action):default void 
			对剩余的每个元素执行给定的操作，直到所有元素都被处理或操作引发异常为止。
		next():default Integer 
			返回迭代中的下一个元素。
		nextDouble():int
			返回迭代中的下一个int元素。
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
	23、PrimitiveIterator$OfLong接口：专门针对long类型的迭代器
		
		父接口：PrimitiveIterator<Long,LongConsumer>,Iterator<Long>	
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------	
		forEachRemaining(Consumer<? super Long> action):default void 
			对剩余的每个元素执行给定的操作，直到所有元素都被处理或操作引发异常为止。
		forEachRemaining(LongConsumer action):default void 
			对剩余的每个元素执行给定的操作，直到所有元素都被处理或操作引发异常为止。
		next():default Long 
			返回迭代中的下一个元素。
		nextDouble():long
			返回迭代中的下一个long元素。
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
	24、Enumeration<E>接口：枚举接口。实现枚举接口的对象生成一系列元素，一次一个。对NextElement方法的连续调用返回序列的连续元素。目前已被迭代器Iterator<E>淘汰
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------	
		hasMoreElements():boolean 
			测试此枚举是否包含更多元素。
		nextElement():E 
			如果此枚举对象至少还要提供一个元素，则返回此枚举的下一个元素。
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
	25、Formattable接口：可格式化接口。任何需要使用Formatter的“s”转换说明符执行自定义格式化的类都必须实现Formattable接口。这个接口允许对任意对象进行格式化的基本控制。
	
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------	
		formatTo(Formatter formatter, int flags, int width, int precision):void 
			使用提供的formatter格式化对象。
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
	26、Comparable<T>接口：可比较接口。这个接口对实现它的每个类的对象施加了一个总的顺序。这种排序称为类的自然排序，类的CompareTo方法称为类的自然比较方法。
			实现此接口的对象列表（和数组）可以按collections.sort（和array.sort）自动排序。实现此接口的对象可以用作sorted map中的键或sorted set中的元素，而无需指定比较器。
	
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
		compareTo(T o):int 
			将此对象与指定的顺序对象进行比较。返回负整数、零或正整数，因为当前对象小于、等于或大于指定对象。
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	
	27、Comparator<T>接口：比较器，用于排序、分组。比较器可以传递给排序方法，（例如collections.sort或array.sort）允许对排序顺序进行精确控制。比较器还可用于控制某些数据结构（如sorted sets或sorted maps）的顺序。或者为没有自然排序的对象集合提供排序。
	
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
		comparing(Function<? super T, ? extends U> keyExtractor):static <T, U extends Comparable<? super U>> Comparator<T> 
			接受一个函数，该函数从类型T中提取一个可比较的排序键，并返回一个通过该排序键进行比较的比较器。
		comparing(Function<? super T, ? extends U> keyExtractor,Comparator<? super U> keyComparator):static <T, U> Comparator<T>
			接受从类型T中提取排序键的函数，并返回使用指定的比较器与该排序键进行比较的比较器。 
		comparingDouble(ToDoubleFunction<? super T> keyExtractor):static<T> Comparator<T> 
			接受一个函数，该函数从类型T中提取一个Double排序键，并返回一个比较器，该比较器通过该排序键进行比较。
		comparingInt(ToIntFunction<? super T> keyExtractor):static <T> Comparator<T> 
			接受一个函数，该函数从类型T中提取int排序键，并返回一个比较器，该比较器通过该排序键进行比较。
		comparingLong(ToLongFunction<? super T> keyExtractor):static <T> Comparator<T> 
			接受一个函数，该函数从类型T中提取一个long排序键，并返回一个比较器，该比较器通过该排序键进行比较。
		naturalOrder():static <T extends Comparable<? super T>> Comparator<T> 
			返回按自然顺序比较Comparable对象的比较器。
		nullsFirst(Comparator<? super T> comparator):static <T> Comparator<T> 
			返回一个null-friendly(空友好)比较器，该比较器将空（null）视为小于非空(non-null)。
		nullsLast(Comparator<? super T> comparator):static <T> Comparator<T> 
			返回一个null-friendly(空友好)比较器，该比较器认为空（null）大于非空（non-null）。
		reverseOrder():static <T extends Comparable<? super T>> Comparator<T> 
			返回一个与自然顺序相反的比较器。
		compare(T o1, T o2):int 
			比较其顺序的两个参数。
		equals(Object obj):boolean 
			指定的对象是否“等于”此比较器。
		reversed():default Comparator<T> 
			返回一个比较器，强制执行此比较器的反向顺序。
		thenComparing(Comparator<? super T> other):default Comparator<T> 
			用指定的比较器返回一个lexicographic-order比较器。
		thenComparing(Function<? super T, ? extends U> keyExtractor):default <U extends Comparable<? super U>> Comparator<T> 
			返回具有提取可比较排序键的函数的lexicographic-order比较器。
		thenComparing(Function<? super T, ? extends U> keyExtractor,Comparator<? super U> keyComparator):default <U> Comparator<T> 
			返回一个lexicographic-order比较器，该比较器具有提取要与给定比较器进行比较的键的函数。
		thenComparingDouble(ToDoubleFunction<? super T> keyExtractor):default Comparator<T> 
			返回具有提取Double排序键的函数的lexicographic-order单词顺序比较器。
		thenComparingInt(ToIntFunction<? super T> keyExtractor):default Comparator<T>
			返回具有提取int排序键的函数的lexicographic-order单词顺序比较器。
		thenComparingLong(ToLongFunction<? super T> keyExtractor):default Comparator<T> 
			返回具有提取Long排序键的函数的lexicographic-order单词顺序比较器。			
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------	
	28、RandomAccess接口：随机访问接口。列表实现类使用的标记接口，用于指示它们支持快速（通常是恒定时间）随机访问。此接口的主要目的是允许通用算法在应用于随机或顺序访问列表时更改其行为以提供良好的性能。
		
		实现类：ArrayList, AttributeList, CopyOnWriteArrayList, RoleList, RoleUnresolvedList, Stack, Vector
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
	29、Observer接口：观察对象接口。当一个类希望被通知可观察对象的变化时，它可以实现Observer接口。
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
		update(Observable o, Object arg):void 
			只要更改Observed对象，此方法就会被调用。	
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
	30、EventListener：事件监听器。是一个标记接口，就是说该接口内是没有任何方法的。所有事件监听器都需要实现该接口。事件监听器注册在事件源上，当事件源的属性或状态改变的时候，调用相应监听器内的回调方法。

	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		