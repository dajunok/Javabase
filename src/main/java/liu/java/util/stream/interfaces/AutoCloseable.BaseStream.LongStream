-----------------------------------------LongStream-----------------------------------------------------------------------------------------------------------------------------		
LongStream：Long流。 【Since:1.8】
	支持顺序和并行聚合操作的原始long值元素序列。这是原始专门化long流。
	下面的示例说明了使用Stream和LongStream的聚合操作，计算红色weights的权重之和：
	     long sum = widgets.stream()
	                         .filter(w -> w.getColor() == RED)
	                         .mapToLong(w -> w.getWeight())
	                         .sum();	
	有关流、流操作、流管道和并行性的其他规范，请参阅流的类文档和java.util.stream的包文档。
	
	
	接口定义	：public interface LongStream extends BaseStream<Long, LongStream>
	嵌套接口	：Builder
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
	builder():static Builder 
		返回LongStream的生成器。
	concat(LongStream a, LongStream b):static LongStream 
		a - 第一个流
		b - 地二个流	
		创建一个延迟连接的流，其元素是第一个流的所有元素，后跟第二个流的所有元素。如果两个输入流都是有序的，则结果流是有序的；如果两个输入流都是并行的，则结果流是并行的。当结果流关闭时，将调用两个输入流的关闭处理器。
		从重复的串联构造流时要小心。访问深度连接流的元素可能导致深度调用链，甚至导致StackOverflowException异常。
		返回两个输入流的串联。
	empty():static LongStream 
		返回空的顺序流LongStream。		
	generate(LongSupplier s):static LongStream 
		s - 生成元素的LongSupplier。
		返回无限的连续无序流，其中每个元素都由提供的LongSupplier生成。这适用于生成恒定流、随机元素流等。
		返回一种新的无限连续无序LongStream。
	iterate(final long seed, final LongUnaryOperator f):static LongStream 
		seed - 初始元素
		f - 要应用于前一个元素以生成新元素的函数
		返回通过将函数f迭代应用于初始元素种子（seed）而生成的无限序列有序LongStream，生成由seed（种子）、f(seed)、f(f(seed))等组成的流。	
		LongStream中的第一个元素（位置0）将是提供的种子。对于n>0，位置n处的元素将是对位置n-1处的元素应用函数f的结果。
		返回一种新的连续LongStream。
	of(int t):static LongStream 
		t - 单一元素
		返回包含单个元素的连续LongStream。		
	of(int... values):static LongStream 
		values - 新流的元素。
		返回其元素为指定值的顺序流。
	range(long startInclusive, long endExclusive):static LongStream 
		startInclusive - 初始值（含边界值）
		endExclusive - 	上限（不含边界值）
		按增量step 1返回从startInclusive (inclusive)到endExclusive (exclusive)的有序连续LongStream。
		返回int元素范围的顺序LongStream。
	rangeClosed(long startInclusive, long endInclusive):static LongStream 
		startInclusive - 初始值（含边界值）
		endInclusive - 	上限（含边界值）
		按增量步骤1返回从startInclusive (inclusive)到endInclusive (inclusive)的顺序有序LongStream。
		可以使用for循环按顺序生成相等的递增值序列，如下所示：
			for (long i = startInclusive; i <= endInclusive ; i++) { ... }
		返回long元素范围的顺序LongStream。
	allMatch(LongPredicate predicate):boolean 
		predicate - 应用于此流元素的非干扰无状态谓词。
		返回此流的所有元素是否与提供的谓词匹配。如果不需要确定结果，则不能在所有元素上计算谓词。如果流为空，则返回true，不计算谓词。
		这是一种短路终端操作。
		此方法评估谓词对流元素（对于所有x P(x)）的通用量化。如果流是空的，则表示量化是空满足的，并且始终为true（不考虑p（x））。
		如果流的所有元素与提供的谓词匹配，或者流为空，则为true，否则为false。
	anyMatch(LongPredicate predicate):boolean 
		predicate - 应用于此流元素的非干扰无状态谓词
		返回此流中的任何元素是否与提供的谓词匹配。如果不需要确定结果，则不能在所有元素上计算谓词。如果流为空，则返回false，不计算谓词。
		这是一种短路终端操作。
		此方法评估谓词对流元素（对于某些x p（x））的存在量化。
		如果流中的任何元素与提供的谓词匹配，则为true，否则为false。
	asDoubleStream():DoubleStream 
		返回由此流的元素组成的DoubleStream，已转换为double。
		这是一个中间操作。
	average():OptionalDouble 
		返回描述此流元素算术平均值的OptionalDouble，如果此流为空，则返回空的可选值。这是一种特殊的约简（reduction）情况。
		这是一个终端操作。
		包含该流的平均元素的OptionalDouble，或者如果该流为空，则为空OptionalDouble。
	boxed():Stream<Long> 
		返回一个由该流的元素组成的流，装箱为Long。
		这是一个中间操作。
	collect(Supplier<R> supplier,ObjLongConsumer<R> accumulator,BiConsumer<R, R> combiner):<R> R
		<R> - 结果的类型
		supplier - 创建新结果容器的函数。对于并行执行，可以多次调用此函数，每次都必须返回一个新值。
		accumulator - 一种关联的、非干扰的、无状态的函数，用于将追加元素合并到结果中。
		combiner - 用于组合两个参数值的关联、非干扰、无状态函数，必须与累加器函数兼容。
		对该流的元素执行可变的约简（reduction）操作。可变约简是一种约简值是可变结果容器（如ArrayList）的约简，元素通过更新结果的状态而不是替换结果来合并。这样产生的结果相当于：
		     R result = supplier.get();
		     for (long element : this stream)
		         accumulator.accept(result, element);
		     return result;	
		像reduce(long, LongBinaryOperator)一样，收集操作可以并行进行，而不需要额外的同步。	
		这是一个终端操作。
		返回约简（reduction）操作的结果。
	count():long 
		返回此流中元素的计数。这是一种特殊的约简（reduction）情况，相当于：
			 return mapToLong(e -> 1L).sum();
		这是一个终端操作。
	distinct():LongStream 
		返回由该流的不同元素组成的流。
		这是一个有状态的中间操作。
	filter(LongPredicate predicate):LongStream 
		predicate - 应用于每个元素以确定是否应包含该元素的非干扰无状态谓词。
		返回由该流中与给定谓词匹配的元素组成的流。
		这是一个中间操作。
	findAny():OptionalLong 
		返回描述流的某个元素的OptionalLong，如果流为空，则返回空的OptionalLong。
		这是一种短路终端操作。
		此操作的行为显式地不确定；可以自由选择流中的任何元素。这是为了在并行操作中获得最大的性能；代价是同一个源上的多个调用可能不会返回相同的结果。（如果需要稳定的结果，请改用findfirst（）。
	findFirst():OptionalLong 
		返回描述此流的第一个元素的OptionalLong，或者返回空的OptionalLong（如果流为空）。如果流没有遭遇顺序，则可以返回任何元素。
		这是一种短路终端操作。
	flatMap(LongFunction<? extends LongStream> mapper):LongStream 
		mapper - 一个无干扰、无状态的函数，用于产生新值的LongStream的每个元素。
		返回一个流，该流由将此流的每个元素替换为通过将提供的映射函数应用于每个元素而生成的映射流的内容的结果组成。在将每个映射流的内容放入此流后，将关闭每个映射流。（如果映射流为空，则使用空流。）
		这是一个中间操作。
	forEach(LongConsumer action):void 
		action - 对元素执行的非干扰操作
		为此流的每个元素执行操作。
		这是一个终端操作。
		对于并行流管道，此操作不保证遵守流的遭遇顺序，因为这样做会牺牲并行的好处。对于任何给定的元素，可以在库选择的任何时间和线程中执行操作。如果操作访问共享状态，它负责提供所需的同步。
	forEachOrdered(LongConsumer action):void 
		action - 对元素执行的非干扰操作
		对该流的每个元素执行一个操作，确保对具有定义的遇到顺序的流按遇到顺序处理每个元素。
		这是一个终端操作。
	iterator():PrimitiveIterator.OfLong 
		△ 返回此流元素的迭代器。
		这是一个终端操作。		
	limit(long maxSize):LongStream 
		maxSize - 流应限制的元素数量
		返回由该流的元素组成的流，截断后的长度不超过MaxSize。
		这是一个短路状态的中间操作。
		虽然limit()在顺序流管道上通常是一个廉价的操作，但在有序的并行管道上可能会非常昂贵，特别是对于maxSize的大值，因为limit(n)被约束返回的不仅仅是任何n个元素，而是遇到顺序中的前n个元素。使用无序流源（例如generate(LongSupplier)）或使用BaseStream.unordered()删除排序约束可能会导致并行管道中limit()的显著加速。如果需要与遇到顺序保持一致，并且并行管道中的limit()性能或内存利用率较差，则使用sequential()切换到顺序执行可能会提高性能。
		【Throws】：
			IllegalArgumentException 如果maxSize为负数。
	map(LongUnaryOperator mapper):LongStream 
		mapper - 应用于每个元素的无干扰无状态函数。
		返回由将给定函数应用于此流元素的结果组成的流。
		这是一个中间操作。		
	mapToDouble(LongToDoubleFunction mapper):DoubleStream 
		mapper - 应用于每个元素的无干扰无状态函数。
		返回由将给定函数应用于此流元素的结果组成的DoubleStream。
		这是一个中间操作。
	mapToInt(LongToIntFunction mapper):IntStream 
		mapper - 应用于每个元素的无干扰无状态函数。
		返回由将给定函数应用于此流元素的结果组成的IntStream。
		这是一个中间操作。
	mapToObj(LongFunction<? extends U> mapper):<U> Stream<U> 
		<U> - 新流的元素类型
		mapper - 应用于每个元素的无干扰无状态函数。
		返回一个对象值流，该流由将给定函数应用于此流元素的结果组成。
		这是一个中间操作。
	max():OptionalLong 
		返回描述此流的最大元素的OptionalInt，如果此流为空，则返回空的OptionalLong。这是一种特殊的约简（reduction）情况，相当于：
			return reduce(Long::max);
		这是一个终端操作。
	min():OptionalLong 
		返回描述此流的最小元素的OptionalInt，如果此流为空，则返回空的OptionalLong。这是一种特殊的约简（reduction）情况，相当于：
			return reduce(Long::min);
		这是一个终端操作。
	noneMatch(LongPredicate predicate):boolean 
		predicate - 应用于此流元素的非干扰无状态谓词
		返回此流中是否没有元素与提供的谓词匹配。如果不需要确定结果，则不能在所有元素上计算谓词。如果流为空，则返回true，不计算谓词。
		这是一种短路终端操作。
		如果流中没有与提供的谓词匹配的元素或流为空，则为true，否则为false。
	parallel():LongStream 
		△ 返回并行的等效流。可能返回自身，原因可能是流已并行，或者基础流状态已修改为并行。
		这是一个中间操作。
	peek(LongConsumer action):LongStream 
		action - 在元素从流中消耗时对其执行的非干扰操作。
		返回一个由该流的元素组成的流，此外，当元素从结果流中消耗时，对每个元素执行所提供的操作。
		这是一个中间操作。
		对于并行流管道，可以在任何时间调用该操作，也可以在上游操作使元素可用的任何线程中调用该操作。如果操作修改了共享状态，则它负责提供所需的同步。
		此方法主要用于支持调试，您希望在元素流过管道中的某个点时看到这些元素：
		     LongStream.of(1, 2, 3, 4)
		         .filter(e -> e > 2)
		         .peek(e -> System.out.println("Filtered value: " + e))
		         .map(e -> e * e)
		         .peek(e -> System.out.println("Mapped value: " + e))
		         .sum();		
	reduce(long identity, LongBinaryOperator op):long 
		identity - 累积函数的标识值
		op - 用于组合两个值的关联、非干扰、无状态函数	
		使用提供的标识值和关联累积函数对该流的元素执行约简（reduction）操作，并返回约简的值。这相当于：	
		     long result = identity;
		     for (long element : this stream)
		         result = accumulator.applyAsLong(result, element)
		     return result;	
		但不限于按顺序执行。
		标识值必须是累积器函数的标识。这意味着对于所有x，accumulator.apply(identity, x)都等于x。accumulator函数必须是一个关联函数。	
		这是一个终端操作。
		求和（sum）、最小值（Min）、最大值(Max)和平均值(average)都是简约操作（reduction）的特殊情况。数字流的求和可以表示为：
			long sum = integers.reduce(0, (a, b) -> a+b);
		或者更紧凑：
			long sum = integers.reduce(0, Long::sum);
		与简单改变循环中的运行总数相比，这似乎是执行聚合的一种更为迂回的方式，但简约操作（reduction）更为优雅地并行，不需要额外的同步，并且大大降低了数据竞争的风险。
	reduce(LongBinaryOperator op):OptionalInt 
		op - 用于组合两个值的关联、非干扰、无状态函数	
		使用关联累积函数对该流的元素执行约简（reduction）操作，并返回描述约简值（如果有）的OptionalInt。这相当于：
		     boolean foundAny = false;
		     long result = null;
		     for (long element : this stream) {
		         if (!foundAny) {
		             foundAny = true;
		             result = element;
		         }
		         else
		             result = accumulator.applyAsLong(result, element);
		     }
		     return foundAny ? OptionalLong.of(result) : OptionalLong.empty();		
		但不限于按顺序执行。
		累积器函数必须是关联函数。
		这是一个终端操作。
	sequential():LongStream 
		△ 返回顺序的等效流。可能返回自身，可能是因为流已经是连续的，也可能是因为基础流状态被修改为连续的。
		这是一个中间操作。
	skip(long n):LongStream 
		n - 要跳过的前导元素数
		返回在丢弃流的前n个元素后由该流的其余元素组成的流。如果此流包含的元素少于n个，则返回空流。
		这是一个有状态的中间操作。
		虽然skip()在顺序流管道上通常是一个廉价的操作，但是在有序的并行管道上，它可能会非常昂贵，特别是对于n的大值，因为skip（n）不仅限于跳过任何n个元素，而且必须跳过遇到顺序中的前n个元素。使用无序流源（例如generate(LongSupplier)）或使用BaseStream.unordered()删除排序约束可能会导致并行管道中skip()的显著加速。如果需要与遇到顺序保持一致，并且在并行管道中使用skip()时性能或内存利用率较差，则使用sequential()切换到顺序执行可能会提高性能。
		【Throws】：
			IllegalArgumentException 如果n为负数。
	sorted():LongStream 
		返回由此流的元素按排序顺序组成的流。
		这是一个有状态的中间操作。
	spliterator():Spliterator.OfLong
		△ 返回此流元素的拆分器。
		这是一个终端操作。
	sum():long
		返回此流中元素的总和。求和是约简操作（reduction）的一种特殊情况。
			return reduce(0, Long::sum);
		这是一个终端操作。
	summaryStatistics():LongSummaryStatistics 
		返回描述有关此流元素的各种摘要数据的LongSummaryStatistics。这是一种特殊的约简操作（reduction）情况。
		这是一个终端操作。
	toArray():long[] 
		返回包含此流元素的数组。
		这是一个终端操作。
		
		
-----------------------------------------1、LongStream.Builder-----------------------------------------------------------------------------------------------------------------------------		
1、Builder：生成器（或称构建器）。 【Since:1.8】
	LongStream的可变生成器。
	流生成器有一个生命周期，该生命周期从构建阶段开始，在此期间可以添加元素，然后过渡到构建阶段，在此之后不能添加元素。当build()方法被调用时，构建阶段就开始了，该方法创建一个有序流，其元素是按添加顺序添加到流生成器中的元素。
	

	接口定义	：public static interface Builder extends LongConsumer
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------	 
	accept(long t):void
		t - 输入参数
		向正在生成的流添加元素。 
		【Throws】：
			IllegalStateException 如果生成器已转换为构建状态
	add(long t):default Builder 
		t - 要添加的元素。
		向正在生成的流添加元素。	
		默认实现的行为类似于：
			accept(t)
			return this;
		【Throws】：
			IllegalStateException 如果生成器已转换为构建状态		
	build():LongStream 
		生成流，将此生成器转换为构建状态。如果在构建器进入构建状态后有进一步的操作尝试，则会引发IllegalStateException异常。
		【Throws】：
			IllegalStateException 如果生成器已转换为构建状态	
			
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
附录：
	1、注：文档中的△符号表示覆盖重写方法，✘符号表示已淘汰的方法。	
	2、注：文档中的★符号表示抽象方法或者直接抛出UnsupportedOperationException异常的方法，总之没有实现具体功能代码的方法。	
	