-----------------------------------------BaseStream<T, S extends BaseStream<T, S>>-----------------------------------------------------------------------------------------------------------------------------		
BaseStream<T, S extends BaseStream<T, S>>：基础流。 【Since:1.8】
	<T> - 流元素的类型
	<S> - 实现BaseStream流的类型	
	流的基本接口，它是支持顺序和并行聚合操作的元素序列。以下示例说明使用流类型Stream和IntStream的聚合操作，计算红色weights的权重之和：
	     int sum = widgets.stream()
	                      .filter(w -> w.getColor() == RED)
	                      .mapToInt(w -> w.getWeight())
	                      .sum();	
	有关管理所有流类型行为的流、流操作、流管道和并行性的其他规范，请参见流的类文档和java.util.stream的包文档。
	
	
	
	接口定义	：public interface BaseStream<T, S extends BaseStream<T, S>>  extends AutoCloseable
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
	close():void 
		关闭此流，导致调用此流管道的所有关闭处理器。
	isParallel():boolean 
		返回如果要执行终端操作，此流是否将并行执行。在调用终端流操作方法后调用此方法可能会产生不可预知的结果。
		如果此流在执行时将并行执行，则返回true。
	onClose(Runnable closeHandler):S
		 返回具有追加关闭处理器的等效流。当对流调用close()方法时，将运行close处理器，并按添加顺序执行。所有关闭处理器都将运行，即使早期关闭处理器抛出异常。如果任何关闭处理器引发异常，则引发的第一个异常将中继到close()的调用方，并将该异常中添加的任何剩余异常作为抑制的异常（除非剩余的异常之一与第一个异常相同，因为异常无法抑制自身。）可能会返回自身。
		这是一个中间操作。
	parallel():S 
		返回并行的等效流。可能返回自身，原因可能是流已并行，或者基础流状态已修改为并行。
		这是一个中间操作。
	sequential():S 
		返回顺序的等效流。可能返回自身，可能是因为流已经是顺序的，也可能是因为基础流状态被修改为顺序的。
		这是一个中间操作。
	spliterator():Spliterator<T> 
		返回此流元素的拆分器。
		这是一个终端操作。
	unordered():S 
		返回无序的等效流。可能返回自身，原因可能是流原本就是无序，或者基础流状态已被修改为无序。
		这是一个中间操作。
		
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
附录：
	1、注：文档中的△符号表示覆盖重写方法，✘符号表示已淘汰的方法。	
	2、注：文档中的★符号表示抽象方法或者直接抛出UnsupportedOperationException异常的方法，总之没有实现具体功能代码的方法。	
	