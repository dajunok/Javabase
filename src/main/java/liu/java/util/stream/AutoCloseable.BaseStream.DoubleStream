-----------------------------------------DoubleStream-----------------------------------------------------------------------------------------------------------------------------		
DoubleStream：Double流。 【Since:1.8】
	支持顺序和并行聚合操作的原始double值元素序列。这是原始专门化double流。
	下面的示例说明了使用Stream和DoubleStream的聚合操作，计算红色weights的权重之和：
	     double sum = widgets.stream()
	                         .filter(w -> w.getColor() == RED)
	                         .mapToDouble(w -> w.getWeight())
	                         .sum();	
	有关流、流操作、流管道和并行性的其他规范，请参阅流的类文档和java.util.stream的包文档。
	
	
	接口定义	：public interface DoubleStream extends BaseStream<Double, DoubleStream>
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
	builder():static Builder 
		返回DoubleStream的生成器。
	concat(DoubleStream a, DoubleStream b):static DoubleStream 
		a - 第一个流
		b - 地二个流	
		创建一个延迟连接的流，其元素是第一个流的所有元素，后跟第二个流的所有元素。如果两个输入流都是有序的，则结果流是有序的；如果两个输入流都是并行的，则结果流是并行的。当结果流关闭时，将调用两个输入流的关闭处理器。
		从重复的串联构造流时要小心。访问深度连接流的元素可能导致深度调用链，甚至导致StackOverflowException异常。
		返回两个输入流的串联。
	empty():static DoubleStream 
		返回空的顺序流DoubleStream。		
	generate(DoubleSupplier s):static DoubleStream 
		s - 生成元素的DoubleSupplier。
		返回无限的连续无序流，其中每个元素都由提供的DoubleSupplier生成。这适用于生成恒定流、随机元素流等。
		返回一种新的无限连续无序DoubleStream。
	iterate(final double seed, final DoubleUnaryOperator f):static DoubleStream 
		seed - 初始元素
		f - 要应用于前一个元素以生成新元素的函数
		返回通过将函数f迭代应用于初始元素种子（seed）而生成的无限序列有序DoubleStream，生成由seed（种子）、f(seed)、f(f(seed))等组成的流。	
		DoubleStream中的第一个元素（位置0）将是提供的种子。对于n>0，位置n处的元素将是对位置n-1处的元素应用函数f的结果。
		返回一种新的连续DoubleStream。
	of(double t):static DoubleStream 
		t - 单一元素
		返回包含单个元素的连续DoubleStream。		
	of(double... values):static DoubleStream 
		values - 新流的元素。
		返回其元素为指定值的顺序流。
	allMatch(DoublePredicate predicate):boolean 
		predicate - 应用于此流元素的非干扰无状态谓词。
		返回此流的所有元素是否与提供的谓词匹配。如果不需要确定结果，则不能在所有元素上计算谓词。如果流为空，则返回true，不计算谓词。
		这是一种短路终端操作。
		此方法评估谓词对流元素（对于所有x P(x)）的通用量化。如果流是空的，则表示量化是空满足的，并且始终为true（不考虑p（x））。
		如果流的所有元素与提供的谓词匹配，或者流为空，则为true，否则为false。
	anyMatch(DoublePredicate predicate):boolean 
		predicate - 应用于此流元素的非干扰无状态谓词
		返回此流中的任何元素是否与提供的谓词匹配。如果不需要确定结果，则不能在所有元素上计算谓词。如果流为空，则返回false，不计算谓词。
		这是一种短路终端操作。
		此方法评估谓词对流元素（对于某些x p（x））的存在量化。
		如果流中的任何元素与提供的谓词匹配，则为true，否则为false。
	average():OptionalDouble 
		返回描述此流元素算术平均值的OptionalDouble，如果此流为空，则返回空的可选值。如果任何记录值为NaN或总和在任何点为NaN，则平均值为NaN。
		根据记录值的顺序，返回的平均值可能会有所不同。该方法可以使用补偿求和或其他技术来实现，以减少用于计算平均值的数值求和中的误差范围。
		平均值是一个特殊的约简（reduction）操作。
		这是一个终端操作。
		通过增加绝对量排序的元素往往会产生更精确的结果。
		返回包含此流的平均元素的OptionalDouble，或者如果流为空，则为空的OptionalDouble。
	boxed():Stream<Double> 
		返回一个由该流的元素组成的流，装箱为double。
		这是一个中间操作。
	collect(Supplier<R> supplier,ObjDoubleConsumer<R> accumulator,BiConsumer<R, R> combiner):<R> R
		<R> - 结果的类型
		supplier - 创建新结果容器的函数。对于并行执行，可以多次调用此函数，每次都必须返回一个新值。
		accumulator - 一种关联的、非干扰的、无状态的函数，用于将追加元素合并到结果中。
		combiner - 用于组合两个参数值的关联、非干扰、无状态函数，必须与累加器函数兼容。
		对该流的元素执行可变的约简（reduction）操作。可变约简是一种约简值是可变结果容器（如ArrayList）的约简，元素通过更新结果的状态而不是替换结果来合并。这样产生的结果相当于：
		     R result = supplier.get();
		     for (double element : this stream)
		         accumulator.accept(result, element);
		     return result;	
		像reduce(double, DoubleBinaryOperator)一样，收集操作可以并行进行，而不需要额外的同步。	
		这是一个终端操作。
		返回约简（reduction）操作的结果。
	count():long 
		
	distinct():DoubleStream 
	filter(DoublePredicate predicate):DoubleStream 
	findAny():OptionalDouble 
	findFirst():OptionalDouble 
	flatMap(DoubleFunction<? extends DoubleStream> mapper):DoubleStream 
	forEach(DoubleConsumer action):void 
	forEachOrdered(DoubleConsumer action):void 
	iterator():PrimitiveIterator.OfDouble 
	limit(long maxSize):DoubleStream 
	map(DoubleUnaryOperator mapper):DoubleStream 
	mapToInt(DoubleToIntFunction mapper):IntStream 
	mapToLong(DoubleToLongFunction mapper):LongStream 
	mapToObj(DoubleFunction<? extends U> mapper):<U> Stream<U> 
	max():OptionalDouble 
	min():OptionalDouble 
	noneMatch(DoublePredicate predicate):boolean 
	parallel():DoubleStream 
	peek(DoubleConsumer action):DoubleStream 
	reduce(double identity, DoubleBinaryOperator op):double 
	reduce(DoubleBinaryOperator op):OptionalDouble 
	sequential():DoubleStream 
	skip(long n):DoubleStream 
	sorted():DoubleStream 
	spliterator():Spliterator.OfDouble 
	sum():double 
	summaryStatistics():DoubleSummaryStatistics 
	toArray():double[] 
	
	 
		
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
附录：
	1、注：文档中的△符号表示覆盖重写方法，✘符号表示已淘汰的方法。	
	2、注：文档中的★符号表示抽象方法或者直接抛出UnsupportedOperationException异常的方法，总之没有实现具体功能代码的方法。	
	