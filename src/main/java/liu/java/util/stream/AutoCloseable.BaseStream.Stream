-----------------------------------------Stream<T>-----------------------------------------------------------------------------------------------------------------------------		
Stream<T>：流。 【Since:1.8】
	<T> - 流元素的类型 
	支持顺序和并行聚合操作的元素序列。以下示例说明了使用Stream和IntStream的聚合操作：
     	int sum = widgets.stream()
                      .filter(w -> w.getColor() == RED)
                      .mapToInt(w -> w.getWeight())
                      .sum();	
	在本例中，widgets是一个Collection<Widget>。我们通过Collection.stream()创建一个Widget对象流，过滤它以生成只包含红色widgets的流，然后将其转换为表示每个红色widgets重量的int值流。然后将此流求和以产生总重量。
	除了对象引用流（Stream），还有原始专门化的IntStream、LongStream和DoubleStream，所有这些都被称为“流”，并符合这里描述的特性和限制。
	为了执行计算，流操作被组成流管道。流管道由源（可能是数组、集合、生成器函数、I/O通道等）、零个或多个中间操作（将流转换为另一个流，如过滤器（filter(Predicate)）和终端操作（产生结果或副作用，如count()或forEach(Consumer)）组成。流是惰性的（延迟的）；只有在启动终端操作时才对源数据执行计算，并且仅在需要时消耗源元素。	
	集合和流虽然具有一些表面上的相似性，但有不同的目标。集合主要涉及对其要素的有效管理和访问。相反，流不提供直接访问或操作其元素的方法，而是涉及声明性地描述其源和将在该源上聚合执行的计算操作。但是，如果提供的流操作没有提供所需的功能，则可以使用BaseStream.iterator()和BaseStream.spliterator()操作来执行受控的遍历。
	像上面的“widgets”示例一样，流管道可以被视为流源上的查询。除非源被显式设计为并发修改（如ConcurrentHashMap），否则在查询流源时修改流源可能会导致不可预知或错误的行为。
	大多数流操作接受描述用户指定行为的参数，例如在上面的示例中传递给mapToInt的lambda表达式w -> w.getWeight()。为了保持正确的行为，这些行为参数：
		● 必须是非干扰的（它们不会修改流源）；并且
		● 在大多数情况下，必须是无状态的（其结果不应依赖于在流管道执行期间可能更改的任何状态）。
	此类参数始终是函数接口（如Function）的实例，并且通常是lambda表达式或方法引用。除非另有规定，否则这些参数必须为非空（non-null）。
	流只能操作一次（调用中间流或终端流操作）。例如，这就排除了“分叉”流，其中同一个源为两个或多个管道提供源，或者同一个流的多个遍历。如果流实现检测到流正在被重用，则可能引发IllegalStateException异常。但是，由于某些流操作可能返回其接收器而不是新的流对象，因此可能无法在所有情况下检测重用。
	流具有BaseStream.close()方法并实现可自动关闭，但几乎所有流实例在使用后实际上都不需要关闭。通常，只有源为IO通道的流（例如，由Files.lines(Path, Charset)）才需要关闭。大多数流都由集合、数组或生成函数支持，这些集合、数组或生成函数不需要特殊的资源管理。（如果流确实需要关闭，则可以在 try-with-resources语句中将其声明为资源。）
	流管道可以按顺序执行，也可以并行执行。此执行模式是流的属性。流是通过初始选择顺序或并行执行创建的。（例如，Collection.stream()创建顺序流，Collection.parallelStream()创建并行流。）可以通过BaseStream.sequential()或BaseStream.parallel()方法修改执行模式的选择，并可以使用BaseStream.isParallel()方法进行查询。
	
	
	接口定义	：public interface Stream<T> extends BaseStream<T, Stream<T>>
	嵌套接口	：Builder
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
	builder():static<T> Builder<T> 
		返回Stream的生成器。
	concat(Stream<? extends T> a, Stream<? extends T> b):static <T> Stream<T> 
		<T> - 流元素的类型 
		a - 第一个流
		b - 地二个流	
		创建一个延迟连接的流，其元素是第一个流的所有元素，后跟第二个流的所有元素。如果两个输入流都是有序的，则结果流是有序的；如果两个输入流都是并行的，则结果流是并行的。当结果流关闭时，将调用两个输入流的关闭处理器。
		从重复的串联构造流时要小心。访问深度连接流的元素可能导致深度调用链，甚至导致StackOverflowException异常。
		返回两个输入流的串联。
	empty():static<T> Stream<T> 
		<T> - 流元素的类型 
		返回空的顺序流Stream。		
	generate(Supplier<T> s):static<T> Stream<T> 
		s - 生成元素的Supplier。
		返回无限的连续无序流，其中每个元素都由提供的Supplier生成。这适用于生成恒定流、随机元素流等。
		返回一种新的无限连续无序Stream。
	iterate(final T seed, final UnaryOperator<T> f):static<T> Stream<T> 
		seed - 初始元素
		f - 要应用于前一个元素以生成新元素的函数
		返回通过将函数f迭代应用于初始元素种子（seed）而生成的无限序列有序IntStream，生成由seed（种子）、f(seed)、f(f(seed))等组成的流。	
		Stream中的第一个元素（位置0）将是提供的种子。对于n>0，位置n处的元素将是对位置n-1处的元素应用函数f的结果。
		返回一种新的连续Stream。
	of(T t):static<T> Stream<T> 
		t - 单一元素
		返回包含单个元素的连续Stream。		
	of(T... values):static<T> Stream<T> 
		values - 新流的元素。
		返回其元素为指定值的顺序流。
	allMatch(Predicate<? super T> predicate):boolean 
		predicate - 应用于此流元素的非干扰无状态谓词。
		返回此流的所有元素是否与提供的谓词匹配。如果不需要确定结果，则不能在所有元素上计算谓词。如果流为空，则返回true，不计算谓词。
		这是一种短路终端操作。
		此方法评估谓词对流元素（对于所有x P(x)）的通用量化。如果流是空的，则表示量化是空满足的，并且始终为true（不考虑p（x））。
		如果流的所有元素与提供的谓词匹配，或者流为空，则为true，否则为false。
	anyMatch(Predicate<? super T> predicate):boolean 
		predicate - 应用于此流元素的非干扰无状态谓词
		返回此流中的任何元素是否与提供的谓词匹配。如果不需要确定结果，则不能在所有元素上计算谓词。如果流为空，则返回false，不计算谓词。
		这是一种短路终端操作。
		此方法评估谓词对流元素（对于某些x p（x））的存在量化。
		如果流中的任何元素与提供的谓词匹配，则为true，否则为false。
	collect(Supplier<R> supplier,BiConsumer<R, ? super T> accumulator,BiConsumer<R, R> combiner):<R> R 
		<R> - 结果的类型。
		supplier - 创建新结果容器的函数。对于并行执行，可以多次调用此函数，每次都必须返回一个新值。
		accumulator - 一种关联的、非干扰的、无状态的函数，用于将附加元素合并到结果中。
		combiner - 用于组合两个值的关联、非干扰、无状态函数，必须与累积器函数兼容。	
		对该流的元素执行可变的约简操作（reduction）。可变约简是一种约简值是可变结果容器（如ArrayList）的约简，元素通过更新结果的状态而不是替换结果来合并。这样产生的结果相当于：
		     R result = supplier.get();
		     for (T element : this stream)
		         accumulator.accept(result, element);
		     return result;
		像reduce(Object, BinaryOperator)一样，collect操作可以并行化，而不需要额外的同步。
		这是一个终端操作。
		JDK中有许多现有的类，它们的签名非常适合作为collect()的参数与方法引用一起使用。例如，以下内容将把字符串累积到数组列表中：
			List<String> asList = stringStream.collect(ArrayList::new, ArrayList::add,ArrayList::addAll);
		下面将获取一个字符串流并将它们连接到一个字符串中：
			String concat = stringStream.collect(StringBuilder::new, StringBuilder::append,
			                                          StringBuilder::append)
			                                 .toString();
		返回约简操作（reduction）的结果。
	collect(Collector<? super T, A, R> collector):<R, A> R 
		<R> - 结果的类型。
		<A> - 收集器的中间累积类型		
		collector - 描述简约操作（reduction）的收集器
		使用收集器对此流的元素执行可变简约操作（reduction）。收集器将用作collect(Supplier, BiConsumer, BiConsumer)参数的函数封装起来，允许重用收集策略和收集操作的组合，如多级别分组或分区
		如果流是并行的，并且收集器是并发的，并且流是无序的或收集器是无序的，那么将执行并发约简（有关并发约简的详细信息，请参阅Collector）。
		这是一个终端操作。
		并行执行时，可以实例化、填充和合并多个中间结果，以保持可变数据结构的隔离。因此，即使与非线程安全的数据结构（如ArrayList）并行执行，也不需要进行额外的同步来并行简约（reduction）。
		以下内容将把字符串累积到ArrayList中：
			 List<String> asList = stringStream.collect(Collectors.toList());
		以下将按城市对Person对象进行分类：
			Map<String, List<Person>> peopleByCity
			         = personStream.collect(Collectors.groupingBy(Person::getCity));
		下面将按州和市对Person对象进行分类，将两个收集器层叠在一起：
		     Map<String, Map<String, List<Person>>> peopleByStateAndCity
		         = personStream.collect(Collectors.groupingBy(Person::getState,
		                                                      Collectors.groupingBy(Person::getCity)));		
		返回约简操作（reduction）的结果。			
	count():long 
		返回此流中元素的计数。这是一种特殊的约简（reduction）情况，相当于：
			 return mapToLong(e -> 1L).sum();
		这是一个终端操作。
	distinct():Stream<T>  
		返回由该流的不同元素组成的流。
		这是一个有状态的中间操作。
	filter(Predicate<? super T> predicate):Stream<T>  
		predicate - 应用于每个元素以确定是否应包含该元素的非干扰无状态谓词。
		返回由该流中与给定谓词匹配的元素组成的流。
		这是一个中间操作。
	findAny():Optional<T> 
		返回描述流的某个元素的Optional，如果流为空，则返回空的Optional。
		这是一种短路终端操作。
		此操作的行为显式地不确定；可以自由选择流中的任何元素。这是为了在并行操作中获得最大的性能；代价是同一个源上的多个调用可能不会返回相同的结果。（如果需要稳定的结果，请改用findFirst()。
	findFirst():Optional<T> 
		返回描述此流的第一个元素的Optional，或者返回空的Optional（如果流为空）。如果流没有遭遇顺序，则可以返回任何元素。
		这是一种短路终端操作。
	flatMap(Function<? super T, ? extends Stream<? extends R>> mapper):<R> Stream<R> 
		mapper - 一个无干扰、无状态的函数，用于产生新值流的每个元素。
		返回一个流，该流由将此流的每个元素替换为通过将提供的映射函数应用于每个元素而生成的映射流的内容的结果组成。在将每个映射流的内容放入此流后，将关闭每个映射流。（如果映射流为空，则使用空流。）
		这是一个中间操作。
		flatMap()操作的效果是对流的元素应用一对多的转换，然后将生成的元素展平为新的流。
		案例，如果订单是采购订单流，并且每个采购订单包含行项目集合，则以下内容将生成包含所有订单中所有行项目的流：
			orders.flatMap(order -> order.getLineItems().stream())...
		如果path是文件的路径，则以下内容将生成该文件中包含的单词流：
		     Stream<String> lines = Files.lines(path, StandardCharsets.UTF_8);
		     Stream<String> words = lines.flatMap(line -> Stream.of(line.split(" +")));	
		传递给flatMap的mapper函数使用简单的正则表达式将一行拆分为一个单词数组，然后从该数组创建一个单词流。
	flatMapToDouble(Function<? super T, ? extends DoubleStream> mapper):DoubleStream 
		mapper - 一个无干扰、无状态的函数，用于产生新值流的每个元素。
		返回一个DoubleStream，其中包含将此流的每个元素替换为通过对每个元素应用提供的映射函数而生成的映射流的内容的结果。将每个映射流的内容放入此流后，将关闭每个映射流。（如果映射流为空，则使用空流。）
		这是一个中间操作。
	flatMapToInt(Function<? super T, ? extends IntStream> mapper):IntStream 
		mapper - 一个无干扰、无状态的函数，用于产生新值流的每个元素。
		返回一个IntStream，其中包含将此流的每个元素替换为通过对每个元素应用提供的映射函数而生成的映射流的内容的结果。将每个映射流的内容放入此流后，将关闭每个映射流。（如果映射流为空，则使用空流。）
		这是一个中间操作。
	flatMapToLong(Function<? super T, ? extends LongStream> mapper):LongStream 	
		mapper - 一个无干扰、无状态的函数，用于产生新值流的每个元素。
		返回一个LongStream，其中包含将此流的每个元素替换为通过对每个元素应用提供的映射函数而生成的映射流的内容的结果。将每个映射流的内容放入此流后，将关闭每个映射流。（如果映射流为空，则使用空流。）
		这是一个中间操作。	
	forEach(Consumer<? super T> action):void  
		action - 对元素执行的非干扰操作
		为此流的每个元素执行操作。
		这是一个终端操作。
		此操作的行为显式不确定。对于并行流管道，此操作不保证遵守流的遭遇顺序，因为这样做会牺牲并行的好处。对于任何给定的元素，可以在库选择的任何时间和线程中执行操作。如果操作访问共享状态，它负责提供所需的同步。
	forEachOrdered(Consumer<? super T> action):void 
		action - 对元素执行的非干扰操作
		如果流具有定义的遇到顺序，则按流的遇到顺序为此流的每个元素执行操作。
		这是一个终端操作。
		此操作一次处理一个元素，如果存在，则按遇到顺序处理。对一个元素执行操作发生在对后续元素执行操作之前，但对于任何给定元素，可以在库选择的任何线程中执行该操作。
	limit(long maxSize):Stream<T> 
		maxSize - 流应限制的元素数量
		返回由该流的元素组成的流，截断后的长度不超过MaxSize。
		这是一个短路状态的中间操作。
		虽然limit()在顺序流管道上通常是一个廉价的操作，但在有序的并行管道上可能会非常昂贵，特别是对于maxSize的大值，因为limit(n)被约束返回的不仅仅是任何n个元素，而是遇到顺序中的前n个元素。使用无序流源（例如generate(Supplier)）或使用BaseStream.unordered()删除排序约束可能会导致并行管道中limit()的显著加速。如果需要与遇到顺序保持一致，并且并行管道中的limit()性能或内存利用率较差，则切换到BaseStream.sequential()的顺序执行可能会提高性能。
		【Throws】：
			IllegalArgumentException 如果maxSize为负数。
	map(Function<? super T, ? extends R> mapper):<R> Stream<R> 
		<R> - 新流的元素类型
		mapper - 应用于每个元素的无干扰无状态函数。
		返回由将给定函数应用于此流元素的结果组成的Stream。
		这是一个中间操作。
	mapToDouble(ToDoubleFunction<? super T> mapper):DoubleStream
		mapper - 应用于每个元素的无干扰无状态函数。
		返回由将给定函数应用于此流元素的结果组成的DoubleStream。
		这是一个中间操作。
	mapToInt(ToIntFunction<? super T> mapper):IntStream 
		mapper - 应用于每个元素的无干扰无状态函数。
		返回由将给定函数应用于此流元素的结果组成的IntStream。
		这是一个中间操作。	
	mapToLong(ToLongFunction<? super T> mapper):LongStream 
		mapper - 应用于每个元素的无干扰无状态函数。
		返回由将给定函数应用于此流元素的结果组成的LongStream。
		这是一个中间操作。
	max(Comparator<? super T> comparator):Optional<T> 
		comparator - 用于比较此流元素的无干扰无状态比较器
		根据提供的比较器返回此流的最大元素。这是一种特殊的约简操作（reduction）情况。
		这是一个终端操作。
		描述此流的最大元素的Optional，或者如果流为空，则为空Optional。
		【Throws】：
			NullPointerException 如果最大元素为null。
	min(Comparator<? super T> comparator):Optional<T> 
		comparator - 用于比较此流元素的无干扰无状态比较器
		根据提供的比较器返回此流的最小元素。这是一种特殊的约简操作（reduction）情况。
		这是一个终端操作。
		描述此流的最小元素的Optional，或者如果流为空，则为空Optional。
		【Throws】：
			NullPointerException 如果最小元素为null。
	noneMatch(Predicate<? super T> predicate):boolean 
		predicate - 应用于此流元素的非干扰无状态谓词
		返回此流中是否没有元素与提供的谓词匹配。如果不需要确定结果，则不能在所有元素上计算谓词。如果流为空，则返回true，不计算谓词。
		这是一种短路终端操作。
		如果流中没有与提供的谓词匹配的元素或流为空，则为true，否则为false。
	peek(Consumer<? super T> action):Stream<T> 
		action - 在元素从流中消耗时对其执行的非干扰操作。
		返回一个由该流的元素组成的流，此外，当元素从结果流中消耗时，对每个元素执行所提供的操作。
		这是一个中间操作。
		对于并行流管道，可以在任何时间调用该操作，也可以在上游操作使元素可用的任何线程中调用该操作。如果操作修改了共享状态，则它负责提供所需的同步。
		此方法主要用于支持调试，您希望在元素流过管道中的某个点时看到这些元素：
		     Stream.of("one", "two", "three", "four")
		         .filter(e -> e.length() > 3)
		         .peek(e -> System.out.println("Filtered value: " + e))
		         .map(String::toUpperCase)
		         .peek(e -> System.out.println("Mapped value: " + e))
		         .collect(Collectors.toList());		
	reduce(T identity, BinaryOperator<T> accumulator):T 
		identity - 累积函数的标识值
		op - 用于组合两个值的关联、非干扰、无状态函数	
		使用提供的标识值和关联累积函数对该流的元素执行约简（reduction）操作，并返回约简的值。这相当于：	
		     T result = identity;
		     for (T element : this stream)
		         result = accumulator.apply(result, element)
		     return result;
		但不限于按顺序执行。
		标识值必须是累积器函数的标识。这意味着对于所有x，accumulator.apply(identity, x)都等于x。accumulator函数必须是一个关联函数。	
		这是一个终端操作。
		求和（sum）、最小值（Min）、最大值(Max)和平均值(average)都是简约操作（reduction）的特殊情况。数字流的求和可以表示为：
			Integer sum = integers.reduce(0, (a, b) -> a+b);
		或者更紧凑：
			Integer sum = integers.reduce(0, Integer::sum);
		与简单改变循环中的运行总数相比，这似乎是执行聚合的一种更为迂回的方式，但简约操作（reduction）更为优雅地并行，不需要额外的同步，并且大大降低了数据竞争的风险。
	reduce(BinaryOperator<T> accumulator):Optional<T> 
		op - 用于组合两个值的关联、非干扰、无状态函数	
		使用关联累积函数对该流的元素执行约简（reduction）操作，并返回描述约简值（如果有）的Optional。这相当于：
		     boolean foundAny = false;
		     T result = null;
		     for (T element : this stream) {
		         if (!foundAny) {
		             foundAny = true;
		             result = element;
		         }
		         else
		             result = accumulator.apply(result, element);
		     }
		     return foundAny ? Optional.of(result) : Optional.empty();		
		但不限于按顺序执行。
		累积器函数必须是关联函数。
		这是一个终端操作。
	reduce(U identity,BiFunction<U, ? super T, U> accumulator,BinaryOperator<U> combiner):<U> U 
		///////////?????????????????????
		
	sequential():IntStream 
		△ 返回顺序的等效流。可能返回自身，可能是因为流已经是连续的，也可能是因为基础流状态被修改为连续的。
		这是一个中间操作。
	skip(long n):IntStream 
		n - 要跳过的前导元素数
		返回在丢弃流的前n个元素后由该流的其余元素组成的流。如果此流包含的元素少于n个，则返回空流。
		这是一个有状态的中间操作。
		虽然skip()在顺序流管道上通常是一个廉价的操作，但是在有序的并行管道上，它可能会非常昂贵，特别是对于n的大值，因为skip（n）不仅限于跳过任何n个元素，而且必须跳过遇到顺序中的前n个元素。使用无序流源（例如generate(IntSupplier)）或使用BaseStream.unordered()删除排序约束可能会导致并行管道中skip()的显著加速。如果需要与遇到顺序保持一致，并且在并行管道中使用skip()时性能或内存利用率较差，则使用sequential()切换到顺序执行可能会提高性能。
		【Throws】：
			IllegalArgumentException 如果n为负数。
	sorted():IntStream 
		返回由此流的元素按排序顺序组成的流。
		这是一个有状态的中间操作。
	spliterator():Spliterator.OfInt 
		△ 返回此流元素的拆分器。
		这是一个终端操作。
	sum():int
		返回此流中元素的总和。求和是约简操作（reduction）的一种特殊情况。
			return reduce(0, Integer::sum);
		这是一个终端操作。
	summaryStatistics():IntSummaryStatistics 
		返回描述有关此流元素的各种摘要数据的IntSummaryStatistics。这是一种特殊的约简操作（reduction）情况。
		这是一个终端操作。
	toArray():int[] 
		△ 返回包含此流元素的数组。
		这是一个终端操作。
		
		
-----------------------------------------1、IntStream.Builder-----------------------------------------------------------------------------------------------------------------------------		
1、Builder：生成器（或称构建器）。 【Since:1.8】
	IntStream的可变生成器。
	流生成器有一个生命周期，该生命周期从构建阶段开始，在此期间可以添加元素，然后过渡到构建阶段，在此之后不能添加元素。当build()方法被调用时，构建阶段就开始了，该方法创建一个有序流，其元素是按添加顺序添加到流生成器中的元素。
	

	接口定义	：public static interface Builder extends IntConsumer
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------	 
	accept(double t):void
		t - 输入参数
		向正在生成的流添加元素。 
		【Throws】：
			IllegalStateException 如果生成器已转换为构建状态
	add(int t):default Builder 
		t - 要添加的元素。
		向正在生成的流添加元素。	
		默认实现的行为类似于：
			accept(t)
			return this;
		【Throws】：
			IllegalStateException 如果生成器已转换为构建状态		
	build():IntStream 
		生成流，将此生成器转换为构建状态。如果在构建器进入构建状态后有进一步的操作尝试，则会引发IllegalStateException异常。
		【Throws】：
			IllegalStateException 如果生成器已转换为构建状态	
			
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
附录：
	1、注：文档中的△符号表示覆盖重写方法，✘符号表示已淘汰的方法。	
	2、注：文档中的★符号表示抽象方法或者直接抛出UnsupportedOperationException异常的方法，总之没有实现具体功能代码的方法。	
	