----------------------------------------Matcher--------------------------------------------------------------------------------------------------------------
Matcher：匹配器。	【Since:1.4】
	通过解释模式(Pattern)对字符序列执行匹配操作的引擎。
	Matcher是通过调用模式的匹配器方法从模式创建的。创建后，匹配器可用于执行三种不同的匹配操作：
		● matches方法尝试根据模式匹配整个输入序列。
		● lookingAt方法尝试根据模式匹配输入序列，从开头开始。
		● find方法扫描输入序列，查找与模式匹配的下一个子序列。
	这些方法中的每一个都返回一个指示成功或失败的布尔值。通过查询匹配器的状态可以获得有关成功匹配的更多信息。
	匹配器在其输入的名为区域（region）的子集中查找匹配项。默认情况下，区域包含匹配器的所有输入。区域可以通过region方法修改，也可以通过regionStart和regionEnd方法查询。区域边界与某些模式构造交互的方式可以更改。有关详细信息，请参见useAnchoringBounds和useTransparentBounds。
	此类还定义了用新字符串替换匹配的子序列的方法，如果需要，这些字符串的内容可以从匹配结果中计算出来。appendReplacement和appendTail方法可以串联使用，以便将结果收集到现有的字符串缓冲区中，或者可以使用更方便的replaceAll方法创建一个字符串，在该字符串中替换输入序列中的每个匹配子序列。
	匹配器的显式状态包括最近成功匹配的开始和结束索引。它还包括模式中每个捕获组捕获的输入子序列的开始和结束索引，以及此类子序列的总数。为了方便起见，还提供了以字符串形式返回这些捕获的子序列的方法。
	Matcher的显式状态最初是未定义的；在成功匹配之前尝试查询它的任何部分将导致引发IllegalStateException。匹配器的显式状态由每个匹配操作重新计算。
	匹配器的隐式状态包括输入字符序列和追加位置，初始位置为0，由appendReplacement方法更新。
	匹配器可以通过调用其reset()方法显式重置，或者，如果需要新的输入序列，则可以调用其reset(CharSequence)方法。重置匹配器将丢弃其显式状态信息，并将追加位置设置为0。
	这个类的实例对于多个并发线程的使用是不安全的。
	
	
	类定义	：public final class Matcher implements MatchResult
	实现接口	：MatchResult
------------------------------------------------------------------------------------------------------------------------------------------------------
Method Summary（方法概要）：
	quoteReplacement(String s):static String 
		s - 要文本化的字符串
		返回指定字符串的文本替换字符串。此方法生成一个字符串，该字符串将在Matcher类的appendReplacement方法中用作文本替换。生成的字符串将与被视为文本序列的s中的字符序列匹配。斜线（“\”）和美元符号（“$”）将没有特殊含义。
	appendReplacement(StringBuffer sb, String replacement):Matcher 
		sb - 目标字符串缓冲区
		replacement - 替换字符串
		实现非终端追加和替换步骤。
		此方法执行以下操作：
			1、它从输入序列中读取字符，从追加位置开始，并将它们追加到给定的字符串缓冲区。它在读取上一个匹配前面的最后一个字符（即索引start()-1处的字符）后停止。
			2、它将给定的替换字符串追加到字符串缓冲区。
			3、它将此匹配器的追加位置设置为匹配的最后一个字符的索引，再加上一个字符，即end()。		
		替换字符串可以包含对上一个匹配期间捕获的子序列的引用：每次出现的${name}或$g将被分别评估相应group(name)或group(g)的结果替换。对于$g，在$之后的第一个数字总是作为组引用的一部分处理。如果后续编号构成合法的组引用，则将其并入g中。只有数字“0”到“9”被视为组引用的潜在组件。例如，如果第2组与字符串“foo”匹配，那么传递替换字符串"$2bar"将导致“foobar”追加到字符串缓冲区。美元符号（$）可以作为文本包含在替换字符串中，方法是在它前面加上一个反斜杠（\$）。
		请注意，替换字符串中的反斜杠（\）和美元符号（$）可能导致结果与将其视为文字替换字符串时的结果不同。美元符号可以被视为对上述捕获的子序列的引用，反斜杠用于转义替换字符串中的文字字符。
		此方法与Appendtail和Find方法一起用于循环中。例如，下面的代码将院子里的一条狗、两条狗写入标准输出流：
			 Pattern p = Pattern.compile("cat");
			 Matcher m = p.matcher("one cat two cats in the yard");
			 StringBuffer sb = new StringBuffer();
			 while (m.find()) {
			     m.appendReplacement(sb, "dog");
			 }
			 m.appendTail(sb);
			 System.out.println(sb.toString());
		案例1：例如，有字符串fatcatfatcatfat,假设既有正则表达式模式为"cat"，第一次匹配后调用appendReplacement(sb,"dog"),那么这时StringBuffer sb的内容为fatdog，也就是fatcat中的cat被替换为dog并且与匹配子串前的内容加到sb里，而第二次匹配后调用appendReplacement(sb,"dog")，那么sb的内容就变为fatdogfatdog，如果最后再调用一次appendTail（sb）,那么sb最终的内容将是fatdogfatdogfat。 
		返回此匹配器。
		【Throws】：
			IllegalStateException 如果尚未尝试匹配，或者上一个匹配操作失败
			IllegalArgumentException 如果替换字符串引用了模式中不存在的命名捕获组
			IndexOutOfBoundsException 如果替换字符串引用了模式中不存在的捕获组	
	appendTail(StringBuffer sb):StringBuffer 
		sb - 目标字符串缓冲区
		实现终端追加和替换步骤。
		此方法从输入序列中读取从追加位置开始的字符，并将它们追加到给定的字符串缓冲区。它打算在一个或多个appendReplacement方法调用之后调用，以便复制输入序列的其余部分。
		返回目标字符串缓冲区sb。
	end():int 
		返回最后一个匹配字符后的偏移量。
		【Throws】：
			IllegalStateException 如果尚未尝试匹配，或者上一个匹配操作失败
	end(int group):int 
		返回在上一个匹配操作期间给定组捕获的子序列的最后一个字符后的偏移量。
		捕获组从左到右索引，从1开始。Group 0表示整个模式，因此表达式m.end(0)等价于m.end()。
		【Throws】：
			IllegalStateException 如果尚未尝试匹配，或者上一个匹配操作失败。
			IndexOutOfBoundsException 如果模式中没有具有给定索引的捕获组
	find():boolean 
		尝试查找与模式匹配的输入序列的下一个子序列。
		此方法从该匹配器区域（region）的开始处开始，或者，如果该方法的上一次调用成功并且匹配器此后未被重置，则从与上一个匹配项不匹配的第一个字符开始。
		如果匹配成功，则可以通过start、end和group方法获取更多信息。
		如果且仅当输入序列的子序列与此匹配器的模式匹配时返回true。
	find(int start):boolean
		 start - 开始搜索匹配项的索引
		 重置此匹配器，然后尝试从指定的索引开始查找与模式匹配的输入序列的下一个子序列。
		 如果匹配成功，则可以通过start、end和group方法获取更多信息，find()方法的后续调用将从与此匹配不匹配的第一个字符开始。
		 如果且仅当从给定索引开始的输入序列的子序列与此匹配器的模式匹配时返回true。
		 【Throws】：
		 	IndexOutOfBoundsException 如果start小于零或start大于输入序列的长度。
	group():String 
		返回与上一个匹配项匹配的输入子序列。
		对于具有输入序列s的匹配器m，表达式m.group()和s.substring(m.start(), m.end())是等效的。
		请注意，一些模式（例如a*）与空字符串匹配。当模式成功匹配输入中的空字符串时，此方法将返回空字符串。
		返回以字符串形式与上一个匹配项匹配的（可能为空）子序列。
		【Throws】：
			IllegalStateException 如果尚未尝试匹配，或者上一个匹配操作失败。
	group(int group):tring 
		group - 此匹配器模式中捕获组的索引
		返回在上一个匹配操作期间由给定组捕获的输入子序列。
		对于匹配器m、输入序列s和组索引g，表达式m.group(g)和s.substring(m.start(g), m.end(g))是等效的。
		捕获组从左到右索引，从1开始。group zero表示整个模式，因此表达式m.group(0)等价于m.group()。
		如果匹配成功，但指定的组未能匹配输入序列的任何部分，则返回null。请注意，一些组（例如（a*）与空字符串匹配。当此类组成功匹配输入中的空字符串时，此方法将返回空字符串。
		【Throws】：
			IllegalStateException 如果尚未尝试匹配，或者上一个匹配操作失败。
			IndexOutOfBoundsException 如果模式中没有具有给定索引的捕获组
	group(String name):String 
		name - 此匹配器模式中已命名的捕获组的名称。
		返回在上一个匹配操作中由给定的命名捕获组捕获的输入子序列。
		如果匹配成功，但指定的组未能匹配输入序列的任何部分，则返回null。请注意，一些组（例如（a*）与空字符串匹配。当此类组成功匹配输入中的空字符串时，此方法将返回空字符串。
		返回在上一次匹配期间由命名组捕获的（可能为空）子序列，或者如果该组未能匹配部分输入，则返回null。
		【Throws】：
			IllegalStateException 如果尚未尝试匹配，或者上一个匹配操作失败。
			IllegalArgumentException 如果模式中没有具有给定名称的捕获组
	groupCount():int 
		返回此匹配器模式中捕获组的数目。
		零组按约定表示整个模式。它不包括在这个计数中。
		任何小于或等于此方法返回值的非负整数都保证是此匹配器的有效组索引。
	hasAnchoringBounds():boolean 
		查询此匹配器区域（region）边界的锚定。
		如果此匹配器使用锚定边界，则此方法返回true，否则返回false。
		有关锚定边界的描述，请参见useAnchoringBounds。
		默认情况下，匹配器使用锚定区域边界。
	hasTransparentBounds():boolean 
		查询此匹配器区域（region）边界的透明度。
		如果此匹配器使用透明边界，则此方法返回true；如果此匹配器使用不透明边界，则返回false。
		有关透明和不透明边界的描述，请参见UseTransparentBounds。
		默认情况下，匹配器使用不透明区域边界。
	hitEnd():boolean 
		如果搜索引擎在该匹配器上次执行的匹配操作中击中了输入的结尾，则返回true。
		当此方法返回true时，可能会有更多的输入更改上一次搜索的结果。
	lookingAt():boolean 
		尝试根据模式匹配输入序列，从区域的开头开始。
		与matches方法一样，此方法始终从区域（region）的开始处开始；与该方法不同，它不需要匹配整个区域。
		如果匹配成功，则可以通过start、end和group方法获取更多信息。
		如果且仅当输入序列的前缀与此匹配器的模式匹配时为true。
	matches():boolean 
		尝试将整个区域与模式匹配。
		如果匹配成功，则可以通过start、end和group方法获取更多信息。
		如果且仅当整个区域序列与此匹配器的模式匹配时返回true。
	pattern():Pattern 
		返回此匹配器解释的模式。
		返回为其创建此匹配器的模式。
	region(int start, int end):Matcher 
		start - 开始搜索的索引（包含）
		end - 要结束搜索的索引（不包含）
		设置此匹配器区域的限制。区域是输入序列中搜索匹配项的部分。调用此方法将重置matcher，然后将区域设置为从start参数指定的索引开始，到end参数指定的索引结束。
		根据所使用的透明度和锚定（请参见useTransparentBounds和useAnchoringBounds），某些结构（如锚定）在区域边界处或周围的行为可能不同。
	regionEnd():int 
		报告此匹配者区域的结束索引（不包括）。此匹配者执行的搜索仅限于在regionStart（包含）和regionEnd（不包含）中查找匹配项。
		返回此匹配器区域的终点。
	regionStart():int 
		报告此匹配者区域的开始索引。此匹配者执行的搜索仅限于在regionStart（包含）和regionEnd（不包含）中查找匹配项。
		返回此匹配器区域的起点。
	replaceAll(String replacement):String 
		replacement - 替换字符串
		用给定的替换字符串替换与模式匹配的输入序列的每个子序列。
		此方法首先重置此匹配器。然后它扫描输入序列，寻找模式的匹配项。不属于任何匹配项的字符直接追加到结果字符串；结果中的每个匹配项都由替换字符串替换。替换字符串可以包含对捕获的子序列的引用，如appendReplacement方法中的引用。
		请注意，替换字符串中的反斜杠（\）和美元符号（$）可能导致结果与将其视为文字替换字符串时的结果不同。美元符号可以被视为对上述捕获的子序列的引用，反斜杠用于转义替换字符串中的文字字符。
		给定正则表达式a*b，输入“aabfooaabfooabfoob”和替换字符串“-”，在该表达式的匹配器上调用此方法将生成字符串“-foo-foo-foo-”。
		调用此方法会更改此匹配器的状态。如果要在进一步的匹配操作中使用匹配器，则应首先重置匹配器。
		返回通过用替换字符串替换每个匹配的子序列、根据需要替换捕获的子序列来构造的字符串（即替换后的输入序列）。
	replaceFirst(String replacement):String 
		replacement - 替换字符串
		用给定的替换字符串替换与模式匹配的输入序列的第一个子序列。
		此方法首先重置此匹配器。然后它扫描输入序列，寻找模式的匹配。不属于匹配的字符将直接追加到结果字符串；结果中的匹配将由替换字符串替换。替换字符串可以包含对捕获的子序列的引用，如appendReplacement方法中的引用。
		请注意，替换字符串中的反斜杠（\）和美元符号（$）可能导致结果与将其视为文字替换字符串时的结果不同。美元符号可以被视为对上述捕获的子序列的引用，反斜杠用于转义替换字符串中的文字字符。
		给定正则表达式dog，输入“zzzdogzzzdogzzz”和替换字符串“cat”，在该表达式的匹配器上调用此方法将生成字符串“zzzcatzzzdogzzz”。
		调用此方法会更改此匹配器的状态。如果要在进一步的匹配操作中使用匹配器，则应首先重置匹配器。
		返回通过用替换字符串替换第一个匹配的子序列、根据需要替换捕获的子序列而构造的字符串（即替换后的输入序列）。
	requireEnd():boolean 
		如果更多输入可以将正匹配转换为负匹配，则返回true。
		如果此方法返回true，并且找到匹配项，则更多的输入可能会导致匹配项丢失。如果此方法返回false并找到匹配项，则更多输入可能会更改匹配项，但不会丢失匹配项。如果找不到匹配项，则requireEnd没有意义。
		当且仅当很多输入都可以将正匹配更改为负匹配时才返回 true。
	reset():Matcher 
		重置此匹配器。
		重置匹配器将丢弃其所有显式状态信息，并将其追加位置设置为0。匹配器的区域设置为默认区域，即其整个字符序列。此匹配器区域边界的锚定和透明度不受影响。
		返回此匹配器。
	reset(CharSequence input):Matcher 
		input - 新的输入字符序列
		用新的输入序列重置此匹配器。
		重置匹配器将丢弃其所有显式状态信息，并将其追加位置设置为0。匹配器的区域设置为默认区域，即其整个字符序列。此匹配器区域边界的锚定和透明度不受影响。
	start():int 
		返回上一个匹配项的开始索引。
		返回匹配的第一个字符的索引。
		【Throws】：
			IllegalStateException 如果尚未尝试匹配，或者上一个匹配操作失败。
	start(int group):int 
		group - 此匹配器模式中捕获组的索引
		返回给定组在此匹配期间捕获的子序列的起始索引。
		捕获组从左到右索引，从1开始。group zero表示整个模式，因此表达式m.start(0) 等价于m.start()。
		返回组捕获的第一个字符的索引，如果匹配成功，则返回-1，但组本身不匹配任何内容。
		【Throws】：
			IllegalStateException 如果尚未尝试匹配，或者上一个匹配操作失败。
			IndexOutOfBoundsException 如果模式中没有具有给定索引的捕获组		
	start(String name):int 
		name - 此匹配器模式中已命名的捕获组的名称
		返回在上一个匹配操作期间由给定的命名捕获组捕获的子序列的开始索引。
		组捕获的第一个字符的索引，如果匹配成功，则为-1，但组本身不匹配任何内容。
		【Throws】：
			IllegalStateException 如果尚未尝试匹配，或者上一个匹配操作失败。
			IllegalArgumentException 如果模式中没有具有给定名称的捕获组
	toMatchResult():MatchResult 
		【Since:1.5】
		将此匹配器的匹配状态作为匹配结果返回。结果不受对该匹配器执行的后续操作的影响。
		返回与此匹配器的状态匹配的结果。		
	toString():String 
		返回此匹配器的字符串表示形式。匹配器的字符串表示形式包含可能对调试有用的信息。未指定确切格式。
	useAnchoringBounds(boolean b):Matcher 
		b - 指示是否使用锚定边界的布尔值。
		设置此匹配器区域边界的锚定。
		使用参数true调用此方法将设置此匹配器使用锚定边界。如果布尔参数为false，则将使用非锚定边界。
		使用锚定边界，此匹配器区域的边界匹配锚定，如^和$。
		如果没有锚定边界，此匹配器区域的边界将不匹配锚定，如^和$。
		默认情况下，匹配器使用锚定区域边界。
		返回此匹配器。
	usePattern(Pattern newPattern):Matcher 
		更改此匹配器用于查找匹配项的模式。
		此方法导致此匹配器丢失有关上次发生匹配的组的信息。匹配器在输入中的位置保持不变，其最后一个追加位置不受影响。
		返回此匹配器。
		【Throws】：
			IllegalArgumentException 如果newPattern为null。
	useTransparentBounds(boolean b):Matcher 
		b - 指示是使用不透明区域还是透明区域的布尔值。
		设置此匹配器区域边界的透明度。
		使用参数true调用此方法会将此匹配器设置为使用透明边界。如果布尔参数为false，则将使用不透明边界。
		使用透明边界，此匹配器区域的边界对于lookahead、lookbehind和boundary匹配结构是透明的。这些构造可以在区域边界之外看到，以查看匹配是否合适。
		使用不透明边界，此匹配器区域的边界对于lookahead、lookbehind和boundary匹配结构是不透明的，这些匹配结构可能试图看到它们之外的内容。这些构造不能越过边界，因此它们将无法匹配区域之外的任何内容。
		默认情况下，匹配器使用不透明边界。
	
	
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
附录：
	1、注：文档中的△符号表示覆盖重写方法，✘符号表示已淘汰的方法。	
	2、注：文档中的★符号表示抽象方法或者直接抛出UnsupportedOperationException异常的方法，总之没有实现具体功能代码的方法。	
	3、manifest文件：描述Jar文件的打包、运行信息。
	4、正则表达式的捕获组：
		● 普通捕获组	
			从正则表达式左侧开始，每出现一个左括号“(”记做一个分组，分组编号从1开始。0代表整个表达式。
			例如：对于时间字符串：2017-04-25，表达式如下
				(\\d{4})-((\\d{2})-(\\d{2}))
			有4个左括号，所以有4个分组
			编号                                           捕获组                                           						 匹配
			0			(\\d{4})-((\\d{2})-(\\d{2}))			2017-04-25			
			1				(\\d{4})								2017
			2			((\\d{2})-(\\d{2}))							04-25
			3				(\\d{2})								04
			4				(\\d{2})								25
		● 命名捕获组
			每个以左括号开始的捕获组，都紧跟着“?”，而后才是正则表达式。
			例如：对于时间字符串：2017-04-25，表达式如下
				(?<year>\\d{4})-(?<md>(?<month>\\d{2})-(?<date>\\d{2}))
			有4个命名的捕获组，分别是
			编号                                      名称					捕获组                                           					 匹配
			0				0			(?\d{4})-(?(?\d{2})-(?\d{2}))			2017-04-25			
			1				year			(?\d{4})								2017
			2				md				(?(?\d{2})-(?\d{2}))					04-25
			3				month			(?\d{2})								04
			4				date			(?\d{2})								25
	5、escapes：转义字符。
	6、metacharacter（元字符）：正则表达式语言由两种基本字符类型组成：原义（正常）文本字符和元字符。元字符使正则表达式具有处理能力。所谓元字符就是指那些在正则表达式中具有特殊意义的专用字符，可以用来规定其前导字符（即位于元字符前面的字符）在目标对象中的出现模式。元字符是一个或一组代替一个或多个字符的字符。听起来有点拗口，但举一个例子也许你就明白了：元字符*用来匹配0个或多个的前一字符；而元字符.用来匹配一个任意的一个字符（除换行符外）。
	7、Line terminators：行终止符。
	8、literal string：文本字符串（或者理解为字面常量）。它由双引号包围的0个或多个字符组成，比如"abc","Hello World"等等。一个String字面常量总是引用相同的String实例，比如"abc","abc"两个常量引用的是同一个对象。 














		