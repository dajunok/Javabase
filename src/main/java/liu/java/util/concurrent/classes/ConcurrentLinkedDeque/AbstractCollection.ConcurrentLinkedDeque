-------------------------------------------ConcurrentLinkedDeque<E>-----------------------------------------------------------------------------------------------------------
ConcurrentLinkedDeque<E>：并发链接双端队列。【Since:1.7】
	基于链接节点的无边界并发双端队列（Deque）。并发插入、删除和访问操作跨多个线程安全地执行。当许多线程对一个公共集合共享访问时，ConcurrentLinkedDeque是一个适当的选择。与大多数其他并发集合实现一样，此类不允许使用null元素。
	迭代器和拆分器是弱一致性。
	请注意，与大多数集合不同，size方法不是一个常量时间（constant-time）操作。由于这些Deque的异步性质，确定当前元素数量需要遍历元素，因此如果在遍历期间修改此集合，则可能会报告不准确的结果。此外，批量操作addAll、removeAll、retainAll、containsAll、equals和toArray不能保证自动执行。例如，与addAll操作同时操作的迭代器可能只查看部分添加的元素。
	这个类及其迭代器实现Deque和Iterator接口的所有可选方法。
	内存一致性影响：与其他并发集合一样，将对象放入ConcurrentLinkedDeque之前线程中的操作发生在访问或从另一线程的ConcurrentLinkedDeque中删除该元素之后的操作之前。
	该类是Java集合框架的成员。
	
	
	类定义	：public class ConcurrentLinkedDeque<E> extends AbstractCollection<E> implements Deque<E>, java.io.Serializable
	实现接口	：Iterable<E>,Collection<E>,Deque<E>, java.io.Serializable
------------------------------------------------------------------------------------------------------------------------------------------------------
Constructor Summary（构造器概要）：
	public ConcurrentLinkedDeque()
		创建一个空的双端队列。
	public ConcurrentLinkedDeque(Collection<? extends E> c)
		构造一个双端队列，最初包含给定集合的元素，按集合迭代器的遍历顺序添加。
		【Throws】：
			NullPointerException 如果指定的集合或其任何元素为null

Method Summary（方法概要）：
	add(E e):boolean 
		△ 在该Deque的尾部插入指定的元素。由于Deque是无边界的，所以此方法永远不会抛出IllegalStateException或返回false。
		【Throws】：
			NullPointerException 如果指定的元素为null。
	addAll(Collection<? extends E> c):boolean 
		△ 将指定集合中的所有元素追加到此Deque的末尾，顺序是指定集合的迭代器返回这些元素。Deque试图将自身作为指定集合操作addAll会导致IllegalArgumentException。
		【Throws】：
			NullPointerException 如果指定的集合或其任何元素为null。
			IllegalArgumentException - 如果指定集合是Deque自身。
	addFirst(E e):void 
		△ 在该Deque的前面插入指定的元素。因为Deque是无限的，所以此方法永远不会抛出IllegalStateException。
		【Throws】：
			NullPointerException 如果指定的元素为null。
	addLast(E e):void 
		△ 在该Deque的末尾插入指定的元素。因为Deque是无限的，所以此方法永远不会抛出IllegalStateException。
		【Throws】：
			NullPointerException 如果指定的元素为null。
	clear():void 
		△ 删除此Deque中的所有元素。		
	contains(Object o):boolean 
		△ 如果此Deque至少包含一个元素e（o.equals(e)），则返回true。
	descendingIterator():Iterator<E> 
		△ 以相反的顺序返回此deque中元素的迭代器（降序迭代器）。元素将按从最后（尾）到第一（头）的顺序返回。
		返回的迭代器是弱一致性。
	element():E 
		△ 检索但不删除由这个deque表示的队列的头（换句话说，这个deque的第一个元素）。此方法与peek的不同之处在于，如果此deque为null，它将抛出异常。
		此方法等效于Deque.getFirst()。
		【Throws】：
			● NoSuchElementException 如果Deque（双端队列）为空
	getFirst():E 
		△ 检索但不删除此deque的第一个元素。此方法与peekFirst的不同之处在于，如果此Deque（双端队列）为空，它将引发异常。
		【Throws】：
			● NoSuchElementException 如果deque（双端队列）为空
	getLast():E 
		△ 检索但不删除此Deque的最后一个元素。此方法与peekLast的不同之处在于，如果此Deque（双端队列）为空，它将引发异常。
		【Throws】：
			● NoSuchElementException 如果deque（双端队列）为空
	isEmpty():boolean 
		△ 如果此集合不包含元素，则返回true。
	iterator():Iterator<E> 
		△ 以正确的顺序返回此Deque中元素的迭代器。元素将按从第一个（头）到最后一个（尾）的顺序返回。
		返回的迭代器是弱一致性。
	offer(E e):boolean 
		△ 在该Deque的尾部插入指定的元素。因为Deque是无边界的，所以这个方法永远不会返回false。
		【Throws】：
			NullPointerException 如果指定的元素为null。
	offerFirst(E e):boolean 
		△ 在该Deque的前面插入指定的元素。因为Deque是无边界的，所以这个方法永远不会返回false。
		【Throws】：
			NullPointerException 如果指定的元素为null。
	offerLast(E e):boolean 
		△ 在该Deque的末尾插入指定的元素。因为Deque是无边界的，所以这个方法永远不会返回false。
		该方法等效于add(E)
		【Throws】：
			NullPointerException 如果指定的元素为null。
	peek():E 
		△ 检索但不删除由此deque表示的队列头（换句话说，此deque的第一个元素），或者如果此deque为null，则返回null。
		此方法等效于Deque.peekFirst()
		【Throws】：
			● NoSuchElementException 如果deque（双端队列）为空
	peekFirst():E 
		△ 检索但不移除此Deque的第一个元素，或者如果此Deque为空则返回null。
	peekLast():E 
		△ 检索但不移除此Deque的最后一个元素，或者如果此Deque为空则返回null。
	poll():E 
		△ 检索并删除由该Deque表示的队列的头（换句话说，是该Deque的第一个元素），或者如果该Deque为空，则返回null。
		此方法等效于Deque.pollFirst()
	pollFirst():E 
		△ 检索并删除此Deque的第一个元素，如果此Deque为空，则返回null。
	pollLast():E 
		△ 检索并删除此Deque（双端队列）的最后一个元素，如果此Deque为空，则返回null。
	pop():E 
		△ 从此Deque（双端队列）所表示的栈中弹出一个元素。换句话说，删除并返回此Deque的第一个元素。
		此方法等效于Deque.removeFirst()。
	push(E e):void 
		△ 如果可以在不违反容量限制的情况下立即将元素推送到该Deque表示的栈上（换句话说，在该Deque的头部），如果当前没有可用空间，则引发IllegalStateException异常。
		此方法等效于Deque.addFirst(E)
		【Throws】：
			● NullPointerException 如果指定的元素为null，并且此deque（双端队列）不允许null元素
	remove():E 
		△ 检索并删除由这个deque表示的队列的头（换句话说，这个deque的第一个元素）。此方法与poll的不同之处在于，如果此deque为空，它将引发异常。
		此方法等效于 removeFirst()
		【Throws】：
			● NoSuchElementException 如果deque（双端队列）为空
	remove(Object o):boolean 
		△ 删除第一个元素e，如果此deque中存在这样的元素（o.equals(e)）。如果deque不包含元素，则它是不变的。
		【Throws】：
			NullPointerException 如果指定的元素为null。
	removeFirst():E 
		△ 检索并删除此deque的第一个元素。此方法与pollFirst的不同之处在于，如果此deque为空，它将引发异常。
		【Throws】：
			● NoSuchElementException 如果deque（双端队列）为空		
	removeFirstOccurrence(Object o):boolean 
		△ 删除第一个元素e，如果此deque中存在这样的元素（o.equals(e)）。如果deque不包含元素，则它是不变的。
		【Throws】：
			NullPointerException 如果指定的元素为null。
	removeLast():E 
		△ 检索并删除此deque的最后一个元素。此方法与pollLast的不同之处在于，如果此deque为空，它将引发异常。
		【Throws】：
			● NoSuchElementException 如果deque（双端队列）为空
	removeLastOccurrence(Object o):boolean 
		△ 删除最后一个元素e，如果此deque中存在这样的元素（o.equals(e)）。如果deque不包含元素，则它是不变的。
		【Throws】：
			NullPointerException 如果指定的元素为null。
	size():int 
		△ 返回此deque中的元素数量。如果此deque包含的元素多于Integer.MAX_VALUE，则返回Integer.MAX_VALUE。
		注意，与大多数集合不同，此方法不是一个常量时间（constant-time）操作。由于这些deques的异步特性，决定当前元素的数目需要遍历它们来计算它们。此外，在执行此方法的过程中，大小也可能发生变化，在这种情况下，返回的结果将不准确。因此，这种方法在并发应用程序中通常不太有用。
	spliterator():Spliterator<E> 
		△ 返回此deque中元素的拆分器。
		返回的拆分器是弱一致性。
		Spliterator报告Spliterator.CONCURRENT, Spliterator.ORDERED, 和  Spliterator.NONNULL特征。
	toArray():Object[] 
		△ 返回一个数组，该数组包含此deque中的所有元素，顺序正确（从第一个元素到最后一个元素）。
		返回的数组将是“安全的”，因为此deque不维护对它的引用。（换句话说，此方法必须分配一个新数组）。因此，调用者可以自由修改返回的数组。
		此方法充当基于数组和基于集合的API之间的桥梁。
	toArray(T[] a):<T> T[] 
		△ 以正确的顺序（从第一个元素到最后一个元素）返回包含此deque中所有元素的数组；返回数组的运行时类型是指定数组的运行时类型。如果deque符合指定的数组，则返回该数组。否则，将为新数组分配指定数组的运行时类型和此deque的大小。
		如果此deque适合具有备用空间的指定数组（即数组中的元素多于此deque），则在deque结束后立即将数组中的元素设置为null。
		与toArray()方法一样，此方法充当基于数组和基于集合的API之间的桥梁。此外，此方法允许对输出数组的运行时类型进行精确控制，并且可以在某些情况下用于节省分配成本。
		假设x是已知仅包含字符串的deque。以下代码可用于将deque转储到新分配的字符串数组中：
			String[] y = x.toArray(new String[0]);
		请注意，toArray(new Object[0])在功能上与toArray()相同。

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
附录：
	1、注：文档中的△符号表示覆盖重写方法。	
	2、注：文档中的★符号表示抽象方法或者直接抛出UnsupportedOperationException异常的方法，总之没有实现具体功能代码的方法。
	3、java并发一致性：
		对于一致性，可以分为从客户端和服务端两个不同的视角。从客户端来看，一致性主要指的是多并发访问时更新过的数据如何获取的问题。从服务端来看，则是更新如何复制分布到整个系统，以保证数据最终一致。一致性是因为有并发读写才有的问题，因此在理解一致性的问题时，一定要注意结合考虑并发读写的场景。
		从客户端角度，多进程并发访问时，更新过的数据在不同进程如何获取的不同策略，决定了不同的一致性。对于关系型数据库，要求更新过的数据能被后续的访问都能看到，这是“强一致性”。如果能容忍后续的部分或者全部访问不到，则是“弱一致性”。如果经过一段时间后要求能访问到更新后的数据，则是“最终一致性”。
	4、constant-time（常量时间）：意思就是无论n是什么值运算所花时间都一样。
	5、Linear-time（线性时间）：则是说多大n就花多少时间。
	6、Multiple-time（多项式时间）：则意味着随着n增大，n每增加1所花的时间增长越来越多。对于n^2-3这样一个多项式时间来说，n=2的时候可能只要花1的时间，甚至低于线性时间，但n=4的时候可能就要花13的时间了，可以想象再大一些这个数值会变得巨大。但是它又不及指数时间增长快(m^n)，且m^n不能写成多项式形式，所以它又和多项式时间有区别。	
	

















