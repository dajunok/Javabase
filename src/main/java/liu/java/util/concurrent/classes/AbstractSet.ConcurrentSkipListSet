----------------------------------------ConcurrentSkipListSet<E>--------------------------------------------------------------------------------------------------------------
ConcurrentSkipListSet<E>：并发跳表集。【Since:1.6】
	<E> 此集合维护的元素类型
	基于ConcurrentSkipListMap的可扩展并发NavigableSet实现。集合中的元素按照它们的自然顺序进行排序，或者通过在集合创建时提供的比较器进行排序，具体取决于使用的构造函数。
	此实现为包含、添加和删除操作及其变体提供了预期的平均log(n)时间成本。插入、删除和访问操作由多个线程同时安全地执行。
	迭代器和拆分器是弱一致性的。
	升序视图及其迭代器比降序视图更快。
	请注意，与大多数集合不同，size方法不是一个常量时间操作。由于这些集合的异步性质，确定当前元素数需要遍历元素，因此如果在遍历期间修改此集合，则可能会报告不准确的结果。此外，批量操作addAll、removeAll、retainAll、containsAll、equals和toArray不能保证自动执行。例如，与addAll操作同时操作的迭代器可能只查看部分添加的元素。
	这个类及其迭代器实现Set和Iterator接口的所有可选方法。与大多数其他并发集合实现一样，此类不允许使用null元素，因为null参数和返回值无法与缺少元素可靠地区分。
	该类是Java集合框架的成员。
	
	
	类定义	：public class ConcurrentSkipListSet<E> extends AbstractSet<E> implements NavigableSet<E>, Cloneable, java.io.Serializable
	实现接口	：Iterable<E>,Collection<E>,Set<E>, SortedSet<E>, NavigableSet<E>, Cloneable, java.io.Serializable
------------------------------------------------------------------------------------------------------------------------------------------------------
Constructor Summary（构造器概要）：
	public ConcurrentSkipListSet()
		构造一个新的空集合，该集合根据元素的自然顺序对其进行排序。
	public ConcurrentSkipListSet(Collection<? extends E> c)
		构造一个包含指定集合中的元素的新集合，该集合根据元素的自然顺序对其进行排序。
		【Throws】：
			ClassCastException 如果指定参数c中的元素不可比较，或不可相互比较
			NullPointerException 如果指定的集合及其任何元素为null
	public ConcurrentSkipListSet(Comparator<? super E> comparator)
		构造一个新的空集合，该集合根据指定的比较器对其元素进行排序。
	public ConcurrentSkipListSet(SortedSet<E> s)
		构造一个新的集合，该集合包含相同的元素，并且使用与指定的已排序集相同的顺序。
		【Throws】：
			NullPointerException 如果指定的排序集合及其任何元素为null
			
			
Method Summary（方法概要）：
	add(E e):boolean 
		△ 如果指定的元素不存在，则将其添加到此集合中。更正式地说，如果集合不包含元素e2（e.equals(e2)），则将指定的元素e添加到此集合中。如果此集合已经包含元素e，则调用将使集合保持不变并返回false。
		【Throws】：
			ClassCastException 如果不能将e与当前在该集合中的元素进行比较
			NullPointerException 如果指定的集合及其任何元素为null
	ceiling(E e):E 
		△ 返回此 集合中大于等于给定元素的最小元素；如果不存在这样的元素，则返回 null。
		【Throws】：
			ClassCastException 如果无法将指定的元素与集合中当前的元素进行比较
			NullPointerException 如果指定的元素为null
	clear():void 
		△ 删除此集合中的所有元素。
	clone():ConcurrentSkipListSet<E> 
		△ 返回此ConcurrentSkipListSet实例的浅副本。（不克隆元素本身。）
	comparator():Comparator<? super E> 
		△ 返回用于对该集合中的元素排序的比较器，如果该集合使用其元素的自然顺序，则返回null。
	contains(Object o):boolean 
		△ 如果此集合包含指定元素，则返回true。更正式地说，如果且仅当此集合包含元素e（o.equals(e)）时返回true。
		【Throws】：
			ClassCastException 如果无法将指定的元素与集合中当前的元素进行比较
			NullPointerException 如果指定的元素为null
	descendingIterator():Iterator<E> 
		△ 按降序返回此集合中元素的迭代器。
	descendingSet():NavigableSet<E> 
		△ 返回包含在此集合中的元素的逆序视图。降序集由该集合支持，因此对该集合的更改反映在降序集中，反之亦然。
		返回的集具有与Collections.reverseOrder(comparator())等效的顺序。表达式s.descendingSet().descendingSet()返回的s视图实质上等同于s。
	equals(Object o):boolean 
		△ 将指定的对象与此集合进行相等比较。如果指定的对象也是一个集合，两个集合的大小相同，并且指定集合的每个成员都包含在此集合中（或等效地，此集合的每个成员都包含在指定集合中），则返回true。此定义确保equals方法在Set接口的不同实现中正常工作。
	first():E 
		△ 返回当前在此集合中的第一个（最低）元素。
		【Throws】：
			NoSuchElementException 如果此集合为空
	floor(E e):E 
		△ 返回此集合中小于或等于给定元素的最大元素，如果没有此类元素，则返回null。
		 【Throws】：
			ClassCastException 如果无法将指定的元素与集合中当前的元素进行比较
			NullPointerException 如果指定的元素为null
	headSet(E toElement):NavigableSet<E> 
		 △返回此集合中元素严格小于toElement的部分的视图。这个集合支持返回的集合，因此返回的集合中的更改反映在这个集合中，反之亦然。返回的集合支持此集合支持的所有可选集合操作。
		返回的集将在尝试插入超出其范围的元素时引发IllegalArgumentException异常。
		相当于headSet(toElement, false)
		【Throws】：
			ClassCastException 如果toElement与这个集合的比较器不兼容（或者如果集合没有比较器，如果toElement没有实现Comparable接口）。如果无法将toElement与集合中当前的元素进行比较，则实现可能（但不必）引发此异常。
			NullPointerException 如果指定的元素为null
			IllegalArgumentException 如果此集合本身具有限制的范围，并且toElement位于范围的边界之外
	headSet(E toElement, boolean inclusive):NavigableSet<E> 
		△ 返回此集合中元素小于（或等于，如果inclusive为true）toElement的部分的视图。这个集合支持返回的集合，因此返回的集合中的更改反映在这个集合中，反之亦然。返回的集合支持此集合支持的所有可选集合操作。
		返回的集将在尝试插入超出其范围的元素时引发IllegalArgumentException异常。
		【Throws】：
			ClassCastException 如果toElement与这个集合的比较器不兼容（或者如果集合没有比较器，如果toElement没有实现Comparable接口）。如果无法将toElement与集合中当前的元素进行比较，则实现可能（但不必）引发此异常。
			NullPointerException 如果指定的元素为null
			IllegalArgumentException 如果此集合本身具有限制的范围，并且toElement位于范围的边界之外
	higher(E e):E 
		△ 返回此集合中严格大于给定元素的最小元素；如果不存在这样的元素，则返回 null。
		【Throws】：
			ClassCastException 如果无法将指定的元素与集合中当前的元素进行比较
			NullPointerException 如果指定的元素为null
	isEmpty():boolean 
		△ 如果此集合不包含元素，则返回true。
	iterator():Iterator<E> 
		△ 以升序返回此集合中元素的迭代器。
	last():E 
		△ 返回当前在此集合中的最后一个（最高）元素。
		【Throws】：
			NoSuchElementException 如果此集合为空
	lower(E e):E 
		△ 返回此集合中严格小于给定元素的最大的元素；如果没有此类元素，则返回空值。
		【Throws】：
			ClassCastException 如果无法将指定的元素与集合中当前的元素进行比较
			NullPointerException 如果指定的元素为null
	pollFirst():E 
		△ 检索并删除第一个（最低）元素，或者如果该集合为空，则返回null。
	pollLast():E 
		△ 检索并删除最后一个（最高）元素，或者如果该集为空，则返回null。
	remove(Object o):boolean 
		△ 如果指定元素存在，则从该集合中移除该元素。更正式地说，如果这个集合包含这样一个元素，则删除元素e（o.equals(e)）。如果此集合包含元素e，则返回“true”（如果此集合因调用而更改，则返回“等效”）。（调用返回后，此集合将不包含元素。）
		【Throws】：
			ClassCastException 如果无法将指定的元素与集合中当前的元素进行比较
			NullPointerException 如果指定的元素为null
	removeAll(Collection<?> c):boolean 
		△ 从此集合中删除指定集合中包含的所有元素。如果指定的集合也是集合，则此操作将有效地修改此集合，使其值为两个集合的不对称集合差。
		【Throws】：
			ClassCastException 如果此集合中一个或多个元素的类型与指定集合不兼容
			NullPointerException 如果指定的集合及其任何元素为null
	size():int 
		△ 返回此集合中的元素数。如果此集合包含超过Integer.MAX_VALUE元素，则返回Integer.MAX_VALUE。
		注意，与大多数集合不同，此方法不是一个常量时间（constant-time）操作。由于这些集合的异步性质，确定当前元素的数目需要遍历所有元素来计算它们。此外，在执行此方法的过程中，大小也可能发生变化，在这种情况下，返回的结果将不准确。因此，这种方法在并发应用程序中通常不太有用。
	spliterator():Spliterator<E> 
		△ 返回此集合中元素的拆分器。
		spliterator报告Spliterator.CONCURRENT、Spliterator.NONNULL、Spliterator.DISTINCT、Spliterator.SORTED和Spliterator.ORDERED，其遇到顺序为升序。重写实现应该记录额外特征值的报告。
		如果集合的比较器（请参见comparator()）为空，则拆分器的比较器（请参见Spliterator.getComparator()）为空。否则，分割器的比较器与集合的比较器相同，或实施相同的总排序。
	subSet(E fromElement,boolean fromInclusive,E toElement,boolean toInclusive):NavigableSet<E> 
		△ 返回此集合中元素范围从fromElement（fromInclusive为true则包含fromElement）到toElement（toInclusive为true则包含toElement）的部分的视图。如果fromElement和toElement相等，则返回的集为空。这个集合支持返回的集合，因此返回的集合中的更改反映在这个集合中，反之亦然。返回的集合支持此集合支持的所有可选集合操作。
		返回的集将在尝试插入超出其范围的元素时引发IllegalArgumentException异常。
		【Throws】：
			ClassCastException 如果fromElement和toElement与这个集合的比较器不兼容（或者如果集合没有比较器，如果fromElement和toElement没有实现Comparable接口）。如果无法将fromElement和toElement与集合中当前的元素进行比较，则实现可能（但不必）引发此异常。
			NullPointerException 如果fromElement和toElement元素为null
			IllegalArgumentException 如果此集合本身具有限制的范围，并且fromElement和toElement位于范围的边界之外
	subSet(E fromElement, E toElement):NavigableSet<E> 
		△ 返回此集合中元素范围从fromElement（含fromElement）到toElement（不含toElement）的部分的视图。（如果fromElement和toElement相等，则返回的集合为空。）返回的集合由该集合支持，因此返回集合中的更改反映在该集合中，反之亦然。返回的集合支持此集合支持的所有可选集合操作。
		返回的集将在尝试插入超出其范围的元素时引发IllegalArgumentException异常。
		这相当于subSet(fromElement, true, toElement, false)
		【Throws】：
			ClassCastException 如果fromElement和toElement与这个集合的比较器不兼容（或者如果集合没有比较器，如果fromElement和toElement没有实现Comparable接口）。如果无法将fromElement和toElement与集合中当前的元素进行比较，则实现可能（但不必）引发此异常。
			NullPointerException 如果fromElement和toElement元素为null
			IllegalArgumentException 如果此集合本身具有限制的范围，并且fromElement和toElement位于范围的边界之外
	tailSet(E fromElement):NavigableSet<E> 
		△ 返回此集合中元素大于或等于fromElement的部分的视图。这个集合支持返回的集合，因此返回的集合中的更改反映在这个集合中，反之亦然。返回的集合支持此集合支持的所有可选集合操作。
		返回的集将在尝试插入超出其范围的元素时引发IllegalArgumentException。
		相当于tailSet(fromElement, true)
		【Throws】：
			ClassCastException 如果fromElement与这个集合的比较器不兼容（或者如果集合没有比较器，如果fromElement没有实现Comparable接口）。如果无法将fromElement与集合中当前的元素进行比较，则实现可能（但不必）引发此异常。
			NullPointerException 如果指定的元素为null
			IllegalArgumentException 如果此集合本身具有限制的范围，并且fromElement位于范围的边界之外
	tailSet(E fromElement, boolean inclusive):NavigableSet<E> 
		△ 返回此集合中元素大于（或等于，如果inclusive为true）fromElement的部分的视图。这个集合支持返回的集合，因此返回的集合中的更改反映在这个集合中，反之亦然。返回的集合支持此集合支持的所有可选集合操作。				
		返回的集将在尝试插入超出其范围的元素时引发IllegalArgumentException异常。
		【Throws】：
			ClassCastException 如果fromElement与这个集合的比较器不兼容（或者如果集合没有比较器，如果fromElement没有实现Comparable接口）。如果无法将fromElement与集合中当前的元素进行比较，则实现可能（但不必）引发此异常。
			NullPointerException 如果指定的元素为null
			IllegalArgumentException 如果此集合本身具有限制的范围，并且fromElement位于范围的边界之外
	
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
附录：
	1、注：文档中的△符号表示覆盖重写方法。	
	2、注：文档中的★符号表示抽象方法或者直接抛出UnsupportedOperationException异常的方法，总之没有实现具体功能代码的方法。
	3、loadFactor：负载因子（或称为负载系数），它等于“size/capacity”（即大小与容量的比率）。负载因子为0，表示空的hash表，0.5表示半满的散列表，依此类推。轻负载的散列表具有冲突少、适宜插入与查询的特点（但是使用Iterator迭代元素时比较慢）
	4、initialCapacity：初始容量。创建hash表时桶的数量，并发操作时ConcurrentHashMap是一次锁住一个桶。ConcurrentHashMap默认将hash表分为16个桶，诸如get、put、remove等常用操作只锁住当前需要用到的桶。这样，原来只能一个线程进入，现在却能同时有16个写线程执行，并发性能的提升是显而易见的。
	5、java并发一致性：
		对于一致性，可以分为从客户端和服务端两个不同的视角。从客户端来看，一致性主要指的是多并发访问时更新过的数据如何获取的问题。从服务端来看，则是更新如何复制分布到整个系统，以保证数据最终一致。一致性是因为有并发读写才有的问题，因此在理解一致性的问题时，一定要注意结合考虑并发读写的场景。
		从客户端角度，多进程并发访问时，更新过的数据在不同进程如何获取的不同策略，决定了不同的一致性。对于关系型数据库，要求更新过的数据能被后续的访问都能看到，这是“强一致性”。如果能容忍后续的部分或者全部访问不到，则是“弱一致性”。如果经过一段时间后要求能访问到更新后的数据，则是“最终一致性”。
	6、SkipList：跳表。	使用“空间换时间”的算法，令链表的每个结点不仅记录next结点位置，还可以按照level层级分别记录后继第level个结点。在查找时，首先按照层级查找，比如：当前跳表最高层级为3，即每个结点中不仅记录了next结点（层级1），还记录了next的next（层级2）、next的next的next（层级3）结点。现在查找一个结点，则从头结点开始先按高层级开始查：head->head的next的next的next->。。。直到找到结点或者当前结点q的值大于所查结点，则此时当前查找层级的q的前一节点p开始，在p~q之间进行下一层级（隔1个结点）的查找......直到最终迫近、找到结点。此法使用的就是“先大步查找确定范围，再逐渐缩小迫近”的思想进行的查找。	
	7、constant-time（常量时间）：意思就是无论n是什么值运算所花时间都一样。
	8、Linear-time（线性时间）：则是说多大n就花多少时间。
	9、Multiple-time（多项式时间）：则意味着随着n增大，n每增加1所花的时间增长越来越多。对于n^2-3这样一个多项式时间来说，n=2的时候可能只要花1的时间，甚至低于线性时间，但n=4的时候可能就要花13的时间了，可以想象再大一些这个数值会变得巨大。但是它又不及指数时间增长快(m^n)，且m^n不能写成多项式形式，所以它又和多项式时间有区别。	
	
