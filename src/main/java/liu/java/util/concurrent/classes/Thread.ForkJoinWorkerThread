----------------------------------------ForkJoinWorkerThread--------------------------------------------------------------------------------------------------------------
ForkJoinWorkerThread：分叉连接工作线程。【Since:1.7】
	由执行ForkJoinTask的ForkJoinPool管理的线程。这个类是子类化的Thread，仅仅是为了添加功能——不存在处理调度或执行的覆盖方法。但是，您可以覆盖围绕主任务处理循环的初始化和终止方法。如果您确实创建了这样的子类，那么您还需要提供一个自定义的ForkJoinPool.ForkJoinWorkerThreadFactory来在ForkJoinPool中使用它。
		
		
		
	类定义	：public class ForkJoinWorkerThread extends Thread
	实现接口	：Runnable
	内部枚举类	：Thread.State
	内部接口	：Thread.UncaughtExceptionHandler
------------------------------------------------------------------------------------------------------------------------------------------------------
Field Summary（字段概要）：
	Thread.MAX_PRIORITY
		线程可以拥有的最大优先级。
	Thread.MIN_PRIORITY
		线程可以拥有的最小优先级。
	Thread.NORM_PRIORITY
		分配给线程的默认优先级。

Constructor Summary（构造器概要）：	
	protected ForkJoinWorkerThread(ForkJoinPool pool)
		在给定池中创建ForkJoinWorkerThread。

Method Summary（方法概要）：
	getPool():ForkJoinPool 
		返回承载此线程的池。
	getPoolIndex():int 
		返回此线程在其池中的唯一索引号。返回的值在0到池中可能存在的最大线程数（减去1）之间，并且在线程的生存期内不会更改。对于跟踪状态或按工作线程而不是按任务收集结果的应用程序，此方法可能很有用。
	onStart():protected void 
		在构造之后但在处理任何任务之前初始化内部状态。如果重写此方法，则必须在方法的开头调用super.onStart()。初始化需要注意：大多数字段必须具有合法的默认值，以确保尝试从其他线程进行访问时，即使在此线程开始处理任务之前，也能正常工作。
	onTermination(Throwable exception):protected void 
		执行与终止此工作线程相关联的清理。如果重写此方法，则必须在重写方法的末尾调用super.onTermination。
	run():void 
		此方法必须是public，但不应显式调用。它执行主run循环以执行ForkJoinTasks。
	
	
	
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
附录：
	1、注：文档中的△符号表示覆盖重写方法，✘符号表示已被淘汰掉的方法。	
	2、注：文档中的★符号表示抽象方法或者直接抛出UnsupportedOperationException异常的方法，总之没有实现具体功能代码的方法。
	3、loadFactor：负载因子（或称为负载系数），它等于“size/capacity”（即大小与容量的比率）。负载因子为0，表示空的hash表，0.5表示半满的散列表，依此类推。轻负载的散列表具有冲突少、适宜插入与查询的特点（但是使用Iterator迭代元素时比较慢）
	4、initialCapacity：初始容量。创建hash表时桶的数量，并发操作时ConcurrentHashMap是一次锁住一个桶。ConcurrentHashMap默认将hash表分为16个桶，诸如get、put、remove等常用操作只锁住当前需要用到的桶。这样，原来只能一个线程进入，现在却能同时有16个写线程执行，并发性能的提升是显而易见的。
	5、java并发一致性：
		对于一致性，可以分为从客户端和服务端两个不同的视角。从客户端来看，一致性主要指的是多并发访问时更新过的数据如何获取的问题。从服务端来看，则是更新如何复制分布到整个系统，以保证数据最终一致。一致性是因为有并发读写才有的问题，因此在理解一致性的问题时，一定要注意结合考虑并发读写的场景。
		从客户端角度，多进程并发访问时，更新过的数据在不同进程如何获取的不同策略，决定了不同的一致性。对于关系型数据库，要求更新过的数据能被后续的访问都能看到，这是“强一致性”。如果能容忍后续的部分或者全部访问不到，则是“弱一致性”。如果经过一段时间后要求能访问到更新后的数据，则是“最终一致性”。
	6、SkipList：跳表。	使用“空间换时间”的算法，令链表的每个结点不仅记录next结点位置，还可以按照level层级分别记录后继第level个结点。在查找时，首先按照层级查找，比如：当前跳表最高层级为3，即每个结点中不仅记录了next结点（层级1），还记录了next的next（层级2）、next的next的next（层级3）结点。现在查找一个结点，则从头结点开始先按高层级开始查：head->head的next的next的next->。。。直到找到结点或者当前结点q的值大于所查结点，则此时当前查找层级的q的前一节点p开始，在p~q之间进行下一层级（隔1个结点）的查找......直到最终迫近、找到结点。此法使用的就是“先大步查找确定范围，再逐渐缩小迫近”的思想进行的查找。	
	7、constant-time（常量时间）：意思就是无论n是什么值运算所花时间都一样。
	8、Linear-time（线性时间）：则是说多大n就花多少时间。
	9、Multiple-time（多项式时间）：则意味着随着n增大，n每增加1所花的时间增长越来越多。对于n^2-3这样一个多项式时间来说，n=2的时候可能只要花1的时间，甚至低于线性时间，但n=4的时候可能就要花13的时间了，可以想象再大一些这个数值会变得巨大。但是它又不及指数时间增长快(m^n)，且m^n不能写成多项式形式，所以它又和多项式时间有区别。	
	10、	Copy-On-Write：简称COW，是一种用于程序设计中的优化策略。其基本思路是，从一开始大家都在共享同一个内容，当某个人想要修改这个内容的时候，才会真正把内容Copy出去形成一个新的内容然后再改，这是一种延时懒惰策略。从JDK1.5开始Java并发包里提供了两个使用CopyOnWrite机制实现的并发容器,它们是CopyOnWriteArrayList和CopyOnWriteArraySet。CopyOnWrite容器非常有用，可以在非常多的并发场景中使用到。
		CopyOnWrite容器即写时复制的容器。通俗的理解是当我们往一个容器添加元素的时候，不直接往当前容器添加，而是先将当前容器进行Copy，复制出一个新的容器，然后新的容器里添加元素，添加完元素之后，再将原容器的引用指向新的容器。这样做的好处是我们可以对CopyOnWrite容器进行并发的读，而不需要加锁，因为当前容器不会添加任何元素。所以CopyOnWrite容器也是一种读写分离的思想，读和写不同的容器。