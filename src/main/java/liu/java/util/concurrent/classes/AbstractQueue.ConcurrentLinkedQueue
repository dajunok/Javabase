-----------------------------------------ConcurrentLinkedQueue<E>-------------------------------------------------------------------------------------------------------------
ConcurrentLinkedQueue<E>：并发链接队列。【Since:1.5】
	基于链接节点的无边界线程安全队列。此队列命令元素FIFO（先进先出）。队列的头是队列中最长时间的元素。队列的尾部是队列中时间最短的元素。新元素插入到队列的尾部，队列检索操作在队列的头部获取元素。当许多线程对一个公共集合共享访问时，ConcurrentLinkedQueue是一个适当的选择。与大多数其他并发集合实现一样，此类不允许使用null元素。
	该实现采用了一种高效的非阻塞算法，该算法基于Maged M. Michael和Michael L. Scott在简单、快速和实用的非阻塞和阻塞并发队列算法中描述的算法。
	迭代器是弱一致性的，返回反映迭代器创建时或创建后某个点上队列状态的元素。它们不会抛出ConcurrentModificationException，并且可以与其他操作同时进行。自创建迭代器以来包含在队列中的元素将只返回一次。
	请注意，与大多数集合不同，size方法不是一个常量时间操作。由于这些队列的异步性质，确定当前元素数需要遍历元素，因此如果在遍历期间修改此集合，则可能会报告不准确的结果。此外，批量操作addAll、removeAll、retainAll、containsAll、equals和toArray不能保证自动执行。例如，与addAll操作同时操作的迭代器可能只查看部分添加的元素。
	这个类及其迭代器实现了Queue和Iterator接口的所有可选方法。
	内存一致性影响：与其他并发集合一样，将对象放入ConcurrentLinkedQueue之前线程中的操作发生在访问或从另一线程的ConcurrentLinkedQueue中删除该元素之后的操作发生之前。
	该类是Java集合框架的成员。
	
	类定义	：public class ConcurrentLinkedQueue<E> extends AbstractQueue<E> implements Queue<E>, java.io.Serializable
	实现接口	：Iterable<E>,Collection<E>,Queue<E>,java.io.Serializable
------------------------------------------------------------------------------------------------------------------------------------------------------
Constructor Summary（构造器概要）：
	public ConcurrentLinkedQueue()
		创建初始为空的ConcurrentLinkedQueue。		
	public ConcurrentLinkedQueue(Collection<? extends E> c)
		创建一个ConcurrentLinkedQueue，最初包含给定集合的元素，按集合迭代器的遍历顺序添加。
		【Throws】：
			NullPointerException 如果指定的集合或其任何元素为null
		
		
Method Summary（方法概要）：
	add(E e):boolean 
		△ 在该队列的尾部插入指定的元素。由于队列是无限的，此方法将永远不会抛出IllegalStateException或返回false。
		【Throws】：
			NullPointerException 如果指定的元素为null。
	addAll(Collection<? extends E> c):boolean 
		△ 按指定集合的迭代器返回元素的顺序，将指定集合中的所有元素追加到此队列的末尾。试图将自身作为指定集合操作addAll会导致IllegalArgumentException。
		【Throws】：
			NullPointerException 如果指定的集合或其任何元素为null。
			IllegalArgumentException - 如果指定集合是Queue自身。
	contains(Object o):boolean 
		△ 如果此队列包含指定的元素，则返回true。更正式地说，如果并且仅当此队列包含至少一个元素e（如o.equals(e)），则返回true。
	isEmpty():boolean 
		△ 如果此队列不包含元素，则返回true。
	iterator():Iterator<E> 
		△ 以正确的顺序返回此队列中元素的迭代器。元素将按从第一个（头）到最后一个（尾）的顺序返回。
		返回的迭代器是弱一致性。
	offer(E e):boolean 
		△ 在该队列的尾部插入指定的元素。由于队列是无限的，因此此方法永远不会返回false。
		【Throws】：
			NullPointerException 如果指定的元素为null。
	peek():E 
		△ 在队列的头部查询并返回元素。如果队列为空时，返回null。
	poll():E 
		△ 检索但不删除此队列的头；如果此队列为空，则返回null。
	remove(Object o):boolean 
		△ 从该队列中删除指定元素的单个实例（如果存在）。更正式地说，如果此队列包含一个或多个这样的元素（o.equals(e)），则删除元素e。如果此队列包含指定元素，则返回“true”（如果此队列因调用而更改，则返回“等效”）。
	size():int 
		△ 返回此队列中的元素数量。如果此队列包含超过Integer.MAX_VALUE元素，则返回Integer.MAX_VALUE。
		注意，与大多数集合不同，此方法不是一个常量时间（constant-time）操作。由于这些队列的异步性质，确定当前元素数需要进行O(n)遍历。此外，如果在执行此方法期间添加或移除元素，则返回的结果可能不准确。因此，这种方法在并发应用程序中通常不太有用。
	spliterator():Spliterator<E> 
		△ 返回此队列中元素的拆分器。
		返回的拆分器是弱一致性。
		Spliterator报告Spliterator.CONCURRENT、Spliterator.ORDERED和Spliterator.NONNULL特征。
	toArray():Object[] 
		△ 返回一个数组，该数组按正确的顺序包含此队列中的所有元素。
		返回的数组将是“安全的”，因为此队列不维护对它的引用。（换句话说，此方法必须分配一个新数组）。因此，调用者可以自由修改返回的数组。
		此方法充当基于数组和基于集合的API之间的桥梁。
	toArray(T[] a):<T> T[] 
		△ 以正确的顺序返回包含此队列中所有元素的数组；返回数组的运行时类型是指定数组的运行时类型。如果队列适合指定的数组，则会在其中返回。否则，将为新数组分配指定数组的运行时类型和此队列的大小。
		如果此队列适合具有备用空间的指定数组（即，该数组中的元素多于此队列），则紧跟队列末尾的数组中的元素将设置为空。
		与toArray() 方法一样，此方法充当基于数组和基于集合的API之间的桥梁。此外，此方法允许对输出数组的运行时类型进行精确控制，并且可以在某些情况下用于节省分配成本。
		假设x是一个已知只包含字符串的队列。以下代码可用于将队列转储到新分配的字符串数组中：
			String[] y = x.toArray(new String[0]);
		请注意，toArray(new Object[0])在功能上与toArray()相同。
------------------------------------------------------------------------------------------------------------------------------------------------------
附录：
	1、注：文档中的△符号表示覆盖重写方法。	
	2、注：文档中的★符号表示抽象方法或者直接抛出UnsupportedOperationException异常的方法，总之没有实现具体功能代码的方法。
	3、java并发一致性：
		对于一致性，可以分为从客户端和服务端两个不同的视角。从客户端来看，一致性主要指的是多并发访问时更新过的数据如何获取的问题。从服务端来看，则是更新如何复制分布到整个系统，以保证数据最终一致。一致性是因为有并发读写才有的问题，因此在理解一致性的问题时，一定要注意结合考虑并发读写的场景。
		从客户端角度，多进程并发访问时，更新过的数据在不同进程如何获取的不同策略，决定了不同的一致性。对于关系型数据库，要求更新过的数据能被后续的访问都能看到，这是“强一致性”。如果能容忍后续的部分或者全部访问不到，则是“弱一致性”。如果经过一段时间后要求能访问到更新后的数据，则是“最终一致性”。
	4、constant-time（常量时间）：意思就是无论n是什么值运算所花时间都一样。
	5、Linear-time（线性时间）：则是说多大n就花多少时间。
	6、Multiple-time（多项式时间）：则意味着随着n增大，n每增加1所花的时间增长越来越多。对于n^2-3这样一个多项式时间来说，n=2的时候可能只要花1的时间，甚至低于线性时间，但n=4的时候可能就要花13的时间了，可以想象再大一些这个数值会变得巨大。但是它又不及指数时间增长快(m^n)，且m^n不能写成多项式形式，所以它又和多项式时间有区别。	
	




































