-----------------------------------------Semaphore-------------------------------------------------------------------------------------------------------------
Semaphore：信号量。【Since:1.5】
	计数信号量。从概念上讲，信号量维护一组许可证。如果需要，每个acquire()都会阻塞，直到许可证可用，然后获取它。每个release()添加一个许可证，可能释放一个阻塞的获取者。但是，不使用实际的许可对象；Semaphore只保留可用数量的计数，并相应地执行操作。
 	信号量（Semaphore）通常用来限制线程的数量，使之不能访问某些（物理或逻辑）资源。例如，下面是一个使用信号量控制对项目池访问的类：	
		class Pool {
		   private static final int MAX_AVAILABLE = 100;
		   private final Semaphore available = new Semaphore(MAX_AVAILABLE, true);
		
		   public Object getItem() throws InterruptedException {
		     available.acquire();
		     return getNextAvailableItem();
		   }
		
		   public void putItem(Object x) {
		     if (markAsUnused(x))
		       available.release();
		   }
		
		   // Not a particularly efficient data structure; just for demo
		
		   protected Object[] items = ... whatever kinds of items being managed
		   protected boolean[] used = new boolean[MAX_AVAILABLE];
		
		   protected synchronized Object getNextAvailableItem() {
		     for (int i = 0; i < MAX_AVAILABLE; ++i) {
		       if (!used[i]) {
		          used[i] = true;
		          return items[i];
		       }
		     }
		     return null; // not reached
		   }
		
		   protected synchronized boolean markAsUnused(Object item) {
		     for (int i = 0; i < MAX_AVAILABLE; ++i) {
		       if (item == items[i]) {
		          if (used[i]) {
		            used[i] = false;
		            return true;
		          } else
		            return false;
		       }
		     }
		     return false;
		   }
		 }
 	在获得一个项目之前，每个线程必须从信号量中获得一个许可证，以保证项目可以使用。当线程处理完该项目后，它将返回池，并向信号量返回一个许可证，从而允许另一个线程获取该项目。请注意，在调用acquire()时不会保持同步锁，因为这样会阻止将项目返回到池。信号量封装了限制对池的访问所需的同步，与维护池本身一致性所需的任何同步分开。
 	一个初始化为1的信号量，如果使用它，那么它最多只能有一个可用的许可证，那么它可以作为互斥锁。这通常被称为二进制信号量，因为它只有两种状态：一个允许可用，或者零个允许可用。当以这种方式使用时，二进制信号量具有属性（与许多Lock实现不同），即“lock”可以由所有者以外的线程释放（因为信号量没有所有权的概念）。这在某些特定的上下文中很有用，例如死锁恢复。
 	此类的构造函数可选地接受一个公平性参数。当设置为false时，此类不保证线程获取许可的顺序。特别是，允许使用barging，也就是说，调用acquire()的线程可以在一直等待的线程之前分配一个许可证—从逻辑上讲，新线程将自己放在等待线程队列的最前面。当fairness设置为true时，信号量保证选择调用任何acquire方法的线程，以按照处理这些方法调用的顺序（先进先出；FIFO）获取许可证。注意，FIFO排序必须适用于这些方法中的特定内部执行点。因此，一个线程可以在另一个线程之前调用acquire，但在另一个线程之后到达排序点，同样，在方法返回时也可以这样。还请注意，未命名的tryAcquire方法不符合公平性设置，但会取得任何可用的许可证。
 	通常，用于控制资源访问的信号量应该被初始化为公平策略，以确保没有线程因访问资源而被耗尽。在将信号量用于其他类型的同步控制时，非公平排序策略的吞吐量优势往往超过公平策略。
 	这个类还提供了一次获取和释放多个许可证的方便方法。当使用这些方法时，如果不将公平策略设置为true，则要注意无限期推迟的风险增加。
 	内存一致性影响：在调用“release”方法（如release()）之前，线程中的操作发生在另一个线程中成功的“acquire”方法（如acquire()）之后的操作之前。
 	
	
	类定义	：public class Semaphore implements java.io.Serializable
	实现接口	：java.io.Serializable
------------------------------------------------------------------------------------------------------------------------------------------------------
Constructor Summary（构造器概要）：
	public Semaphore(int permits)
		使用给定的许可证数量和非空公平策略设置创建信号量Semaphore。
	public Semaphore(int permits, boolean fair)
		permits - 可用许可证的初始数量。此值可能为负值，在这种情况下，必须在授予任何获取之前进行释放。
		fair - 如果此信号量将保证在争用情况下先进先出（FIFO）授予许可证（即公平策略），则为true，否则为false。
		使用给定的许可数和给定的公平性策略设置创建信号量。
				
Method Summary（方法概要）：
	acquire():void 
		从这个信号量获取一个许可证，阻塞直到一个可用，或者线程被中断。
		获得许可证（如果有许可证并立即返回），将可用许可证的数量减少一个。
		如果没有可用的许可证，则出于线程调度目的，当前线程将被禁用，并处于休眠状态，直到发生以下两种情况之一：
			● 其他一些线程为此信号量调用release()方法，当前线程接下来将被分配一个许可证；或者
			● 其他一些线程中断当前线程。
		如果当前线程：
			● 在进入此方法时是否设置了中断状态；或
			● 在等待许可证时中断，
		然后抛出InterruptedException异常，并清除当前线程的中断状态。
		【Throws】：
			InterruptedException 如果当前线程被中断
	acquire(int permits):void 
		从这个信号量获取给定数量的许可证，阻塞直到所有许可证都可用，或者线程被中断。
		获取给定数量的许可证（如果可用），并立即返回，将可用许可证数量减少给定数量。
		如果没有足够的许可证可用，那么当前线程将因线程调度而禁用，并处于休眠状态，直到发生以下两种情况之一：
			● 其他线程调用这个信号量的release方法，当前线程是下一个被分配的许可证并且可用的许可证数量满足此请求；或者
			● 其他一些线程中断当前线程。
		如果当前线程：
			● 在进入此方法时是否设置了中断状态；或
			● 在等待许可证时中断，
		然后抛出InterruptedException，并清除当前线程的中断状态。任何要分配给这个线程的许可证都会被分配给试图获取许可证的其他线程，就好像通过调用release()获得了许可证一样。
		【Throws】：
			InterruptedException 如果当前线程被中断
			IllegalArgumentException 如果permits为负数
	acquireUninterruptibly():void 
		从这个信号量获取一个许可证，阻塞直到一个可用。
		获得许可证（如果有许可证并立即返回），将可用许可证的数量减少一个。
		如果没有可用的许可证，则出于线程调度的目的，当前线程将被禁用，并处于休眠状态，直到其他线程为此信号量调用release()方法，并且当前线程接下来将被分配一个许可证。
		如果当前线程在等待许可证时被中断，那么它将继续等待，但是线程被分配许可证的时间可能会与它在没有中断的情况下收到许可证的时间相比发生变化。当线程确实从这个方法返回时，它的中断状态将被设置。
	acquireUninterruptibly(int permits):void 
		从这个信号量获取给定数量的许可证，阻塞直到所有许可证都可用。
		获取给定数量的许可证（如果可用），并立即返回，将可用许可证数量减少给定数量。
		如果没有足够的许可证可用，那么当前线程将出于线程调度的目的而被禁用，并处于休眠状态，直到其他线程调用此信号量的一个释放方法为止，当前线程将紧接着被分配许可证，并且可用许可证的数量满足此请求。
		果当前线程在等待许可证时被中断，那么它将继续等待，并且其在队列中的位置不受影响。当线程确实从这个方法返回时，它的中断状态将被设置。
		【Throws】：
			IllegalArgumentException 如果permits为负数
	availablePermits():int 
		返回此信号量中当前可用的许可证数量。
		此方法通常用于调试和测试目的。
	drainPermits():int 
		获取并返回所有立即可用的许可证。
	getQueuedThreads():protected Collection<Thread> 
		返回包含可能正在等待获取的线程的集合。由于实际线程集在构造此结果时可能会动态更改，因此返回的集合只是一个最佳工作估计。返回集合的元素没有特定的顺序。这种方法的设计是为了方便子类的构建，这些子类提供了更广泛的监控设施。
	getQueueLength():final int 
		返回等待获取的线程数的估计值。该值只是一个估计值，因为当该方法遍历内部数据结构时，线程数可能会动态更改。此方法设计用于监视系统状态，而不是同步控制。
	hasQueuedThreads():final boolean
		 查询是否有任何线程正在等待获取。请注意，由于取消可能在任何时候发生，因此真正的返回并不保证任何其他线程都将获取。此方法主要用于监视系统状态。
	isFair():boolean 
		如果此信号量的公平性设置为true，则返回true。
	reducePermits(int reduction):protected void 
	release():void 
	release(int permits):void 
	toString():String 
	tryAcquire():boolean 
	tryAcquire(int permits):boolean 
	tryAcquire(int permits, long timeout, TimeUnit unit):boolean 
	tryAcquire(long timeout, TimeUnit unit):boolean 
	
	
	
------------------------------------------------------------------------------------------------------------------------------------------------------
附录：
	1、注：文档中的△符号表示覆盖重写方法，✘符号表示已被淘汰掉的方法。	
	2、注：文档中的★符号表示抽象方法或者直接抛出UnsupportedOperationException异常的方法，总之没有实现具体功能代码的方法。
	3、loadFactor：负载因子（或称为负载系数），它等于“size/capacity”（即大小与容量的比率）。负载因子为0，表示空的hash表，0.5表示半满的散列表，依此类推。轻负载的散列表具有冲突少、适宜插入与查询的特点（但是使用Iterator迭代元素时比较慢）
	4、initialCapacity：初始容量。创建hash表时桶的数量，并发操作时ConcurrentHashMap是一次锁住一个桶。ConcurrentHashMap默认将hash表分为16个桶，诸如get、put、remove等常用操作只锁住当前需要用到的桶。这样，原来只能一个线程进入，现在却能同时有16个写线程执行，并发性能的提升是显而易见的。
	5、java并发一致性：
		对于一致性，可以分为从客户端和服务端两个不同的视角。从客户端来看，一致性主要指的是多并发访问时更新过的数据如何获取的问题。从服务端来看，则是更新如何复制分布到整个系统，以保证数据最终一致。一致性是因为有并发读写才有的问题，因此在理解一致性的问题时，一定要注意结合考虑并发读写的场景。
		从客户端角度，多进程并发访问时，更新过的数据在不同进程如何获取的不同策略，决定了不同的一致性。对于关系型数据库，要求更新过的数据能被后续的访问都能看到，这是“强一致性”。如果能容忍后续的部分或者全部访问不到，则是“弱一致性”。如果经过一段时间后要求能访问到更新后的数据，则是“最终一致性”。
	6、SkipList：跳表。	使用“空间换时间”的算法，令链表的每个结点不仅记录next结点位置，还可以按照level层级分别记录后继第level个结点。在查找时，首先按照层级查找，比如：当前跳表最高层级为3，即每个结点中不仅记录了next结点（层级1），还记录了next的next（层级2）、next的next的next（层级3）结点。现在查找一个结点，则从头结点开始先按高层级开始查：head->head的next的next的next->。。。直到找到结点或者当前结点q的值大于所查结点，则此时当前查找层级的q的前一节点p开始，在p~q之间进行下一层级（隔1个结点）的查找......直到最终迫近、找到结点。此法使用的就是“先大步查找确定范围，再逐渐缩小迫近”的思想进行的查找。	
	7、constant-time（常量时间）：意思就是无论n是什么值运算所花时间都一样。
	8、Linear-time（线性时间）：则是说多大n就花多少时间。
	9、Multiple-time（多项式时间）：则意味着随着n增大，n每增加1所花的时间增长越来越多。对于n^2-3这样一个多项式时间来说，n=2的时候可能只要花1的时间，甚至低于线性时间，但n=4的时候可能就要花13的时间了，可以想象再大一些这个数值会变得巨大。但是它又不及指数时间增长快(m^n)，且m^n不能写成多项式形式，所以它又和多项式时间有区别。	
	10、	Copy-On-Write：简称COW，是一种用于程序设计中的优化策略。其基本思路是，从一开始大家都在共享同一个内容，当某个人想要修改这个内容的时候，才会真正把内容Copy出去形成一个新的内容然后再改，这是一种延时懒惰策略。从JDK1.5开始Java并发包里提供了两个使用CopyOnWrite机制实现的并发容器,它们是CopyOnWriteArrayList和CopyOnWriteArraySet。CopyOnWrite容器非常有用，可以在非常多的并发场景中使用到。
		CopyOnWrite容器即写时复制的容器。通俗的理解是当我们往一个容器添加元素的时候，不直接往当前容器添加，而是先将当前容器进行Copy，复制出一个新的容器，然后新的容器里添加元素，添加完元素之后，再将原容器的引用指向新的容器。这样做的好处是我们可以对CopyOnWrite容器进行并发的读，而不需要加锁，因为当前容器不会添加任何元素。所以CopyOnWrite容器也是一种读写分离的思想，读和写不同的容器。
	11、线程“公平”与“饥饿”：如果一个线程因为CPU时间全部被其他线程抢走而得不到CPU运行时间，这种状态被称之为“饥饿”。而该线程被“饥饿致死”正是因为它得不到CPU运行时间的机会。解决饥饿的方案被称之为“公平性” – 即所有线程均能公平地获得运行机会。		



































