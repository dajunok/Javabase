-------------------------------------ThreadPoolExecutor-----------------------------------------------------------------------------------------------------------------------------------
ThreadPoolExecutor：线程池执行器。【since 1.5】
	一种执行器服务(ExecutorService)，它使用可能几个线程池中的一个来执行每个提交的任务，通常使用执行器（Executors）工厂方法进行配置。
	线程池解决了两个不同的问题：它们通常在执行大量异步任务时提供更好的性能，这是由于减少了每个任务的调用开销，并且它们提供了一种在执行任务集合时使用的资源（包括线程）的边界和管理方法。每个线程池执行器（ThreadPoolExecutor）还维护一些基本统计信息，例如已完成任务的数量。
	为了在广泛的上下文中有用，这个类提供了许多可调整的参数和可扩展性挂钩。但是，我们鼓励程序员使用更方便的执行器工厂方法Executors.newCachedThreadPool()（无边界线程池，带自动线程回收）、Executors.newFixedThreadPool(int)（固定大小线程池）和Executors.newSingleThreadExecutor()（单后台线程），为最常见的使用场景预先配置设置。否则，在手动配置和优化此类时，请使用以下指南：
	
	核心和最大池大小：
	ThreadPoolExecutor将根据corePoolSize（参见getCorePoolSize()）和maximumPoolSize（参见getMaximumPoolSize()）设定的界限自动调整池大小（参见getPoolSize()）。当在方法execute(Runnable)中提交一个新任务，并且运行的线程少于corePoolSize时，即使其他工作线程空闲，也会创建一个新线程来处理请求。
	如果运行的线程数超过corePoolSize但少于maximumPoolSize，则只有在队列已满时才会创建新的线程。通过将corePoolSize和maximumPoolSize设置相同，可以创建固定大小的线程池。通过将maximumPoolSize设置为基本上无边界的值（如Integer.MAX_VALUE），可以允许线程池容纳任意数量的并发任务。最典型的情况是，核心池和最大池尺寸仅在施工时设置，但也可以使用setCorePoolSize(int)和setMaximumPoolSize(int)动态更改。
	
	按需创建（On-demand construction）：
	默认情况下，甚至核心线程最初都是在新任务到达时创建和启动的，但可以使用方法prestartCoreThread()或prestartAllCoreThreads()动态重写。如果使用非空队列构造线程池，则可能需要预启动线程。
	
	创建新线程：
	使用ThreadFactory创建新线程。如果没有另外指定，则使用Executors.defaultThreadFactory()，它将创建所有线程都处于相同的ThreadGroup、具有相同NORM_PRIORITY优先级和非守护进程状态的线程。通过提供不同的ThreadFactory，可以更改线程的名称、线程组、优先级、守护进程状态等。如果ThreadFactory在从newThread返回null时未能创建线程，则执行器将继续，但可能无法执行任何任务。线程应具有“modifyThread”运行时权限。如果使用线程池的工作线程或其他线程不具有此权限，则服务可能降级：配置更改可能不会及时生效，关闭池可能仍处于终止可能但未完成的状态。
	
	保持活跃时间（Keep-alive times）：
	如果池当前有多个corePoolSize线程，则如果超出的线程空闲时间超过keepAliveTime，则将终止这些线程（请参见getKeepAliveTime(TimeUnit)）。这提供了一种在线程池未被积极使用时减少资源消耗的方法。如果线程池稍后变得更活跃，将构造新线程。也可以使用setKeepAliveTime(long, TimeUnit)方法动态更改此参数。使用值Long.MAX_VALUE TimeUnit.NANOSECONDS可以有效地禁止空闲线程在关闭之前终止。默认情况下，仅当线程数超过corePoolSize时才应用保持活动策略。但是方法allowCoreThreadTimeOut(boolean)也可以用于将这个超时策略应用到核心线程，只要keepAliveTime值为非零。
	
	排队（Queuing）：
	任何阻塞队列都可以用于传送和保留提交的任务。此队列的使用与池大小调整交互：
		● 如果运行的线程少于corePoolSize线程，则执行器（Executor）始终倾向于添加新线程，而不是排队。
		● 如果corePoolSize或更多线程正在运行，执行器（Executor）总是倾向于将请求排队，而不是添加新线程。
		● 如果一个请求不能排队，则会创建一个新线程，除非这将超过maximumPoolSize，在这种情况下，任务将被拒绝。
	排队一般有三种策略：
		1、直接移交。对于工作队列，一个好的默认选择是同步队列（SynchronousQueue），它将任务分发给线程，而不保留它们。在这里，如果没有线程可以立即运行任务，那么对该任务进行排队的尝试将失败，因此将构造一个新的线程。此策略在处理可能具有内部依赖关系的请求集合时避免锁定。直接移交通常需要无界限的maximumPoolSizes，以避免拒绝新提交的任务。这反过来也承认了当命令继续以比处理速度更快的速度到达时，线程可能会无限增长。
		2、无限队列。使用无限队列（例如，没有预定义容量的LinkedBlockingQueue）将导致新任务在所有corePoolSize线程忙时在队列中等待。因此，最多只能创建corePoolSize个线程。（因此，maximumPoolSize的值没有任何影响。）当每个任务完全独立于其他任务时，这可能是适当的，因此任务不能影响其他任务的执行；例如，在网页服务器中。尽管这种类型的排队在消除请求的短暂突发性方面很有用，但它也承认当命令平均以高于处理速度的速度继续到达时，可能会出现无限制的工作队列增长。
		3、有界队列。有界队列（例如，ArrayBlockingQueue）有助于防止有限maximumPoolSizes使用时资源耗尽，但可能更难调整和控制。队列大小和最大池大小可以相互交换：使用大型队列和小型池可以最大限度地减少CPU使用、操作系统（OS）资源和上下文切换开销，但可能导致人为的低吞吐量。如果任务经常阻塞（例如，如果它们是I/O绑定的），系统可能能够为比您所允许的更多的线程安排时间。使用小队列通常需要更大的线程池大小，这样可以使CPU更忙，但可能会遇到不可接受的调度开销，这也会降低吞吐量。
	
	拒绝任务（Rejected tasks）：
	方法execute(Runnable)中提交的新任务将在执行器（Executor）已关闭时被拒绝，也将在执行器对最大线程和工作队列容量使用有限界限且已饱和时被拒绝。无论哪种情况，execute方法都会调用其RejectedExecutionHandler的RejectedExecutionHandler.rejectedExecution(Runnable,ThreadPoolExecutor)方法。提供了四个预定义的处理程序策略：
		1、在默认ThreadPoolExecutor.AbortPolicy中，处理程序在拒绝时抛出运行时RejectedExecutionException异常。
		2、在ThreadPoolExecutor.CallerRunsPolicy中，调用execute本身的线程运行任务。这提供了一个简单的反馈控制机制，可以降低提交新任务的速度。
		3、在ThreadPoolExecutor.DiscardPolicy中，只会删除无法执行的任务。
		4、在ThreadPoolExecutor.DiscardOldestPolicy中，如果未关闭执行器，则会删除工作队列头部的任务，然后重试执行（可能再次失败，导致重复执行）。
	可以定义和使用其他类型的RejectedExecutionHandler类。这样做需要一些注意，特别是当策略设计为仅在特定容量或排队策略下工作时。
	
	钩子方法（Hook methods）：
	此类提供受保护的可重写beforeExecute(Thread, Runnable)和afterExecute(Runnable, Throwable)方法，这些方法在执行每个任务之前和之后调用。这些可以用于操作执行环境；例如，重新初始化线程局部变量、收集统计信息或添加日志项。此外，可以重写terminated()方法来执行Executor完全终止后需要执行的任何特殊处理。
	如果钩子或回调方法抛出异常，则内部工作线程可能会依次失败并突然终止。
	
	队列维护（Queue maintenance）：
	方法getQueue()允许访问工作队列以进行监视和调试。强烈反对将此方法用于任何其他目的。提供了两种方法，remove(Runnable)和purge()，用于在大量排队的任务被取消时帮助内存回收。
	
	终止线程池（Finalization）
	程序中不再引用并且没有剩余线程的池将自动关闭。如果您希望确保回收未引用的池，即使用户忘记调用shutdown()，那么您必须通过设置适当的保持活动时间、使用零核心线程的下限与/或者设置allowCoreThreadTimeOut(boolean)来终止未使用线程。
	扩展示例。此类的大多数扩展重写一个或多个受保护的hook方法。例如，这里有一个子类，它添加了一个简单的暂停/恢复功能：
		 class PausableThreadPoolExecutor extends ThreadPoolExecutor {
		   private boolean isPaused;
		   private ReentrantLock pauseLock = new ReentrantLock();
		   private Condition unpaused = pauseLock.newCondition();
		
		   public PausableThreadPoolExecutor(...) { super(...); }
		
		   protected void beforeExecute(Thread t, Runnable r) {
		     super.beforeExecute(t, r);
		     pauseLock.lock();
		     try {
		       while (isPaused) unpaused.await();
		     } catch (InterruptedException ie) {
		       t.interrupt();
		     } finally {
		       pauseLock.unlock();
		     }
		   }
		
		   public void pause() {
		     pauseLock.lock();
		     try {
		       isPaused = true;
		     } finally {
		       pauseLock.unlock();
		     }
		   }
		
		   public void resume() {
		     pauseLock.lock();
		     try {
		       isPaused = false;
		       unpaused.signalAll();
		     } finally {
		       pauseLock.unlock();
		     }
		   }
		 }	
	
	
	类定义	：public class ThreadPoolExecutor extends AbstractExecutorService
	实现接口	：Executor,ExecutorService
	内部类	：AbortPolicy,CallerRunsPolicy,DiscardOldestPolicy,DiscardPolicy
------------------------------------------------------------------------------------------------------------------------------------------------------
Constructor Summary（构造器概要）：
	public ThreadPoolExecutor(int corePoolSize,
							  int maximumPoolSize,
							  long keepAliveTime,
							  TimeUnit unit,
							  BlockingQueue<Runnable> workQueue)
       	参数说明：                       
			corePoolSize - 除非设置了allowCoreThreadTimeOut，否则要保留在池中的线程数，即使它们是空闲的。
			maximumPoolSize - 池中允许的最大线程数
			keepAliveTime - 当线程数大于corePoolSize时，这是多余的空闲线程在终止前等待新任务的最长时间。
			unit - keepAliveTime参数的时间单位
			workQueue - 工作队列。用于在执行任务之前保存任务的队列。此队列将只保存由execute方法提交的可运行任务。
		使用给定的初始参数和默认线程工厂创建新的ThreadPoolExecutor，并拒绝执行处理程序。使用Executors的工厂方法而不是这个通用的构造函数可能更方便。
		【Throws】：
			IllegalArgumentException 如果下列条件之一成立：
					corePoolSize < 0
					keepAliveTime < 0
					maximumPoolSize <= 0
					maximumPoolSize < corePoolSize
			NullPointerException 如果workQueue为null
		
	------------------------------------------------------------------------------------------------------------------	
	public ThreadPoolExecutor(int corePoolSize,
							  int maximumPoolSize,
							  long keepAliveTime,
							  TimeUnit unit,
							  BlockingQueue<Runnable> workQueue,
							  RejectedExecutionHandler handler) 
		参数说明：                       
			corePoolSize - 除非设置了allowCoreThreadTimeOut，否则要保留在池中的线程数，即使它们是空闲的。
			maximumPoolSize - 池中允许的最大线程数
			keepAliveTime - 当线程数大于corePoolSize时，这是多余的空闲线程在终止前等待新任务的最长时间。
			unit - keepAliveTime参数的时间单位
			workQueue - 工作队列。用于在执行任务之前保存任务的队列。此队列将只保存由execute方法提交的可运行任务。
			handler - 由于达到线程边界和队列容量而阻止执行时要使用的处理程序
		使用给定的初始参数和默认线程工厂创建新的ThreadPoolExecutor。
		【Throws】：
			IllegalArgumentException 如果下列条件之一成立：
					corePoolSize < 0
					keepAliveTime < 0
					maximumPoolSize <= 0
					maximumPoolSize < corePoolSize
			NullPointerException 如果workQueue或者handler为null
	
	------------------------------------------------------------------------------------------------------------------
	public ThreadPoolExecutor(int corePoolSize,
                              int maximumPoolSize,
                              long keepAliveTime,
                              TimeUnit unit,
                              BlockingQueue<Runnable> workQueue,
                              ThreadFactory threadFactory)
    	参数说明：                       
			corePoolSize - 除非设置了allowCoreThreadTimeOut，否则要保留在池中的线程数，即使它们是空闲的。
			maximumPoolSize - 池中允许的最大线程数
			keepAliveTime - 当线程数大于corePoolSize时，这是多余的空闲线程在终止前等待新任务的最长时间。
			unit - keepAliveTime参数的时间单位
			workQueue - 工作队列。用于在执行任务之前保存任务的队列。此队列将只保存由execute方法提交的可运行任务。
			threadFactory - 执行器创建新线程时要使用的工厂
    	使用给定的初始参数和默认被拒绝的执行处理程序创建新的ThreadPoolExecutor。
    	【Throws】：
			IllegalArgumentException 如果下列条件之一成立：
					corePoolSize < 0
					keepAliveTime < 0
					maximumPoolSize <= 0
					maximumPoolSize < corePoolSize
			NullPointerException 如果workQueue或者threadFactory为null
    ------------------------------------------------------------------------------------------------------------------	
	public ThreadPoolExecutor(int corePoolSize,
                              int maximumPoolSize,
                              long keepAliveTime,
                              TimeUnit unit,
                              BlockingQueue<Runnable> workQueue,
                              ThreadFactory threadFactory,
                              RejectedExecutionHandler handler)                                                         
		参数说明：                       
			corePoolSize - 除非设置了allowCoreThreadTimeOut，否则要保留在池中的线程数，即使它们是空闲的。
			maximumPoolSize - 池中允许的最大线程数
			keepAliveTime - 当线程数大于corePoolSize时，这是多余的空闲线程在终止前等待新任务的最长时间。
			unit - keepAliveTime参数的时间单位
			workQueue - 工作队列。用于在执行任务之前保存任务的队列。此队列将只保存由execute方法提交的可运行任务。
			threadFactory - 执行器创建新线程时要使用的工厂
			handler - 由于达到线程边界和队列容量而阻止执行时要使用的处理程序
		【Throws】：
			IllegalArgumentException 如果下列条件之一成立：
					corePoolSize < 0
					keepAliveTime < 0
					maximumPoolSize <= 0
					maximumPoolSize < corePoolSize
			NullPointerException 如果workQueue或者handler或者threadFactory为null




Method Summary（方法概要）：
	afterExecute(Runnable r, Throwable t):protected void 
		t -	导致终止的异常，如果执行正常，则为null。
		在完成给定Runnable的执行时调用的方法。此方法由执行任务的线程调用。如果不为空（non-null），则throwable是导致执行突然终止的未捕获RuntimeException或Error。
		这个实现什么也不做(没有方法实体)，但可以在子类中定制。注意：为了正确地嵌套多个重写，子类通常应该在这个方法的开头调用super.afterExecute。
		注意：当操作显式地或通过submit等方法包含在任务（如FutureTask）中时，这些任务对象捕获并维护计算异常，因此不会导致突然终止，并且不会将内部异常传递给此方法。如果希望在该方法中捕获这两种类型的失败，则可以进一步探测此类情况，例如，在此示例子类中，如果任务已中止，则打印直接原因或基础异常：
			 class ExtendedExecutor extends ThreadPoolExecutor {
			   // ...
			   protected void afterExecute(Runnable r, Throwable t) {
			     super.afterExecute(r, t);
			     if (t == null && r instanceof Future<?>) {
			       try {
			         Object result = ((Future<?>) r).get();
			       } catch (CancellationException ce) {
			           t = ce;
			       } catch (ExecutionException ee) {
			           t = ee.getCause();
			       } catch (InterruptedException ie) {
			           Thread.currentThread().interrupt(); // ignore/reset
			       }
			     }
			     if (t != null)
			       System.out.println(t);
			   }
			 }				
	allowCoreThreadTimeOut(boolean value):void 
		value - 如果要超时则设置为true，否则设置为false。
		设置策略，控制核心线程在保持活动状态时间内没有任务到达时是否可以超时和终止，在新任务到达时根据需要进行替换。如果为false，则不会因为缺少传入任务而终止核心线程。如果为true，同样适用于非核心线程的保持活动策略也适用于核心线程。为避免连续更换线程，当设置为true时，保持活动时间必须大于零。通常应在池被激活之前调用此方法。
		【Throws】：
			IllegalArgumentException 如果值为true且当前保持活动时间不大于零
	allowsCoreThreadTimeOut():boolean 		
		如果此线程池允许核心线程超时，并且在保留时间内没有任务到达时终止，则返回true，在新任务到达时根据需要替换。如果为true，同样适用于非核心线程的保持活动策略也适用于核心线程。如果为false（默认值），则不会因为缺少传入任务而终止核心线程。
		如果允许核心线程超时，则为true，否则为false
	awaitTermination(long timeout, TimeUnit unit):boolean 
		△ timeout - 最长等待时间
		unit - timeout参数的时间单位
		阻塞（等待终止），直到所有任务在关闭请求后完成执行，或发生超时，或当前线程被中断（以先发生者为准）。
		【Throws】：
			InterruptedException 如果在等待时中断
	beforeExecute(Thread t, Runnable r):protected void 
		在给定线程中执行给定Runnable之前调用的方法。此方法由将执行任务r的线程t调用，并可用于重新初始化ThreadLocals或执行logging。
		这个实现什么也不做（没有方法实体），但可以在子类中定制。注意：为了正确地嵌套多个重写，子类通常应该在该方法结束时调用super.beforeExecute。
	execute(Runnable command):void 
		△ 将来某个时候执行给定的任务。任务可以在新线程或现有线程池中执行。如果任务无法提交执行，可能是因为该执行器已关闭或已达到其容量，则该任务由当前的RejectedExecutionHandler处理。
		【Throws】：
			RejectedExecutionException 如果任务无法被执行，则由RejectedExecutionHandler决定。
			NullPointerException 如果command为null
	finalize():protected void 
		△ 当不再引用此执行器并且它没有线程时，调用Shutdown。
	getActiveCount():int 
		返回当前正在执行任务的线程的近似数目。
	getCompletedTaskCount():long 
		返回已完成执行的任务的大致总数。由于任务和线程的状态在计算过程中可能会动态更改，因此返回的值只是一个近似值，但在连续调用中不会减少。
	getCorePoolSize():int 
		返回线程的核心数目。（这个数目由setCorePoolSize(int)方法进行设置）
	getKeepAliveTime(TimeUnit unit):long 
		unit - 指定返回值的时间单位
		返回线程保持活动状态的时间，这是超过核心池大小的线程在终止前可能保持空闲的时间量。
	getLargestPoolSize():int 
		返回池中同时存在的最大线程数量。
	getMaximumPoolSize():int 
		返回允许的最大线程数量。
	getPoolSize():int 
		返回池中的当前线程数量。
	getQueue():BlockingQueue<Runnable> 
		返回此执行器使用的任务队列。对任务队列的访问主要用于调试和监视。此队列可能正在使用中。检索任务队列不会阻止排队的任务执行。
	getRejectedExecutionHandler():RejectedExecutionHandler 
		返回不可执行任务的当前处理程序。
	getTaskCount():long 
		返回已计划执行的任务（调度任务）的大致总数。由于任务和线程的状态在计算过程中可能会动态更改，因此返回的值只是一个近似值。
	getThreadFactory():ThreadFactory 
		返回用于创建新线程的线程工厂。
	isShutdown():boolean 
		△ 如果此执行器已关闭，则返回true。
	isTerminated():boolean 
		△ 如果关闭后所有任务都已完成，则返回true。请注意，除非先调用shutdown或shutdownNow，否则isTerminated永远不会为true。
	isTerminating():boolean 
		如果此执行器正在shutdown()或shutdownNow()之后终止，但尚未完全终止，则返回true。此方法可能对调试有用。如果在关闭后一段足够长的时间内返回“true”，则表明提交的任务已忽略或抑制中断，从而导致该执行器无法正确终止。
	prestartAllCoreThreads():int 
		启动所有核心线程，使它们空闲地等待工作。这将覆盖仅在执行新任务时启动核心线程的默认策略。
		返回被启动线程的总数。
	prestartCoreThread():boolean 
		启动核心线程，使其空闲地等待工作。这将覆盖仅在执行新任务时启动核心线程的默认策略。如果所有核心线程都已启动，则此方法将返回false。
		如果线程被启动则返回true。
	purge():void 
		尝试从工作队列中删除所有已取消的Future任务。此方法可作为存储回收操作使用，对功能没有其他影响。被取消的任务永远不会执行，但可能会累积到工作队列中，直到工作线程可以主动删除它们。调用此方法将尝试立即删除它们。但是，此方法可能无法在存在其他线程干扰的情况下删除任务。
	remove(Runnable task):boolean 
		如果此任务存在，则将其从执行器的内部队列中删除，从而导致它在尚未启动时不运行。
		此方法可能作为取消方案的一部分有用。它可能无法删除在放入内部队列之前已转换为其他形式的任务。例如，使用submit输入的任务可以转换为保持Future状态的形式。但是，在这种情况下，可以使用方法purge()删除那些已取消的Future。
	setCorePoolSize(int corePoolSize):void 
		设置线程的核心数目。这将覆盖构造函数中设置的任何值。如果新的值小于当前的值，多余的现有线程将在下一次空闲时终止。如果更大，新线程将在需要时启动以执行任何排队的任务。
		【Throws】：
			IllegalArgumentException 如果corePoolSize < 0
	setKeepAliveTime(long time, TimeUnit unit):void 
		time - 等待的时间。时间值为零将导致多余的线程在执行任务后立即终止。
		unit - time参数的时间单位
		设置线程在终止前可能保持空闲的时间限制。如果池中的线程数超过了核心线程数，则在等待这段时间而不处理任务后，多余的线程将被终止。这将覆盖构造函数中设置的任何值。
		【Throws】：
			IllegalArgumentException 如果时间小于零或时间为零并且allowsCoreThreadTimeOut
	setMaximumPoolSize(int maximumPoolSize):void 
		设置允许的最大线程数。这将覆盖构造函数中设置的任何值。如果新的值小于当前的值，多余的现有线程将在下一次空闲时终止。
		【Throws】：
			IllegalArgumentException 如果新的最大值小于或等于零，或小于核心池大小
	setRejectedExecutionHandler(RejectedExecutionHandler handler):void 
		为不可执行的任务设置新的处理程序。
		【Throws】：
			NullPointerException 如果handler为null
	setThreadFactory(ThreadFactory threadFactory):void 
		设置用于创建新线程的线程工厂。
		【Throws】：
			NullPointerException 如果threadFactory为null
	shutdown():void 
		△ 启动有序关闭，在该关闭中执行以前提交的任务，但不接受新任务。如果已经关闭，则调用没有其他效果。
		此方法不等待以前提交的任务完成执行。使用awaitTermination来完成此操作。
		【Throws】：
			SecurityException 如果存在安全管理器并关闭此ExecutorService，则可能会操作不允许调用方修改的线程，因为它不具有RuntimePermission("modifyThread")，或者安全管理器的checkAccess方法拒绝访问。
	shutdownNow():List<Runnable> 
		△ 尝试停止所有正在执行的任务，停止正在等待的任务的处理，并返回正在等待执行的任务的列表。从该方法返回时，这些任务将从任务队列中排出（删除）。
		此方法不等待主动执行的任务终止。使用awaitTermination来完成此操作。
		除了尽最大努力尝试停止处理活动执行的任务之外，没有任何保证。此实现通过Thread.interrupt()取消任务，因此任何未能响应中断的任务都可能永远不会终止。
		返回从未开始执行的任务列表。
		【Throws】：
			SecurityException 如果存在安全管理器并关闭此ExecutorService，则可能会操作不允许调用方修改的线程，因为它不具有RuntimePermission("modifyThread")，或者安全管理器的checkAccess方法拒绝访问。
	terminated():protected void 
		当执行器终止时调用此方法。默认实现什么也不做（没有方法实体）。注意：为了正确地嵌套多个重写，子类通常应该在这个方法中调用super.terminated。
	toString():String 
		△ 返回标识此线程池及其状态的字符串，包括运行状态指示、估计的工作线程和任务计数。
------------------------------------------------------------------------------------------------------------------------------------------------------
1、ThreadPoolExecutor$AbortPolicy


	类定义	：public static class AbortPolicy implements RejectedExecutionHandler
	实现接口	：RejectedExecutionHandler
------------------------------------------------------------------------------------------------------------------------------------------------------
Constructor Summary（构造器概要）：
	public AbortPolicy()

Method Summary（方法概要）：
	rejectedExecution(Runnable r, ThreadPoolExecutor e):void 


------------------------------------------------------------------------------------------------------------------------------------------------------
2、ThreadPoolExecutor$CallerRunsPolicy


	类定义	：public static class CallerRunsPolicy implements RejectedExecutionHandler
	实现接口	：RejectedExecutionHandler
------------------------------------------------------------------------------------------------------------------------------------------------------
Constructor Summary（构造器概要）：
	public CallerRunsPolicy()

Method Summary（方法概要）：
	rejectedExecution(Runnable r, ThreadPoolExecutor e):void 


------------------------------------------------------------------------------------------------------------------------------------------------------
3、ThreadPoolExecutor$DiscardOldestPolicy


	类定义	：public static class DiscardOldestPolicy implements RejectedExecutionHandler
	实现接口	：RejectedExecutionHandler
------------------------------------------------------------------------------------------------------------------------------------------------------
Constructor Summary（构造器概要）：
	public DiscardOldestPolicy()

Method Summary（方法概要）：
	rejectedExecution(Runnable r, ThreadPoolExecutor e):void 


------------------------------------------------------------------------------------------------------------------------------------------------------
4、ThreadPoolExecutor$DiscardPolicy


	类定义	：public static class DiscardPolicy implements RejectedExecutionHandler
	实现接口	：RejectedExecutionHandler
------------------------------------------------------------------------------------------------------------------------------------------------------
Constructor Summary（构造器概要）：
	public DiscardPolicy()

Method Summary（方法概要）：
	rejectedExecution(Runnable r, ThreadPoolExecutor e):void 


------------------------------------------------------------------------------------------------------------------------------------------------------

附录：
	1、注：文档中的△符号表示覆盖重写方法。	
	2、注：文档中的★符号表示抽象方法或者直接抛出UnsupportedOperationException异常的方法，总之没有实现具体功能代码的方法。
	3、work-stealing：工作窃取算法。是指某个线程从其队列里窃取任务来执行。一个大任务分割为若干个互不依赖的子任务，为了减少线程间的竞争，把这些子任务分别放到不同的队列里，并未每个队列创建一个单独的线程来执行队列里的任务，线程和队列一一对应。比如线程1负责处理1队列里的任务，2线程负责2队列的。但是有的线程会先把自己队列里的任务干完，而其他线程对应的队列里还有任务待处理。干完活的线程与其等着，不如帮其他线程干活，于是它就去其他线程的队列里窃取一个任务来执行。而在这时它们可能会访问同一个队列，所以为了减少窃取任务线程和被窃取任务线程之间的竞争，通常会使用双端队列，被窃取任务线程永远从双端队列的头部拿任务执行，而窃取任务线程永远从双端队列的尾部拿任务执行。
		优点：充分利用线程进行并行计算，减少线程间的竞争。
		缺点：在某些情况下还是会存在竞争，比如双端队列里只有一个任务时。并且该算法会消耗更多的系统资源， 比如创建多个线程和多个双端队列。
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		