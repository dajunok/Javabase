----------------------------------------CopyOnWriteArraySet<E>--------------------------------------------------------------------------------------------------------------
CopyOnWriteArraySet<E>：COW数组集。【Since:1.5】
	<E> 此集合维护的元素类型
	对其所有操作使用内部CopyOnWriteArrayList的Set。因此，它具有相同的基本特性：
		● 它最适合于集大小通常保持较小的应用程序，只读操作大大超过了可变操作的数目，并且需要防止遍历期间线程之间的干扰。
		● 它是线程安全的。
		● 可变操作（add、set、remove等）非常昂贵，因为它们通常需要复制整个底层数组。
		● 迭代器不支持可变的remove操作。
		● 通过迭代器的遍历速度很快，并且不会遇到来自其他线程的干扰。迭代器依赖于构造迭代器时数组的不变快照。
	样板使用情况。下面的代码描述使用一个写时复制集来维护一组处理程序对象，这些对象在状态更新时执行一些操作。
		 class Handler { void handle(); ... }
		
		 class X {
		   private final CopyOnWriteArraySet<Handler> handlers
		     = new CopyOnWriteArraySet<Handler>();
		   public void addHandler(Handler h) { handlers.add(h); }
		
		   private long internalState;
		   private synchronized void changeState() { internalState = ...; }
		
		   public void update() {
		     changeState();
		     for (Handler handler : handlers)
		       handler.handle();
		   }
		 }	
	该类是Java集合框架的成员。
	
	
	
	类定义	：public class CopyOnWriteArraySet<E> extends AbstractSet<E> implements java.io.Serializable
	实现接口	：Iterable<E>,Collection<E>,Set<E>,java.io.Serializable
------------------------------------------------------------------------------------------------------------------------------------------------------
Constructor Summary（构造器概要）：
	public CopyOnWriteArraySet()
		创建一个空集合。
	public CopyOnWriteArraySet(Collection<? extends E> c)
		创建包含指定集合的所有元素的集合。
		【Throws】：
			NullPointerException 如果指定的集合为null
			
Method Summary（方法概要）：
	add(E e):boolean 
		△ 如果指定的元素不存在，则将其添加到此集合中。更正式地说，如果集合不包含元素e2（e.equals(e2)），则将指定的元素e添加到此集合中。如果此集合已经包含元素e，则调用将使集合保持不变并返回false。
	addAll(Collection<? extends E> c):boolean
		如果指定集合中的所有元素尚不存在，则将它们添加到此集合中。如果指定的集合也是一个集合，则addAll操作将有效地修改此集合，使其值为两个集合的并集。如果在操作进行过程中修改了指定的集合，则此操作的行为不确定。 
	clear():void 
		删除此集合中的所有元素。此调用返回后，集合将为null。
	contains(Object o):boolean 
		如果此集合包含指定元素，则返回true。更正式地说，如果且仅当此集合包含元素e（如(o==null ? e==null : o.equals(e))）时返回true。
	containsAll(Collection<?> c):boolean 
		如果此集合包含指定集合的所有元素，则返回true。如果指定的集合也是集合，则如果该集合是集合的子集，则此方法返回true。
		【Throws】：
			NullPointerException 如果指定的集合为null
	equals(Object o):boolean 
		将指定的对象与此集进行相等比较。如果指定的对象与此对象是同一个对象，或者它也是一个集合，并且由迭代器在指定集合上返回的元素与由迭代器在该集合上返回的元素相同，则返回true。更正式地说，如果两个迭代器返回相同数量的元素，则认为它们返回相同的元素；对于迭代器在指定集合上返回的每个元素e1，迭代器在该集合上返回的元素e2（(e1==null ? e2==null : e1.equals(e2))）。
	forEach(Consumer<? super E> action):void 
		对Iterable的每个元素执行给定的操作，直到所有元素都被处理或操作引发异常为止。除非实现类另有指定，否则将按迭代顺序执行操作（如果指定了迭代顺序）。操作引发的异常将中继到调用方。
	isEmpty():boolean 
		如果此集合不包含元素，则返回true。
	iterator():Iterator<E> 
		按添加这些元素的顺序返回此集合中包含的元素的迭代器。
		返回的迭代器提供构造迭代器时集合状态的快照。遍历迭代器时不需要同步。迭代器不支持remove方法。
	remove(Object o):boolean 
		如果指定元素存在，则从该集合中移除该元素。更正式地说，如果这个集合包含这样一个元素，则删除元素e(o==null ? e==null : o.equals(e))。如果此集合包含元素，则返回“true”（如果此集合因调用而更改，则返回“等效”）。（调用返回后，此集合将不包含元素。）
	removeAll(Collection<?> c):boolean 
		从此集合中删除指定集合中包含的所有元素。如果指定的集合也是集合，则此操作将有效地修改此集合，使其值为两个集合的不对称集合差。
		【Throws】：
			ClassCastException 如果此集合的元素的类与指定集合不兼容（可选）
			NullPointerException 如果此集合包含null元素，并且指定的集合不允许null元素（可选），或者指定的集合为null
	removeIf(Predicate<? super E> filter):boolean 
		删除此集合中满足给定过滤器的所有元素。迭代期间或过滤器引发的错误或运行时异常将中继到调用方。
	retainAll(Collection<?> c):boolean
		仅保留此集合中包含在指定集合中的元素。换句话说，从该集合中删除指定集合中不包含的所有元素。如果指定的集合也是一个集合，则此操作将有效地修改此集合，使其值为两个集合的交集。 
		【Throws】：
			ClassCastException 如果此集合的元素的类与指定集合不兼容（可选）
			NullPointerException 如果此集合包含null元素，并且指定的集合不允许null元素（可选），或者指定的集合为null
	size():int 
		返回此集合中的元素数量。
	spliterator():Spliterator<E> 
		按添加这些元素的顺序返回此集合中元素的拆分器。
		拆分器报告Spliterator.IMMUTABLE、Spliterator.DISTINCT、Spliterator.SIZED 和 Spliterator.SUBSIZED特征。
		分割器提供构造分割器时集合状态的快照。在拆分器上操作时不需要同步。
	toArray():Object[] 
		返回包含此集合中所有元素的数组。如果这个集合对迭代器返回元素的顺序有任何保证，那么这个方法必须以相同的顺序返回元素。
		返回的数组将是“安全的”，因为此集合不维护对它的引用。（换句话说，此方法必须分配一个新数组，即使此集合由数组支持）。因此，调用者可以自由修改返回的数组。
		此方法充当基于数组和基于集合的API之间的桥梁。
	toArray(T[] a):<T> T[] 
		返回包含此集合中所有元素的数组；返回的数组的运行时类型是指定数组的运行时类型。如果集合符合指定的数组，则将在其中返回该集合。否则，将为新数组分配指定数组的运行时类型和该集合的大小。
		如果此集合适合具有备用空间的指定数组（即，数组中的元素多于此集合），则紧跟集合末尾的数组中的元素将设置为空。（只有当调用者知道该集合不包含任何空元素时，才有助于确定该集合的长度。）
		如果这个集合对迭代器返回元素的顺序有任何保证，那么这个方法必须以相同的顺序返回元素。
		与toArray()方法一样，此方法充当基于数组和基于集合的API之间的桥梁。此外，此方法允许对输出数组的运行时类型进行精确控制，并且可以在某些情况下用于节省分配成本。
		假设x是一个已知仅包含字符串的集合。以下代码可用于将集合转储到新分配的字符串数组中：
			String[] y = x.toArray(new String[0]);
		请注意，toArray(new Object[0])功能与toArray()相同
		【Throws】：
			ArrayStoreException 如果指定数组的运行时类型不是此集合中每个元素的运行时类型的父类型
			NullPointerException 如果指定的array为null
	
	
	
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
附录：
	1、注：文档中的△符号表示覆盖重写方法。	
	2、注：文档中的★符号表示抽象方法或者直接抛出UnsupportedOperationException异常的方法，总之没有实现具体功能代码的方法。
	3、loadFactor：负载因子（或称为负载系数），它等于“size/capacity”（即大小与容量的比率）。负载因子为0，表示空的hash表，0.5表示半满的散列表，依此类推。轻负载的散列表具有冲突少、适宜插入与查询的特点（但是使用Iterator迭代元素时比较慢）
	4、initialCapacity：初始容量。创建hash表时桶的数量，并发操作时ConcurrentHashMap是一次锁住一个桶。ConcurrentHashMap默认将hash表分为16个桶，诸如get、put、remove等常用操作只锁住当前需要用到的桶。这样，原来只能一个线程进入，现在却能同时有16个写线程执行，并发性能的提升是显而易见的。
	5、java并发一致性：
		对于一致性，可以分为从客户端和服务端两个不同的视角。从客户端来看，一致性主要指的是多并发访问时更新过的数据如何获取的问题。从服务端来看，则是更新如何复制分布到整个系统，以保证数据最终一致。一致性是因为有并发读写才有的问题，因此在理解一致性的问题时，一定要注意结合考虑并发读写的场景。
		从客户端角度，多进程并发访问时，更新过的数据在不同进程如何获取的不同策略，决定了不同的一致性。对于关系型数据库，要求更新过的数据能被后续的访问都能看到，这是“强一致性”。如果能容忍后续的部分或者全部访问不到，则是“弱一致性”。如果经过一段时间后要求能访问到更新后的数据，则是“最终一致性”。
	6、SkipList：跳表。	使用“空间换时间”的算法，令链表的每个结点不仅记录next结点位置，还可以按照level层级分别记录后继第level个结点。在查找时，首先按照层级查找，比如：当前跳表最高层级为3，即每个结点中不仅记录了next结点（层级1），还记录了next的next（层级2）、next的next的next（层级3）结点。现在查找一个结点，则从头结点开始先按高层级开始查：head->head的next的next的next->。。。直到找到结点或者当前结点q的值大于所查结点，则此时当前查找层级的q的前一节点p开始，在p~q之间进行下一层级（隔1个结点）的查找......直到最终迫近、找到结点。此法使用的就是“先大步查找确定范围，再逐渐缩小迫近”的思想进行的查找。	
	7、constant-time（常量时间）：意思就是无论n是什么值运算所花时间都一样。
	8、Linear-time（线性时间）：则是说多大n就花多少时间。
	9、Multiple-time（多项式时间）：则意味着随着n增大，n每增加1所花的时间增长越来越多。对于n^2-3这样一个多项式时间来说，n=2的时候可能只要花1的时间，甚至低于线性时间，但n=4的时候可能就要花13的时间了，可以想象再大一些这个数值会变得巨大。但是它又不及指数时间增长快(m^n)，且m^n不能写成多项式形式，所以它又和多项式时间有区别。	
	10、	Copy-On-Write：简称COW，是一种用于程序设计中的优化策略。其基本思路是，从一开始大家都在共享同一个内容，当某个人想要修改这个内容的时候，才会真正把内容Copy出去形成一个新的内容然后再改，这是一种延时懒惰策略。从JDK1.5开始Java并发包里提供了两个使用CopyOnWrite机制实现的并发容器,它们是CopyOnWriteArrayList和CopyOnWriteArraySet。CopyOnWrite容器非常有用，可以在非常多的并发场景中使用到。
		CopyOnWrite容器即写时复制的容器。通俗的理解是当我们往一个容器添加元素的时候，不直接往当前容器添加，而是先将当前容器进行Copy，复制出一个新的容器，然后新的容器里添加元素，添加完元素之后，再将原容器的引用指向新的容器。这样做的好处是我们可以对CopyOnWrite容器进行并发的读，而不需要加锁，因为当前容器不会添加任何元素。所以CopyOnWrite容器也是一种读写分离的思想，读和写不同的容器。