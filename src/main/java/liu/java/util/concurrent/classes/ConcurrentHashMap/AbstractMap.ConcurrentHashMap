----------------------------------------ConcurrentHashMap<K,V>--------------------------------------------------------------------------------------------------------------
ConcurrentHashMap<K,V>：并发哈希映射类。【Since:1.5】
	<K>	此映射维护的键的类型
	<V>	映射值的类型
	一个哈希表，支持完全并发的检索和高期望并发的更新。该类遵循与Hashtable相同的功能规范，并包含与Hashtable的每个方法对应的方法版本。但是，即使所有操作都是线程安全的，检索操作也不需要锁定，并且不支持以阻塞所有访问的方式锁定整个表。这个类在依赖线程安全而不依赖同步细节的程序中可以与Hashtable完全互操作。
	检索操作（包括get）一般不阻塞，因此可能与更新操作（包括put和remove）交叉。检索反映了最新完成的更新操作在开始时的结果。（更正式地说，给定键的更新操作在与报告更新值的该键的任何（非空）检索发生关系之前发生。）对于putAll和clear等聚合操作，并发检索可能只反映某些条目的插入或删除。类似地，迭代器（Iterator）、拆分器（Spliterator）和枚举（Enumeration）返回的元素反映了在迭代器/枚举创建时或创建后某个点上哈希表的状态。它们不会抛出ConcurrentModificationException。但是，迭代器被设计为一次只能由一个线程使用。请记住，聚合状态方法的结果（包括size、isEmpty和containsValue）通常只有在map映射未在其他线程中进行并发更新时才有用。否则，这些方法的结果反映了可能足以用于监测或估计目的，但不适用于程序控制的瞬态状态。
	当冲突太多时（即具有不同哈希代码但与表大小相比属于同一槽模的键），表将动态扩展，并在每个映射中保持大约两个箱的预期平均效果（对应于0.75负载因子阈值以调整大小）。在添加和删除映射时，这个平均值可能会有很大的差异，但总的来说，这为哈希表维护了一个普遍接受的时间/空间权衡。但是，调整这个或任何其他类型的哈希表的大小可能是一个相对缓慢的操作。如果可能，最好将大小估计作为可选的initialCapacity构造函数参数提供。另外一个可选的loadFactor（负载因子）构造函数参数提供了一种定制初始表容量的进一步方法，通过指定用于计算为给定数量的元素分配的空间量的表密度。此外，为了与此类的早期版本兼容，构造函数可以选择指定预期的并发级别作为内部大小调整的附加提示。请注意，使用具有完全相同hashCode()的多个键是降低任何哈希表性能的一种确切方式。为了改善影响，当键具有可比性时，此类可以使用键之间的比较顺序来帮助断开关系。
	可以创建ConcurrentHashMap的一组投影（使用newKeySet()或newKeySet(int)），或查看（仅当关键点感兴趣时使用keySet(Object)，并且映射值（可能是暂时的）未使用或全部采用相同的映射值。
	通过使用LongAdder值并通过computeIfAbsent初始化，ConcurrentHashMap可以用作可缩放频率图（柱状图或多集的一种形式）。例如，要将计数添加到ConcurrentHashMap<String,LongAdder>频率，可以使用freqs.computeIfAbsent(k -> new LongAdder()).increment()。
	这个类及其视图和迭代器实现了Map和Iterator接口的所有可选方法。
	与Hashtable类似，但与HashMap不同，此类不允许将空值用作键或值。
	ConcurrentHashMaps支持一组顺序和并行批量操作，与大多数Stream方法不同，这些批量操作设计为即使与由其他线程同时更新的映射一起应用，也能安全且通常是明智的；例如，在共享注册表中计算值的快照摘要时。有三种操作，每种操作有四种形式，接受带有键、值、条目和（键、值）参数和/或返回值的函数。由于ConcurrentHashMap的元素没有以任何特定的方式排序，并且可以在不同的并行执行中以不同的顺序进行处理，因此所提供函数的正确性不应依赖于任何排序，或依赖于在计算过程中可能临时更改的任何其他对象或值；并且，除了forEach操作之外，理想情况下应无副作用。Map.Entry对象上的批量操作不支持方法setValue。
		● forEach：对每个元素执行给定的操作。变量形式在执行操作之前对每个元素应用给定的转换。
		● search：返回对每个元素应用给定函数的第一个可用非空（non-null）结果；找到结果时跳过进一步搜索。
		● reduce：累积每个元素。所提供的约简函数不能依赖于排序（更正式地说，它应该是关联函数和交换函数）。有五种变体：
			● 明显减少。（此方法的形式不适用于（键、值）函数参数，因为没有相应的返回类型。）
			● 累积应用于每个元素的给定函数结果的映射缩减。
			● 使用给定的基值减少到double、long和int等级。
	这些批量操作接受parallelismThreshold参数。如果当前映射大小估计小于给定阈值，则方法按顺序进行。使用值Long.MAX_VALUE将抑制所有并行性。使用值1将导致最大的并行性，方法是将其划分为足够多的子任务，以充分利用用于所有并行计算的ForkJoinPool.commonPool()。通常，您首先会选择这些极端值中的一个，然后测量在权衡开销与吞吐量的值之间使用的性能。
	批量操作的并发属性来自ConcurrentHashMap，get(key)和相关访问方法返回的任何非空结果在与相关插入或更新的关系之前都会发生。任何批量操作的结果都反映了这些每个元素关系的组成（但对于整个映射来说不一定是原子关系，除非知道它是静态的）。相反，由于映射中的键和值从不为null，因此null可以作为当前缺少任何结果的可靠原子指示器。要维护此属性，null值用作所有非标量缩减操作的隐式基础。对于double、long和int版本，基础应该是当与任何其他值组合时返回该其他值的基础（更正式地说，它应该是用于减少的标识元素）。最常见的约简具有这些性质；例如，用基数0计算和或用基数MAX_VALUE计算最小值。
	作为参数提供的搜索和转换函数同样应返回null，以指示缺少任何结果（在这种情况下，不使用该结果）。在映射缩减的情况下，这还允许转换充当过滤器，如果不应该组合元素，则返回null（或者，在原始专门化的情况下，返回标识基础）。在search或reduce操作中使用复合转换和筛选之前，您可以通过自己在“空意味着现在没有”规则下组合它们来创建复合转换和筛选。
	接受和/或者返回Entry参数的方法维护键值关联。例如，当找到最大值的键时，它们可能很有用。请注意，可以使用新的AbstractMap.SimpleEntry(k,v)提供“plain” Entry参数。
	批量操作可能会突然完成，从而引发在应用提供的函数时遇到的异常。在处理此类异常时，请记住，其他同时执行的函数也可能引发异常，或者如果没有发生第一个异常，也会引发异常。
	与顺序形式相比，并行加速是常见的，但不能保证。如果并行计算的底层工作比计算本身更昂贵，那么在微型map映射上涉及简短函数的并行操作可能比顺序形式执行得慢。同样，如果所有处理器都忙于执行不相关的任务，则并行化可能不会导致太多实际的并行性。
	所有任务方法的所有参数都必须为非空（non-null）。
	该类是Java集合框架的成员。
	
	
	类定义	：public class ConcurrentHashMap<K,V> extends AbstractMap<K,V> implements ConcurrentMap<K,V>, Serializable
	内部类	：KeySetView<K,V>, AbstractMap.SimpleEntry<K,V>, AbstractMap.SimpleImmutableEntry<K,V>
	实现接口	：Map<K,V>, ConcurrentMap<K,V>, Serializable
------------------------------------------------------------------------------------------------------------------------------------------------------
Constructor Summary（构造器概要）：
	public ConcurrentHashMap()
		使用默认的初始表大小（16）创建新的空映射。
	public ConcurrentHashMap(int initialCapacity)
		创建一个新的空映射，初始表大小适应指定数量的元素，而无需动态调整大小。
		【Throws】：
			IllegalArgumentException 如果initialCapacity（初始容量）为负
	public ConcurrentHashMap(int initialCapacity, float loadFactor)
		创建一个新的空映射，其初始表大小基于给定的元素数量（initialCapacity）和初始表密度（负载因子loadFactor）。
		【Throws】：
			IllegalArgumentException 如果initialCapacity（初始容量）为负，或者负载因子（loadFactor）为非正。
	public ConcurrentHashMap(int initialCapacity,float loadFactor, int concurrencyLevel)
		创建一个新的空映射，初始表大小基于给定的元素数量（InitialCapacity）、表密度（负载因子LoadFactor）和并发更新线程数量（ConcurrencyLevel）。
		【Throws】：
			IllegalArgumentException 如果initialCapacity（初始容量）为负，或者负载因子（loadFactor）或并发级别（ConcurrencyLevel）为非正
	public ConcurrentHashMap(Map<? extends K, ? extends V> m)
		创建与给定映射具有相同映射的新映射。


Method Summary（方法概要）：
	newKeySet():static <K> KeySetView<K,Boolean> 
		K - 返回集合的元素类型
		创建一个由给定类型的ConcurrentHashMap支持的新集合，并将其设置为Boolean.TRUE。
	newKeySet(int initialCapacity):static <K> KeySetView<K,Boolean> 
		K - 返回集合的元素类型
		initialCapacity - 调整容量大小以适应元素数量规模。
		创建一个由给定类型的ConcurrentHashMap支持的新集合，并将其设置为Boolean.TRUE。
	clear():void 
		从该映射中删除所有映射。
	compute(K key,BiFunction<? super K, ? super V, ? extends V> remappingFunction):V 
		key - 与指定值关联的键
		remappingFunction - 计算值的函数（重新映射函数）
		尝试计算指定键及其当前映射值的映射（如果没有当前映射，则为null）。整个方法调用是以原子方式执行的。在计算过程中，其他线程在此映射上尝试的某些更新操作可能会被阻止，因此计算应简短，并且不得尝试更新此映射的任何其他映射。
		【Throws】：
			NullPointerException 如果指定的键或remappingFunction（重新映射函数）为null
			IllegalStateException 如果计算可检测地尝试对此映射进行递归更新，否则将永远无法完成
			RuntimeException 或者，如果remappingFunction这样做，则会出错，在这种情况下，映射是不变的。			
	computeIfAbsent(K key, Function<? super K, ? extends V> mappingFunction):V 
		key - 与指定值关联的键
		mappingFunction - 计算值的函数
		如果指定的键尚未与值关联，则尝试使用给定的映射函数计算其值，并将其输入此映射，除非为null。整个方法调用是以原子方式执行的，因此每个键最多应用一次函数。在计算过程中，其他线程在此映射上尝试的某些更新操作可能会被阻止，因此计算应简短，并且不得尝试更新此映射的任何其他映射。
		【Throws】：
			NullPointerException 如果指定的键或mappingFunction（映射函数）为null
			IllegalStateException 如果计算可检测地尝试对此映射进行递归更新，否则将永远无法完成
			RuntimeException 或者，如果remappingFunction这样做，则会出错，在这种情况下，映射是不变的。	
	computeIfPresent(K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction):V 
		key - 与指定值关联的键
		remappingFunction - 计算值的函数（重新映射函数）
		如果指定键的值存在，则尝试在给定键及其当前映射值的情况下计算新映射。整个方法调用是以原子方式执行的。在计算过程中，其他线程在此映射上尝试的某些更新操作可能会被阻止，因此计算应简短，并且不得尝试更新此映射的任何其他映射。
		【Throws】：
			NullPointerException 如果指定的键或remappingFunction（重新映射函数）为null
			IllegalStateException 如果计算可检测地尝试对此映射进行递归更新，否则将永远无法完成
			RuntimeException 或者，如果remappingFunction这样做，则会出错，在这种情况下，映射是不变的。	
	contains(Object value):boolean 
		如果某些键映射到此表中的指定值，则测试遗留方法。此方法在功能上与containsValue(Object)相同，并且仅用于确保与类Hashtable完全兼容，后者在引入Java集合框架之前支持该方法。
		如果某些键映射到此表中由equals方法确定的value参数，则为true；否则为false。
		【Throws】：
			NullPointerException 如果指定的value为null
	containsKey(Object key):boolean 
		测试指定的对象是否是此表中的键。
		如果且仅当指定的对象是此表中的键时为true，由equals方法确定；否则为false
		【Throws】：
			NullPointerException 如果指定的key为null
	containsValue(Object value):boolean 
		如果此映射将一个或多个键映射到指定值，则返回true。注意：此方法可能需要对映射进行完全遍历，并且比方法containsKey慢得多。
		【Throws】：
			NullPointerException 如果指定的value为null
	elements():Enumeration<V> 
		返回此表中值的枚举（Enumeration）。
	entrySet():Set<Map.Entry<K,V>> 
		返回Map中包含的映射的Set视图。集合由映射支持，因此对映射的更改反映在集合中，反之亦然。集合支持元素移除，它通过Iterator.remove, Set.remove, removeAll, retainAll, 和 clear操作从映射中移除相应的映射。
		视图的迭代器和拆分器弱一致。
	equals(Object o):boolean 
		将指定的对象与此map进行相等比较。如果给定对象是与此map具有相同映射的映射，则返回true。如果在执行此方法期间同时修改其中一个映射，则此操作可能返回误导性结果。
	forEach(BiConsumer<? super K, ? super V> action):void
		对此映射中的每个条目（映射条目）执行给定的操作，直到所有条目都已处理或该操作引发异常为止。除非实现类另有指定，否则将按照条目集合迭代（如果指定了迭代顺序）的顺序执行操作。该操作引发的异常将中继到调用方。
	forEach(long parallelismThreshold,BiConsumer<? super K,? super V> action):void 
		parallelismThreshold - 并行执行此操作所需的（估计的）元素数量（并行阈值）
		action - 所执行的操作（动作）	
		为每个（键、值）执行给定的操作。
	forEach(long parallelismThreshold,BiFunction<? super K, ? super V, ? extends U> transformer,Consumer<? super U> action):<U> void 
		parallelismThreshold - 并行执行此操作所需的（估计的）元素数量（并行阈值）
		transformer - 返回元素转换的函数，如果没有转换则返回空值（在这种情况下，action不应该被执行）
		action - 所执行的操作（动作）
		对每个（键、值）的每个非空（non-null）转换执行给定的操作。
	forEachEntry(long parallelismThreshold,Consumer<? super Map.Entry<K,V>> action):void 
		parallelismThreshold - 并行执行此操作所需的（估计的）元素数量（并行阈值）
		action - 所执行的操作（动作）	
		对每个条目执行给定的操作。
	forEachEntry(long parallelismThreshold,Function<Map.Entry<K,V>, ? extends U> transformer,Consumer<? super U> action):<U> void 
		parallelismThreshold - 并行执行此操作所需的（估计的）元素数量（并行阈值）
		transformer - 返回元素转换的函数，如果没有转换则返回空值（在这种情况下，action不应该被执行）
		action - 所执行的操作（动作）
		对每个条目的每个非空（non-null）转换执行给定的操作。
	forEachKey(long parallelismThreshold,Consumer<? super K> action):void 
		
	forEachKey(long parallelismThreshold,Function<? super K, ? extends U> transformer,Consumer<? super U> action):<U> void 
	forEachValue(long parallelismThreshold,Consumer<? super V> action):void 
	forEachValue(long parallelismThreshold,Function<? super V, ? extends U> transformer,Consumer<? super U> action):<U> void 
	get(Object key):V 
	getOrDefault(Object key, V defaultValue):V 
	hashCode():int 
	isEmpty():boolean 
	keys():Enumeration<K> 
	keySet():KeySetView<K,V> 
	keySet(V mappedValue):KeySetView<K,V> 
	mappingCount():long 
	merge(K key, V value, BiFunction<? super V, ? super V, ? extends V> remappingFunction):V 
	put(K key, V value):V 
	putAll(Map<? extends K, ? extends V> m):void 
	putIfAbsent(K key, V value):V 
	reduce(long parallelismThreshold,BiFunction<? super K, ? super V, ? extends U> transformer,BiFunction<? super U, ? super U, ? extends U> reducer):<U> U 
	reduceEntries(long parallelismThreshold,BiFunction<Map.Entry<K,V>, Map.Entry<K,V>, ? extends Map.Entry<K,V>> reducer):Map.Entry<K,V> 
	reduceEntries(long parallelismThreshold,Function<Map.Entry<K,V>, ? extends U> transformer,BiFunction<? super U, ? super U, ? extends U> reducer):<U> U 
	reduceEntriesToDouble(long parallelismThreshold,ToDoubleFunction<Map.Entry<K,V>> transformer,double basis,DoubleBinaryOperator reducer):double 
	reduceEntriesToInt(long parallelismThreshold,ToIntFunction<Map.Entry<K,V>> transformer,int basis,IntBinaryOperator reducer):int 
	reduceEntriesToLong(long parallelismThreshold,ToLongFunction<Map.Entry<K,V>> transformer,long basis,LongBinaryOperator reducer):long 
	reduceKeys(long parallelismThreshold,BiFunction<? super K, ? super K, ? extends K> reducer):K 
	reduceKeys(long parallelismThreshold,Function<? super K, ? extends U> transformer,BiFunction<? super U, ? super U, ? extends U> reducer):<U> U 
	reduceKeysToDouble(long parallelismThreshold,ToDoubleFunction<? super K> transformer,double basis,DoubleBinaryOperator reducer):double 
	reduceKeysToInt(long parallelismThreshold,ToIntFunction<? super K> transformer,int basis,IntBinaryOperator reducer):int 
	reduceKeysToLong(long parallelismThreshold,ToLongFunction<? super K> transformer,long basis,LongBinaryOperator reducer):long 
	reduceToDouble(long parallelismThreshold,ToDoubleBiFunction<? super K, ? super V> transformer,double basis,DoubleBinaryOperator reducer):double 
	reduceToInt(long parallelismThreshold,ToIntBiFunction<? super K, ? super V> transformer,int basis,IntBinaryOperator reducer):int 
	reduceToLong(long parallelismThreshold,ToLongBiFunction<? super K, ? super V> transformer,long basis,LongBinaryOperator reducer):long 
	reduceValues(long parallelismThreshold,BiFunction<? super V, ? super V, ? extends V> reducer):V 
	reduceValues(long parallelismThreshold,Function<? super V, ? extends U> transformer,BiFunction<? super U, ? super U, ? extends U> reducer):r<U> U 
	reduceValuesToDouble(long parallelismThreshold,ToDoubleFunction<? super V> transformer,double basis,DoubleBinaryOperator reducer):double 
	reduceValuesToInt(long parallelismThreshold,ToIntFunction<? super V> transformer,int basis,IntBinaryOperator reducer):int
	reduceValuesToLong(long parallelismThreshold,ToLongFunction<? super V> transformer,long basis,LongBinaryOperator reducer):long 
	remove(Object key):V 
	remove(Object key, Object value):boolean 
	replace(K key, V value):V 
	replace(K key, V oldValue, V newValue):boolean 
	replaceAll(BiFunction<? super K, ? super V, ? extends V> function):void 
	search(long parallelismThreshold,BiFunction<? super K, ? super V, ? extends U> searchFunction):<U> U 
	searchEntries(long parallelismThreshold,Function<Map.Entry<K,V>, ? extends U> searchFunction):<U> U 
	searchKeys(long parallelismThreshold,Function<? super K, ? extends U> searchFunction):<U> U 
	searchValues(long parallelismThreshold,Function<? super V, ? extends U> searchFunction):<U> U 
	size():int 
	toString():String 
	values():Collection<V> 

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
附录：
	1、注：文档中的△符号表示覆盖重写方法。	
	2、注：文档中的★符号表示抽象方法或者直接抛出UnsupportedOperationException异常的方法，总之没有实现具体功能代码的方法。
	3、loadFactor：负载因子（或称为负载系数），它等于“size/capacity”（即大小与容量的比率）。负载因子为0，表示空的hash表，0.5表示半满的散列表，依此类推。轻负载的散列表具有冲突少、适宜插入与查询的特点（但是使用Iterator迭代元素时比较慢）
	4、initialCapacity：初始容量。创建hash表时桶的数量，并发操作时ConcurrentHashMap是一次锁住一个桶。ConcurrentHashMap默认将hash表分为16个桶，诸如get、put、remove等常用操作只锁住当前需要用到的桶。这样，原来只能一个线程进入，现在却能同时有16个写线程执行，并发性能的提升是显而易见的。
	5、java并发一致性：
		对于一致性，可以分为从客户端和服务端两个不同的视角。从客户端来看，一致性主要指的是多并发访问时更新过的数据如何获取的问题。从服务端来看，则是更新如何复制分布到整个系统，以保证数据最终一致。一致性是因为有并发读写才有的问题，因此在理解一致性的问题时，一定要注意结合考虑并发读写的场景。
		从客户端角度，多进程并发访问时，更新过的数据在不同进程如何获取的不同策略，决定了不同的一致性。对于关系型数据库，要求更新过的数据能被后续的访问都能看到，这是“强一致性”。如果能容忍后续的部分或者全部访问不到，则是“弱一致性”。如果经过一段时间后要求能访问到更新后的数据，则是“最终一致性”。
		

