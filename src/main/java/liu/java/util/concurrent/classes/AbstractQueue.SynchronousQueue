-----------------------------------------SynchronousQueue<E>-------------------------------------------------------------------------------------------------------------
SynchronousQueue<E>：同步队列。【Since:1.5】
	<E> 此集合中容纳的元素的类型
	一种阻塞队列，其中每个插入操作必须等待另一个线程执行相应的删除操作，反之亦然。同步队列没有任何内部容量，甚至没有一个容量。不能在同步队列中使用peek，因为只有在尝试删除元素时才存在元素；除非另一个线程尝试删除元素，否则无法插入元素（使用任何方法）；不能重复，因为没有要重复的内容。队列头是第一个排队插入线程试图添加到队列中的元素；如果没有这样的排队线程，则没有可供删除的元素，poll()将返回null。对于其他Collection方法（例如contains），SynchronousQueue充当空集合。此队列不允许null元素。
	同步队列类似于CSP和Ada中使用的集合通道。它们非常适合于切换设计，在这种设计中，在一个线程中运行的对象必须与在另一个线程中运行的对象同步，以便传递一些信息、事件或任务。
	此类支持用于排序等待的生产者和消费者线程的可选公平性策略。默认情况下，不保证此顺序。但是，使用设置为true的公平性构造的队列将按FIFO顺序授予线程访问权限。
	这个类及其迭代器实现Collection和Iterator接口的所有可选方法。
	该类是Java集合框架的成员。
	
	
	类定义	：public class SynchronousQueue<E> extends AbstractQueue<E> implements BlockingQueue<E>, java.io.Serializable
	实现接口	：Iterable<E>,Collection<E>,Queue<E>,BlockingQueue<E>,java.io.Serializable
------------------------------------------------------------------------------------------------------------------------------------------------------
Constructor Summary（构造器概要）：
	public SynchronousQueue()
		使用非公平（nonfair）访问策略创建同步队列SynchronousQueue。
	public SynchronousQueue(boolean fair)
		fair - 如果为true，则等待线程按FIFO顺序争用访问权；否则未指定顺序。	
		使用指定的公平性策略设置创建同步队列SynchronousQueue。	
		
Method Summary（方法概要）：
	clear():void 
		△ 什么也不做。SynchronousQueue没有内部容量。
	contains(Object o):boolean 
		△ 总是返回false。SynchronousQueue没有内部容量。
	containsAll(Collection<?> c):boolean 
		△ 除非给定集合为null，否则返回false。SynchronousQueue没有内部容量。
	drainTo(Collection<? super E> c):int 
		△  删除此队列中的所有可用元素并将它们添加到给定集合中。此操作可能比重复轮询（polling）此队列更有效。尝试将元素添加到集合c时遇到错误，在引发关联的异常时，可能会导致元素既不在队列中，也不在指定集合中。尝试将队列排入（drain）自身会导致IllegalArgumentException异常。此外，如果在操作过程中修改了指定的集合，则此操作的行为不确定。
		【Throws】：
			UnsupportedOperationException 如果指定的集合不支持添加元素
			ClassCastException  如果指定元素的类阻止将其添加到此队列中
			NullPointerException 如果指定的集合为null。
			IllegalArgumentException 如果指定的集合是此队列本身，或此队列元素的某些属性阻止将其添加到指定的集合中。
	drainTo(Collection<? super E> c, int maxElements):int 
		△ 最多可以从此队列中删除给定数量的可用元素，并将它们添加到给定集合中。尝试将元素添加到集合c时遇到错误，在引发关联的异常时，可能会导致元素既不在队列中，也不在指定集合中。尝试将队列排入（drain）自身会导致IllegalArgumentException异常。此外，如果在操作过程中修改了指定的集合，则此操作的行为不确定。
		【Throws】：
			UnsupportedOperationException 如果指定的集合不支持添加元素
			ClassCastException  如果指定元素的类阻止将其添加到此队列中
			NullPointerException 如果指定的集合为null。
			IllegalArgumentException 如果指定的集合是此队列本身，或此队列元素的某些属性阻止将其添加到指定的集合中。
	isEmpty():boolean 
		△ 总是返回true。SynchronousQueue没有内部容量。
	iterator():Iterator<E> 
		△ 返回一个空迭代器，其中hasNext始终返回false。
	offer(E e):boolean 
		△ 如果另一个线程正在等待获取指定的元素，则将其插入此队列。
		如果元素已添加到此队列，则为true，否则为false
		【Throws】：
			NullPointerException 如果指定的元素null
	offer(E e, long timeout, TimeUnit unit):boolean 
		△ 将指定的元素插入此队列，必要时等待到另一个线程获取该元素的指定等待时间。
		如果成功，则返回true；如果在消费者出现之前经过指定的等待时间，则返回false。
		【Throws】：
			InterruptedException 如果在等待时中断
			NullPointerException 如果指定的元素null
	peek():E 
		△ 总是返回null。除非主动等待，否则SynchronousQueue不会返回元素。
	poll(long timeout, TimeUnit unit):E 
		△ 如果另一个线程目前正在使元素可用（插入元素），则检索并删除此队列的头。
	poll(long timeout, TimeUnit unit):E 
		△ 检索并删除此队列的头，在必要时等待到指定的等待时间，以便另一个线程插入它。 
		【Throws】：
			InterruptedException 如果在等待时中断
	put(E e):void 
		△ 将指定的元素添加到此队列，如有必要，等待另一个线程获取它。
		【Throws】：
			InterruptedException 如果在等待时中断
			NullPointerException 如果指定的元素null
	remainingCapacity():int 
		△ 总是返回零。SynchronousQueue没有内部容量。
	remove(Object o):boolean 
		△ 总是返回false。SynchronousQueue没有内部容量。
	removeAll(Collection<?> c):boolean 
		△ 总是返回false。SynchronousQueue没有内部容量。
	retainAll(Collection<?> c):boolean 
		△ 总是返回false。SynchronousQueue没有内部容量。
	size():int 
		△ 总是返回零。SynchronousQueue没有内部容量。
	spliterator():Spliterator<E> 
		△ 返回一个空的Spliterator，其中对Spliterator.trySplit()的调用始终返回null。
	take():E 
		△ 检索并删除此队列的头，如有必要，等待另一个线程插入它。
		【Throws】：
			InterruptedException 如果在等待时中断
	toArray():Object[] 
		△ 返回零长度数组。
	toArray(T[] a):<T> T[] 
		△ 将指定数组的zeroeth元素设置为空（如果数组的长度非零），并返回该元素。
		【Throws】：
			NullPointerException 如果指定的数组为null
	
------------------------------------------------------------------------------------------------------------------------------------------------------
附录：
	1、注：文档中的△符号表示覆盖重写方法，✘符号表示已被淘汰掉的方法。	
	2、注：文档中的★符号表示抽象方法或者直接抛出UnsupportedOperationException异常的方法，总之没有实现具体功能代码的方法。
	3、loadFactor：负载因子（或称为负载系数），它等于“size/capacity”（即大小与容量的比率）。负载因子为0，表示空的hash表，0.5表示半满的散列表，依此类推。轻负载的散列表具有冲突少、适宜插入与查询的特点（但是使用Iterator迭代元素时比较慢）
	4、initialCapacity：初始容量。创建hash表时桶的数量，并发操作时ConcurrentHashMap是一次锁住一个桶。ConcurrentHashMap默认将hash表分为16个桶，诸如get、put、remove等常用操作只锁住当前需要用到的桶。这样，原来只能一个线程进入，现在却能同时有16个写线程执行，并发性能的提升是显而易见的。
	5、java并发一致性：
		对于一致性，可以分为从客户端和服务端两个不同的视角。从客户端来看，一致性主要指的是多并发访问时更新过的数据如何获取的问题。从服务端来看，则是更新如何复制分布到整个系统，以保证数据最终一致。一致性是因为有并发读写才有的问题，因此在理解一致性的问题时，一定要注意结合考虑并发读写的场景。
		从客户端角度，多进程并发访问时，更新过的数据在不同进程如何获取的不同策略，决定了不同的一致性。对于关系型数据库，要求更新过的数据能被后续的访问都能看到，这是“强一致性”。如果能容忍后续的部分或者全部访问不到，则是“弱一致性”。如果经过一段时间后要求能访问到更新后的数据，则是“最终一致性”。
	6、SkipList：跳表。	使用“空间换时间”的算法，令链表的每个结点不仅记录next结点位置，还可以按照level层级分别记录后继第level个结点。在查找时，首先按照层级查找，比如：当前跳表最高层级为3，即每个结点中不仅记录了next结点（层级1），还记录了next的next（层级2）、next的next的next（层级3）结点。现在查找一个结点，则从头结点开始先按高层级开始查：head->head的next的next的next->。。。直到找到结点或者当前结点q的值大于所查结点，则此时当前查找层级的q的前一节点p开始，在p~q之间进行下一层级（隔1个结点）的查找......直到最终迫近、找到结点。此法使用的就是“先大步查找确定范围，再逐渐缩小迫近”的思想进行的查找。	
	7、constant-time（常量时间）：意思就是无论n是什么值运算所花时间都一样。
	8、Linear-time（线性时间）：则是说多大n就花多少时间。
	9、Multiple-time（多项式时间）：则意味着随着n增大，n每增加1所花的时间增长越来越多。对于n^2-3这样一个多项式时间来说，n=2的时候可能只要花1的时间，甚至低于线性时间，但n=4的时候可能就要花13的时间了，可以想象再大一些这个数值会变得巨大。但是它又不及指数时间增长快(m^n)，且m^n不能写成多项式形式，所以它又和多项式时间有区别。	
	10、	Copy-On-Write：简称COW，是一种用于程序设计中的优化策略。其基本思路是，从一开始大家都在共享同一个内容，当某个人想要修改这个内容的时候，才会真正把内容Copy出去形成一个新的内容然后再改，这是一种延时懒惰策略。从JDK1.5开始Java并发包里提供了两个使用CopyOnWrite机制实现的并发容器,它们是CopyOnWriteArrayList和CopyOnWriteArraySet。CopyOnWrite容器非常有用，可以在非常多的并发场景中使用到。
		CopyOnWrite容器即写时复制的容器。通俗的理解是当我们往一个容器添加元素的时候，不直接往当前容器添加，而是先将当前容器进行Copy，复制出一个新的容器，然后新的容器里添加元素，添加完元素之后，再将原容器的引用指向新的容器。这样做的好处是我们可以对CopyOnWrite容器进行并发的读，而不需要加锁，因为当前容器不会添加任何元素。所以CopyOnWrite容器也是一种读写分离的思想，读和写不同的容器。
	11、线程“公平”与“饥饿”：如果一个线程因为CPU时间全部被其他线程抢走而得不到CPU运行时间，这种状态被称之为“饥饿”。而该线程被“饥饿致死”正是因为它得不到CPU运行时间的机会。解决饥饿的方案被称之为“公平性” – 即所有线程均能公平地获得运行机会。		

		



































