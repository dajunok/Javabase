-----------------------------------------LinkedBlockingDeque<E>-------------------------------------------------------------------------------------------------------------
LinkedBlockingDeque<E>：链表阻塞双端队列。【Since:1.6】
	基于链接节点的可选-有界阻塞双端队列（deque）。
	作为构造函数参数的可选容量界限用作防止过度扩展的方式。如果未指定，容量等于Integer.MAX_VALUE。链接节点在每次插入时都会动态创建，除非这样会使双端队列（deque）高于容量。
	大多数操作在恒定时间内运行（忽略阻塞时间）。除了remove, removeFirstOccurrence, removeLastOccurrence, contains, iterator.remove()和大容量操作，所有这些操作都是线性时间（linear-Time）内运行。
	这个类及其迭代器实现Collection 和Iterator接口的所有可选方法。
	该类是Java集合框架的成员。
	
	
	类定义	：public class LinkedBlockingDeque<E> extends AbstractQueue<E> implements BlockingDeque<E>, java.io.Serializable
	实现接口	：Iterable<E>,Collection<E>,Queue<E>,Deque<E>,BlockingDeque<E>,java.io.Serializable
------------------------------------------------------------------------------------------------------------------------------------------------------
Constructor Summary（构造器概要）：
	public LinkedBlockingDeque()
		创建一个容量为Integer.MAX_VALUE的LinkedBlockingDeque。
	public LinkedBlockingDeque(int capacity)
		创建具有给定（固定）容量capacity的LinkedBlockingDeque。
		【Throws】：
			IllegalArgumentException 如果capacity小于1
	public LinkedBlockingDeque(Collection<? extends E> c)
		创建一个容量为Integer.MAX_VALUE的LinkedBlockingDeque，最初包含给定集合的元素，按集合迭代器的遍历顺序添加。
		【Throws】：
			NullPointerException 如果指定的集合或其任何元素为null
			
			
Method Summary（方法概要）：
	add(E e):boolean 
		△ 在这个Deque的末尾插入指定的元素，除非它会违反容量限制。当使用容量受限的Deque时，通常最好使用方法offer。
		此方法等价于addLast(E)。
		【Throws】：
			IllegalStateException 如果deque已满
			NullPointerException 如果指定的element为null
	addFirst(E e):void 
		△ 如果可以在不违反容量限制的情况下立即插入指定元素，则在该Deque的前面插入该元素；如果当前没有可用空间，则抛出IllegalStateException。当使用容量受限的deque时，通常最好使用offerFirst(E)方法。
		【Throws】：
			IllegalStateException 如果由于容量限制，此时无法添加元素
			NullPointerException 如果指定的元素为null
	addLast(E e):void 
		△ 如果可以在不违反容量限制的情况下立即插入指定元素，则在该Deque的结尾插入该元素；如果当前没有可用空间，则引发IllegalStateException。当使用容量受限的deque时，通常最好使用offerLast(E)方法。
		【Throws】：
			IllegalStateException 如果由于容量限制，此时无法添加元素
			NullPointerException 如果指定的元素为null
	clear():void 
		△ 原子性地从这个deque中删除所有元素。此调用返回后，deque将为空。
	contains(Object o):boolean
		△ 如果此队列包含指定的元素，则返回true。更正式地说，如果并且仅当此队列包含至少一个元素e（o.equals(e)），则返回true。 
	descendingIterator():Iterator<E> 
		△ 以相反的顺序返回此deque中元素的迭代器。元素将按从最后（尾）到第一（头）的顺序返回。
		返回的迭代器是弱一致性的。
	drainTo(Collection<? super E> c):int 
		△  删除此队列中的所有可用元素并将它们添加到给定集合中。此操作可能比重复轮询（polling）此队列更有效。尝试将元素添加到集合c时遇到错误，在引发关联的异常时，可能会导致元素既不在队列中，也不在指定集合中。尝试将队列排入（drain）自身会导致IllegalArgumentException异常。此外，如果在操作过程中修改了指定的集合，则此操作的行为不确定。
		【Throws】：
			UnsupportedOperationException 如果指定的集合不支持添加元素
			ClassCastException  如果指定元素的类阻止将其添加到此队列中
			NullPointerException 如果指定的集合为null。
			IllegalArgumentException 如果指定的集合是此队列本身，或此队列元素的某些属性阻止将其添加到指定的集合中。
	drainTo(Collection<? super E> c, int maxElements):int 
		△ 最多可以从此队列中删除给定数量maxElements的可用元素，并将它们添加到给定集合中。尝试将元素添加到集合c时遇到错误，在引发关联的异常时，可能会导致元素既不在队列中，也不在指定集合中。尝试将队列排入（drain）自身会导致IllegalArgumentException异常。此外，如果在操作过程中修改了指定的集合，则此操作的行为不确定。
		【Throws】：
			UnsupportedOperationException 如果指定的集合不支持添加元素
			ClassCastException  如果指定元素的类阻止将其添加到此队列中
			NullPointerException 如果指定的集合为null。
			IllegalArgumentException 如果指定的集合是此队列本身，或此队列元素的某些属性阻止将其添加到指定的集合中。
	element():E 
		△ 检索但不删除由此deque表示的队列头。此方法与peek的不同之处在于，如果此deque为空，它将抛出异常。
		此方法等效于getFirst。
		【Throws】：
			NoSuchElementException 如果deque是空的。
	getFirst():E 
		△ 检索但不删除由此deque表示的队列头。此方法与peekFirst的不同之处在于，如果此deque为空，它将抛出异常。
		【Throws】：
			NoSuchElementException 如果deque是空的。
	getLast():E 
		△ 检索但不删除此deque的最后一个元素。此方法与peekLast的不同之处在于，如果此deque为空，它将引发异常。
		【Throws】：
			NoSuchElementException 如果deque是空的。
	iterator():Iterator<E> 
		△ 以正确的顺序返回此deque中元素的迭代器。元素将按从第一个（头）到最后一个（尾）的顺序返回。
		返回的迭代器是弱一致性的。
	offer(E e):boolean 
		  △ 如果可以在不违反容量限制的情况下立即执行此操作，则将指定元素插入此deque表示的队列（换句话说，在该deque的尾部），成功时返回true，如果当前没有可用空间，则返回false。当使用容量受限deque时，此方法通常优于BlockingDeque.add(E)方法，后者只能通过引发异常而无法插入元素。
		此方法等效于 offerLast。
		【Throws】：
			NullPointerException 如果指定的元素为null。
	offer(E e, long timeout, TimeUnit unit):boolean 
		timeout - 放弃前等待多长时间（即等待时长），单位为指定的unit参数	
		unit - 	timeout参数的时间单位
		△ 将指定的元素插入此队列，如有必要，等待指定的等待时间以使空间可用。
		【Throws】：
			InterruptedException 如果在等待时中断
			NullPointerException 如果指定的元素为null
	offerFirst(E e):boolean 
		△ 在这个deque（双端队列）的前面插入指定的元素，除非它违反了容量限制。如果将元素添加到此deque，则为true，否则为false。当使用容量受限的deque时，此方法通常优于addFirst(E)方法，后者只能通过引发异常而无法插入元素。
		【Throws】：
			NullPointerException 如果指定的元素为null
	offerFirst(E e, long timeout, TimeUnit unit):boolean 
		△ 在该deque的前面插入指定的元素，如果需要空间可用，则等待指定的等待时间。
		【Throws】：
			InterruptedException 如果等待中断
			NullPointerException 如果指定的元素为null
	offerLast(E e):boolean 
		△ 在这个deque的末尾插入指定的元素，除非它会违反容量限制。如果将元素添加到此deque，则为true，否则为false。当使用容量受限的deque时，此方法通常优于addlast（e）方法，后者只能通过引发异常来插入元素。
		【Throws】：
			NullPointerException 如果指定的元素为null
	offerLast(E e, long timeout, TimeUnit unit):boolean
		△  在该deque的末尾插入指定的元素，如果需要空间可用，则等待指定的等待时间。
		【Throws】：
			InterruptedException 如果等待中断
			NullPointerException 如果指定的元素为null
	peek():E 
		△ 检索但不删除由此deque表示的队列头（换句话说，此deque的第一个元素），或者如果此deque为空，则返回null。
		这种方法相当于peekFirst。
	peekFirst():E 
		△ 检索但不移除此deque的第一个元素，或者如果此deque为空则返回null。
	peekLast():E 
		检索但不移除此deque的最后一个元素，或者如果此deque为空则返回null。
	poll():E 
		△ 检索并删除由该deque表示的队列的头（换句话说，是该deque的第一个元素），或者如果该deque为空，则返回null。
		此方法等效于Deque.pollFirst()。
	poll(long timeout, TimeUnit unit):E 
		△ 检索并删除由此deque表示的队列的头（换句话说，是此deque的第一个元素），如果需要，等待指定的等待时间以使元素可用。
		这个方法等价于pollFirst。
		【Throws】：
			InterruptedException 如果等待中断
	pollFirst():E 
		△ 检索并删除此deque的第一个元素，如果此deque为空，则返回null。
	pollFirst(long timeout, TimeUnit unit):E 
		△ 检索并删除此deque的第一个元素，如果需要，则等待指定的等待时间以使元素可用。
		【Throws】：
			InterruptedException 如果等待中断
	pollLast():E 
		△ 检索并删除此deque的最后一个元素，如果此deque为空，则返回null。
	pollLast(long timeout, TimeUnit unit):E 
		△ 检索并删除此deque的最后一个元素，如果需要，可等待指定的等待时间以使元素可用。
		【Throws】：
			InterruptedException 如果等待中断
	pop():E 
		△ 从这个deque表示的堆栈中弹出一个元素。换句话说，删除并返回此deque的第一个元素。
		此方法等效于Deque.removeFirst()。
		【Throws】：
			NoSuchElementException 如果deque是空的。
	push(E e):void 
		△ 如果可以在不违反容量限制的情况下立即将元素推送到该deque表示的栈上（换句话说，在该deque的头部），如果当前没有可用空间，则引发IllegalStateException异常。
		此方法等效于addFirst(E)
		【Throws】：
			● IllegalStateException 如果由于容量限制，此时无法添加元素
			● NullPointerException 如果指定的元素为null
	put(E e):void 
		△ 将指定的元素插入这个deque表示的队列（换句话说，在这个deque的尾部），如果需要，等待空间变为可用。
		这个方法相当于putLast。
		【Throws】：
			InterruptedException 如果等待中断
			NullPointerException 如果指定的元素为null
	putFirst(E e):void 
		△ 在该deque的前面插入指定的元素，如果需要，等待空间可用。
		【Throws】：
			InterruptedException 如果等待中断
			NullPointerException 如果指定的元素为null
	putLast(E e):void 
		△ 在该deque的末尾插入指定的元素，如有必要，等待空间可用。
		【Throws】：
			InterruptedException 如果等待中断
			NullPointerException 如果指定的元素为null
	remainingCapacity():int 
		△ 返回此deque在不阻塞的情况下（在没有内存或资源约束的情况下）可以接受的额外元素的数量。这总是等于这个deque的初始容量减去这个deque的当前大小size。
		请注意，您不能总是通过检查remainingCapacity来判断插入元素的尝试是否会成功，因为可能是另一个线程将要插入或删除元素。
	remove():E 
		△ 检索并删除由此deque表示的队列头。此方法与Poll的不同之处在于，如果此deque为空，它将引发异常。
		这个方法等价于removeFirst。
	remove(Object o):boolean 
		△ 从该deque中删除指定元素的第一个匹配项。如果deque不包含元素，则它是不变的。更正式地说，删除第一个元素e（如果存在这样的元素）（o.equals(e)）。如果此deque包含指定元素（或等效地，如果此deque由于调用而更改），则返回true。
		此方法等效于removeFirstOccurrence。
	removeFirst():E 
		检索并删除此deque的第一个元素。此方法与pollFirst的不同之处在于，如果此deque为空，它将引发异常。
		【Throws】：
			NoSuchElementException 如果deque是空的。
	removeFirstOccurrence(Object o):boolean 
		△ 从该deque中删除指定元素的第一个匹配项。如果deque不包含元素，则它是不变的。更正式地说，删除第一个元素e像这样(o==null ? e==null : o.equals(e))（如果存在这样的元素）。如果此deque包含指定元素（或等效地，如果此deque由于调用而更改），则返回true。
	removeLast():E 
		△ 检索并删除此deque的最后一个元素。此方法与PollLast的不同之处在于，如果此deque为空，它将引发异常。
		【Throws】：
			NoSuchElementException 如果deque是空的。
	removeLastOccurrence(Object o):boolean 
		△ 从该deque中删除指定元素的最后一次出现。如果deque不包含元素，则它是不变的。更正式地说，删除最后一个元素e像这样(o==null ? e==null : o.equals(e))（如果存在这样的元素）。如果此deque包含指定元素（或等效地，如果此deque由于调用而更改），则返回true。
	size():int 
		△ 返回此deque中的元素数。
	spliterator():Spliterator<E> 
		△ 返回此deque中元素的拆分器。
		返回的拆分器是弱一致性。
		spliterator报告 Spliterator.CONCURRENT, Spliterator.ORDERED, 和 Spliterator.NONNULL。
	take():E 
		△ 检索并删除由这个deque表示的队列的头部（换句话说，就是这个deque的第一个元素），必要时等待直到一个元素可用。
		这个方法等价于takeFirst。
		【Throws】：
			InterruptedException 如果等待中断
	takeFirst():E 
		△ 检索并删除此deque的第一个元素，必要时等待元素变为可用。
		【Throws】：
			InterruptedException 如果等待中断
	takeLast():E 
		△ 检索并删除此deque的最后一个元素，如有必要，等待元素变为可用。
		【Throws】：
			InterruptedException 如果等待中断
	toArray():Object[] 
		△ 返回一个数组，该数组包含此deque中的所有元素，顺序正确（从第一个元素到最后一个元素）。
		返回的数组将是“安全的”，因为此deque不维护对它的引用。（换句话说，此方法必须分配一个新数组）。因此，调用者可以自由修改返回的数组。
		此方法充当基于数组和基于集合的API之间的桥梁。
	toArray(T[] a):<T> T[] 
		△ 以正确的顺序（从第一个元素到最后一个元素）返回包含此deque中所有元素的数组；返回数组的运行时类型是指定数组的运行时类型。如果deque符合指定的数组，则返回该数组。否则，将为新数组分配指定数组的运行时类型和此deque的大小。
		如果此deque适合具有备用空间的指定数组（即数组中的元素多于此deque），则在deque结束后立即将数组中的元素设置为null。
		与toArray()方法一样，此方法充当基于数组和基于集合的API之间的桥梁。此外，此方法允许对输出数组的运行时类型进行精确控制，并且可以在某些情况下用于节省分配成本。
		假设x是已知仅包含字符串的deque。以下代码可用于将deque转储到新分配的字符串数组中：
			String[] y = x.toArray(new String[0]);
		请注意，toArray(new Object[0])在功能上与toArray()相同。
	toString():String 
		△ 返回此集合的字符串表示形式。字符串表示形式由集合元素的列表组成，这些元素按迭代器返回的顺序排列，用方括号（"[]"）括起来。相邻元素由字符“,”（逗号和空格）分隔。元素按String.valueOf(Object)转换为字符串。

------------------------------------------------------------------------------------------------------------------------------------------------------
附录：
	1、注：文档中的△符号表示覆盖重写方法，✘符号表示已被淘汰掉的方法。	
	2、注：文档中的★符号表示抽象方法或者直接抛出UnsupportedOperationException异常的方法，总之没有实现具体功能代码的方法。
	3、loadFactor：负载因子（或称为负载系数），它等于“size/capacity”（即大小与容量的比率）。负载因子为0，表示空的hash表，0.5表示半满的散列表，依此类推。轻负载的散列表具有冲突少、适宜插入与查询的特点（但是使用Iterator迭代元素时比较慢）
	4、initialCapacity：初始容量。创建hash表时桶的数量，并发操作时ConcurrentHashMap是一次锁住一个桶。ConcurrentHashMap默认将hash表分为16个桶，诸如get、put、remove等常用操作只锁住当前需要用到的桶。这样，原来只能一个线程进入，现在却能同时有16个写线程执行，并发性能的提升是显而易见的。
	5、java并发一致性：
		对于一致性，可以分为从客户端和服务端两个不同的视角。从客户端来看，一致性主要指的是多并发访问时更新过的数据如何获取的问题。从服务端来看，则是更新如何复制分布到整个系统，以保证数据最终一致。一致性是因为有并发读写才有的问题，因此在理解一致性的问题时，一定要注意结合考虑并发读写的场景。
		从客户端角度，多进程并发访问时，更新过的数据在不同进程如何获取的不同策略，决定了不同的一致性。对于关系型数据库，要求更新过的数据能被后续的访问都能看到，这是“强一致性”。如果能容忍后续的部分或者全部访问不到，则是“弱一致性”。如果经过一段时间后要求能访问到更新后的数据，则是“最终一致性”。
	6、SkipList：跳表。	使用“空间换时间”的算法，令链表的每个结点不仅记录next结点位置，还可以按照level层级分别记录后继第level个结点。在查找时，首先按照层级查找，比如：当前跳表最高层级为3，即每个结点中不仅记录了next结点（层级1），还记录了next的next（层级2）、next的next的next（层级3）结点。现在查找一个结点，则从头结点开始先按高层级开始查：head->head的next的next的next->。。。直到找到结点或者当前结点q的值大于所查结点，则此时当前查找层级的q的前一节点p开始，在p~q之间进行下一层级（隔1个结点）的查找......直到最终迫近、找到结点。此法使用的就是“先大步查找确定范围，再逐渐缩小迫近”的思想进行的查找。	
	7、constant-time（常量时间）：意思就是无论n是什么值运算所花时间都一样。
	8、Linear-time（线性时间）：则是说多大n就花多少时间。
	9、Multiple-time（多项式时间）：则意味着随着n增大，n每增加1所花的时间增长越来越多。对于n^2-3这样一个多项式时间来说，n=2的时候可能只要花1的时间，甚至低于线性时间，但n=4的时候可能就要花13的时间了，可以想象再大一些这个数值会变得巨大。但是它又不及指数时间增长快(m^n)，且m^n不能写成多项式形式，所以它又和多项式时间有区别。	
	10、	Copy-On-Write：简称COW，是一种用于程序设计中的优化策略。其基本思路是，从一开始大家都在共享同一个内容，当某个人想要修改这个内容的时候，才会真正把内容Copy出去形成一个新的内容然后再改，这是一种延时懒惰策略。从JDK1.5开始Java并发包里提供了两个使用CopyOnWrite机制实现的并发容器,它们是CopyOnWriteArrayList和CopyOnWriteArraySet。CopyOnWrite容器非常有用，可以在非常多的并发场景中使用到。
		CopyOnWrite容器即写时复制的容器。通俗的理解是当我们往一个容器添加元素的时候，不直接往当前容器添加，而是先将当前容器进行Copy，复制出一个新的容器，然后新的容器里添加元素，添加完元素之后，再将原容器的引用指向新的容器。这样做的好处是我们可以对CopyOnWrite容器进行并发的读，而不需要加锁，因为当前容器不会添加任何元素。所以CopyOnWrite容器也是一种读写分离的思想，读和写不同的容器。
		



































