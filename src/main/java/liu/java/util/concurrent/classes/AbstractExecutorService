-------------------------------------AbstractExecutorService-----------------------------------------------------------------------------------------------------------------------------------
AbstractExecutorService：抽象执行器服务。【since 1.5】
	提供ExecutorService接口执行（execute）方法的默认实现。这个类使用newTaskFor返回的RunnableFuture实现submit、invokeAny和invokeAll方法，newTaskFor默认为这个包中提供的FutureTask类。例如，submit(Runnable)的实现创建一个执行并返回的关联RunnableFuture。子类可以重写newTaskFor方法以返回FutureTask以外的RunnableFuture实现。
	扩展示例。下面是自定义ThreadPoolExecutor以使用CustomTask类而不是默认FutureTask的类的样本：
		 public class CustomThreadPoolExecutor extends ThreadPoolExecutor {
		   static class CustomTask<V> implements RunnableFuture<V> {...}		
		   protected <V> RunnableFuture<V> newTaskFor(Callable<V> c) {
		       return new CustomTask<V>(c);
		   }
		   protected <V> RunnableFuture<V> newTaskFor(Runnable r, V v) {
		       return new CustomTask<V>(r, v);
		   }
		   // ... add constructors, etc.
		 }
	
	
	类定义	：public abstract class AbstractExecutorService implements ExecutorService
	实现接口	：Executor,ExecutorService
	直接子类	：ForkJoinPool, ThreadPoolExecutor
------------------------------------------------------------------------------------------------------------------------------------------------------
Method Summary（方法概要）：
	invokeAll(Collection<? extends Callable<T>> tasks):<T> List<Future<T>> 
		<T> 任务返回值的类型
		△ 执行给定的任务，当所有任务完成时返回一个包含状态和结果的Future列表。对于返回列表的每个元素，Future.isDone()为true。请注意，已完成的任务可以正常终止，也可以通过引发异常终止。如果在执行此操作时修改了给定集合，则此方法的结果不确定。
		【Throws】：
			InterruptedException 如果在等待时中断，则取消未完成的任务
			NullPointerException 如果任务或其任何元素为null
			RejectedExecutionException 如果任何任务无法调度执行
	invokeAll(Collection<? extends Callable<T>> tasks,long timeout, TimeUnit unit):<T> List<Future<T>> 
		<T> 任务返回值的类型
		△ 执行给定的任务，在所有任务完成或超时（timeout）到期时返回保持其状态和结果的Future列表，以先发生者为准。对于返回的列表中的每个元素，Future.isDone()都为true。返回后，未完成的任务将被取消。请注意，已完成的任务可以正常终止，也可以通过引发异常终止。如果在执行此操作时修改了给定集合，则此方法的结果不确定。
		【Throws】：
			InterruptedException 如果在等待时中断，则取消未完成的任务
			NullPointerException 如果任务或其任何元素为null
			RejectedExecutionException 如果任何任务无法调度执行
	invokeAny(Collection<? extends Callable<T>> tasks):<T> T 
		<T> 任务返回值的类型
		△ 执行给定的任务，返回已成功完成任务的结果（即，不引发异常），如果有的话。正常或异常返回后，未完成的任务将被取消。如果在执行此操作时修改了给定集合，则此方法的结果不确定。
		【Throws】：
			InterruptedException 如果在等待时中断，则取消未完成的任务
			NullPointerException 如果要执行的任务或任何元素任务为null
			IllegalArgumentException 如果任务为空
			ExecutionException 如果没有任务成功完成
			RejectedExecutionException 如果任何任务无法调度执行
	invokeAny(Collection<? extends Callable<T>> tasks,long timeout, TimeUnit unit):<T> T 
		<T> 任务返回值的类型
		unit - timeout的时间单位
		△ 执行给定的任务，返回已成功完成的任务（即，不引发异常）的结果（如果在给定的超时（timeout）结束之前有任何操作）。正常或异常返回后，未完成的任务将被取消。如果在执行此操作时修改了给定集合，则此方法的结果不确定。
		【Throws】：
			InterruptedException 如果在等待时中断
			NullPointerException 如果要执行的任务、unit或任何元素任务为null
			TimeoutException 如果在任何任务成功完成之前给定的超时时间已过
			ExecutionException 如果没有任务成功完成
			RejectedExecutionException 如果任何任务无法调度执行
	newTaskFor(Runnable runnable, T value):protected <T> RunnableFuture<T> 
		runnable - 被包装的可运行任务
		value - 返回的Future的默认值
		为给定的可运行值和默认值返回RunnableFuture。
	newTaskFor(Callable<T> callable):protected <T> RunnableFuture<T> 
		T - callable的调用结果类型
		返回给定可调用任务（callable）的RunnableFuture。
	submit(Runnable task):Future<?> 
		△ 提交返回值的任务以供执行，并返回表示任务挂起结果的Future。Future的get方法将在成功完成后返回任务的结果。
		如果希望立即阻止等待任务，可以使用result = exec.submit(aCallable).get()形式的构造；
		注意：Executor类包含一组方法，这些方法可以将一些其他常见的闭包（如对象）转换为可调用形式，以便提交它们。
		【Throws】：
			RejectedExecutionException 如果任何任务无法调度执行
			NullPointerException 如果要执行的任务为null	
	submit(Runnable task, T result):<T> Future<T> 
		<T> 返回结果的类型
		△ 提交可运行任务以执行，并返回表示该任务的Future任务。Future的get方法将在成功完成后返回给定的结果。
		【Throws】：
			RejectedExecutionException 如果任何任务无法调度执行
			NullPointerException 如果要执行的任务为null
	submit(Callable<T> task):<T> Future<T>
		△  提交返回值的任务以供执行，并返回表示任务挂起结果的Future。Future的get方法将在成功完成后返回任务的结果。
		如果希望立即阻塞等待任务，可以使用result = exec.submit(aCallable).get()形式的构造；
		注意：Executors类包含一组方法，这些方法可以将一些其他常见的内部对象（如PrivilegedAction到Callable形式）转换为可提交的对象。
		【Throws】：
			RejectedExecutionException 如果任何任务无法调度执行
			NullPointerException 如果要执行的任务为null
------------------------------------------------------------------------------------------------------------------------------------------------------
附录：
	1、注：文档中的△符号表示覆盖重写方法。	
	2、注：文档中的★符号表示抽象方法或者直接抛出UnsupportedOperationException异常的方法，总之没有实现具体功能代码的方法。
	