-----------------------------------------LinkedTransferQueue<E>-------------------------------------------------------------------------------------------------------------
LinkedTransferQueue<E>：链接传输队列。【Since:1.7】
	基于链接节点的无边界传输队列。这个队列命令元素FIFO（先进先出）相对于任何给定的生产者。队列的头部是一些生产者在队列中停留时间最长的元素。队列的尾部是某个生产者在队列中停留时间最短的元素。
	请注意，与大多数集合不同，size方法不是一个常量时间（constant-time）操作。由于这些队列的异步性质，确定当前元素数需要遍历元素，因此如果在遍历期间修改此集合，则可能会报告不准确的结果。此外，批量操作addAll、removeAll、retainAll、containsAll、equals和toArray不能保证自动执行。例如，与addAll操作同时操作的迭代器可能只查看部分添加的元素。
	这个类及其迭代器实现Collection 和Iterator接口的所有可选方法。
	内存一致性影响：与其他并发集合一样，将对象放入LinkedTransferQueue之前线程中的操作发生在访问或从另一线程的LinkedTransferQueue中删除该元素之后的操作发生之前。
	该类是Java集合框架的成员。
	
	
	类定义	：public class LinkedTransferQueue<E> extends AbstractQueue<E> implements TransferQueue<E>, java.io.Serializable
	实现接口	：Iterable<E>,Collection<E>,Queue<E>,BlockingQueue<E>,TransferQueue<E>,java.io.Serializable
------------------------------------------------------------------------------------------------------------------------------------------------------
Constructor Summary（构造器概要）：
	public LinkedTransferQueue()
		创建最初为空的LinkedTransferQueue。
	public LinkedTransferQueue(Collection<? extends E> c)
		创建最初包含给定集合元素的LinkedTransferQueue，并按集合迭代器的遍历顺序添加。
		【Throws】：
			NullPointerException 如果指定的集合或其任何元素为null
			
Method Summary（方法概要）：
	add(E e):boolean 
		在该队列的尾部插入指定的元素。由于队列无限边界，此方法将永远不会抛出IllegalStateException异常或返回false。
		【Throws】：
			NullPointerException 如果指定元素为null
	contains(Object o):boolean 
		如果此队列包含指定的元素，则返回true。更正式地说，如果并且仅当此队列包含至少一个元素e（如o.equals(e)），则返回true。
	drainTo(Collection<? super E> c):int 
		删除此队列中的所有可用元素并将它们添加到给定集合中。此操作可能比重复轮询（polling）此队列更有效。尝试将元素添加到集合c时遇到错误，在引发关联的异常时，可能会导致元素既不在队列中，也不在指定集合中。尝试将队列排入（drain）自身会导致IllegalArgumentException异常。此外，如果在操作过程中修改了指定的集合，则此操作的行为不确定。
		【Throws】：
			NullPointerException 如果指定的集合为null。
			IllegalArgumentException 如果指定的集合是此队列本身，或此队列元素的某些属性阻止将其添加到指定的集合中。
	drainTo(Collection<? super E> c, int maxElements):int 
		最多可以从此队列中删除给定数量的可用元素，并将它们添加到给定集合中。尝试将元素添加到集合c时遇到错误，在引发关联的异常时，可能会导致元素既不在队列中，也不在指定集合中。尝试将队列排入（drain）自身会导致IllegalArgumentException异常。此外，如果在操作过程中修改了指定的集合，则此操作的行为不确定。
		【Throws】：
			NullPointerException 如果指定的集合为null。
			IllegalArgumentException 如果指定的集合是此队列本身，或此队列元素的某些属性阻止将其添加到指定的集合中。
	getWaitingConsumerCount():int 
		返回等待通过BlockingQueue.take()或定时poll接收元素的消费者数量的估计值。返回值是一个瞬间状态的近似值，如果消费者已经完成或放弃等待，这可能是不准确的。该值可能对监视和启发式方法有用，但不适用于同步控制。这种方法的实现可能明显慢于hasWaitingConsumer()的实现。
	hasWaitingConsumer():boolean
		如果至少有一个消费者等待通过BlockingQueue.take()或定时poll接收元素，则返回true。返回值表示暂时的状态 。
	isEmpty():boolean 
		如果此队列不包含元素，则返回true。
	iterator():Iterator<E> 
		以正确的顺序返回此队列中元素的迭代器。元素将按从第一个（头）到最后一个（尾）的顺序返回。
		返回的迭代器是弱一致性的。
	offer(E e):boolean 
		在该队列的尾部插入指定的元素。由于队列无限边界，此方法将永远不会返回false。
		【Throws】：
			NullPointerException 如果指定元素为null
	offer(E e, long timeout, TimeUnit unit):boolean 
		timeout - 放弃前等待多长时间，unit为单位（由于队列无限边界，此参数没有实际意义）
		unit - timeout参数的时间单位
		在该队列的尾部插入指定的元素。由于队列无限边界，因此此方法永远不会阻塞或返回false。
		【Throws】：
			NullPointerException 如果指定元素为null
	peek():E 
		检索但不删除此队列的头；如果此队列为空，则返回null。
	poll():E 
		检索并删除此队列的头，如果此队列为空，则返回null。
	poll(long timeout, TimeUnit unit):E 
		timeout - 放弃前等待多长时间，unit为单位
		unit - timeout参数的时间单位
		检索并删除此队列的头，如果需要，可等待指定的等待时间以使元素可用。
		【Throws】：
			InterruptedException 如果在等待时中断
	put(E e):void 
		在该队列的尾部插入指定的元素。由于队列无限边界，因此此方法永远不会阻塞。
	remainingCapacity():int
		始终返回Integer.MAX_VALUE，因为LinkedTransferQueue不受容量限制。 
	remove(Object o):boolean 
		从该队列中删除指定元素的单个实例（如果存在）。更正式地说，如果此队列包含一个或多个这样的元素（o.equals（e）），则删除元素e。如果此队列包含指定元素，则返回“true”（如果此队列因调用而更改，则返回“true”）。
	size():int
		 返回此队列中的元素数。如果此队列包含超过Integer.MAX_VALUE元素，则返回Integer.MAX_VALUE。
		 注意，与大多数集合不同，此方法不是一个常量时间（constant-time）操作。由于这些队列的异步性质，确定当前元素数需要进行O(n)遍历。
	spliterator():Spliterator<E> 
		△ 返回此队列中元素的拆分器。
		返回的拆分器是弱一致性。
		Spliterator报告 Spliterator.CONCURRENT, Spliterator.ORDERED, 和 Spliterator.NONNULL。
	take():E 
		take():E 
		检索并删除此队列的头，必要时等待元素变为可用。
		【Throws】：
			InterruptedException 如果在等待时中断
	transfer(E e):void 
		将元素传送给消费者，如有必要，请等待。
		更准确地说，如果存在等待接收的消费者（在take()或同步 poll中），则立即传送指定的元素，否则将在该队列的尾部插入指定的元素，并等待直到消费者接收到该元素。
		【Throws】：
			NullPointerException 如果指定元素为null
			InterruptedException 如果在等待时中断，则该元素不会排队
	tryTransfer(E e):boolean 
		如果可能，立即将元素传送给等待的消费者。
		更准确地说，如果存在等待接收指定元素的消费者（在take()或同步poll中），则立即传输送元素，否则返回false而不使元素排队。
		【Throws】：
			NullPointerException 如果指定元素为null
	tryTransfer(E e, long timeout, TimeUnit unit):boolean 
		timeout - 放弃前等待多长时间，unit为单位
		unit - timeout参数的时间单位
		如果可能，在超时结束之前将元素传送给消费者。
		更准确地说，如果存在等待接收的消费者（在take()或同步poll中），则立即传送指定的元素，否则将在该队列的尾部插入指定的元素，并等待直到消费者接收到该元素，如果指定的等待时间已过，则在可以传送该元素之前返回false。
		【Throws】：
			NullPointerException 如果指定元素为null
			InterruptedException 如果在等待时中断，则该元素不会排队
	
	
------------------------------------------------------------------------------------------------------------------------------------------------------
附录：
	1、注：文档中的△符号表示覆盖重写方法，✘符号表示已被淘汰掉的方法。	
	2、注：文档中的★符号表示抽象方法或者直接抛出UnsupportedOperationException异常的方法，总之没有实现具体功能代码的方法。
	3、loadFactor：负载因子（或称为负载系数），它等于“size/capacity”（即大小与容量的比率）。负载因子为0，表示空的hash表，0.5表示半满的散列表，依此类推。轻负载的散列表具有冲突少、适宜插入与查询的特点（但是使用Iterator迭代元素时比较慢）
	4、initialCapacity：初始容量。创建hash表时桶的数量，并发操作时ConcurrentHashMap是一次锁住一个桶。ConcurrentHashMap默认将hash表分为16个桶，诸如get、put、remove等常用操作只锁住当前需要用到的桶。这样，原来只能一个线程进入，现在却能同时有16个写线程执行，并发性能的提升是显而易见的。
	5、java并发一致性：
		对于一致性，可以分为从客户端和服务端两个不同的视角。从客户端来看，一致性主要指的是多并发访问时更新过的数据如何获取的问题。从服务端来看，则是更新如何复制分布到整个系统，以保证数据最终一致。一致性是因为有并发读写才有的问题，因此在理解一致性的问题时，一定要注意结合考虑并发读写的场景。
		从客户端角度，多进程并发访问时，更新过的数据在不同进程如何获取的不同策略，决定了不同的一致性。对于关系型数据库，要求更新过的数据能被后续的访问都能看到，这是“强一致性”。如果能容忍后续的部分或者全部访问不到，则是“弱一致性”。如果经过一段时间后要求能访问到更新后的数据，则是“最终一致性”。
	6、SkipList：跳表。	使用“空间换时间”的算法，令链表的每个结点不仅记录next结点位置，还可以按照level层级分别记录后继第level个结点。在查找时，首先按照层级查找，比如：当前跳表最高层级为3，即每个结点中不仅记录了next结点（层级1），还记录了next的next（层级2）、next的next的next（层级3）结点。现在查找一个结点，则从头结点开始先按高层级开始查：head->head的next的next的next->。。。直到找到结点或者当前结点q的值大于所查结点，则此时当前查找层级的q的前一节点p开始，在p~q之间进行下一层级（隔1个结点）的查找......直到最终迫近、找到结点。此法使用的就是“先大步查找确定范围，再逐渐缩小迫近”的思想进行的查找。	
	7、constant-time（常量时间）：意思就是无论n是什么值运算所花时间都一样。
	8、Linear-time（线性时间）：则是说多大n就花多少时间。
	9、Multiple-time（多项式时间）：则意味着随着n增大，n每增加1所花的时间增长越来越多。对于n^2-3这样一个多项式时间来说，n=2的时候可能只要花1的时间，甚至低于线性时间，但n=4的时候可能就要花13的时间了，可以想象再大一些这个数值会变得巨大。但是它又不及指数时间增长快(m^n)，且m^n不能写成多项式形式，所以它又和多项式时间有区别。	
	10、	Copy-On-Write：简称COW，是一种用于程序设计中的优化策略。其基本思路是，从一开始大家都在共享同一个内容，当某个人想要修改这个内容的时候，才会真正把内容Copy出去形成一个新的内容然后再改，这是一种延时懒惰策略。从JDK1.5开始Java并发包里提供了两个使用CopyOnWrite机制实现的并发容器,它们是CopyOnWriteArrayList和CopyOnWriteArraySet。CopyOnWrite容器非常有用，可以在非常多的并发场景中使用到。
		CopyOnWrite容器即写时复制的容器。通俗的理解是当我们往一个容器添加元素的时候，不直接往当前容器添加，而是先将当前容器进行Copy，复制出一个新的容器，然后新的容器里添加元素，添加完元素之后，再将原容器的引用指向新的容器。这样做的好处是我们可以对CopyOnWrite容器进行并发的读，而不需要加锁，因为当前容器不会添加任何元素。所以CopyOnWrite容器也是一种读写分离的思想，读和写不同的容器。
		



































