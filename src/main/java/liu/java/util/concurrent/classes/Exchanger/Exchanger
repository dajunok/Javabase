----------------------------------------Exchanger<V>--------------------------------------------------------------------------------------------------------------
Exchanger<V>：交换器。【Since:1.5】
	<V> - 可以交换的对象类型
	线程可以配对和交换成对元素的同步点（交换点）。每个线程在进入exchange方法时显示一些对象（数据信息），与伙伴线程匹配，并在返回时接收其伙伴的对象（数据信息）。Exchanger可视为SynchronousQueue的双向形式。Exchanger可能在遗传算法和管道设计等应用中有用。
	示例用法：下面是一个类的亮点，该类使用交换器在线程之间交换缓冲区，以便填充缓冲区的线程在需要时得到一个新清空的线程，将填充的线程交给清空缓冲区的线程。
		 class FillAndEmpty {
		   Exchanger<DataBuffer> exchanger = new Exchanger<DataBuffer>();
		   DataBuffer initialEmptyBuffer = ... a made-up type
		   DataBuffer initialFullBuffer = ...
		
		   class FillingLoop implements Runnable {
		     public void run() {
		       DataBuffer currentBuffer = initialEmptyBuffer;
		       try {
		         while (currentBuffer != null) {
		           addToBuffer(currentBuffer);
		           if (currentBuffer.isFull())
		             currentBuffer = exchanger.exchange(currentBuffer);
		         }
		       } catch (InterruptedException ex) { ... handle ... }
		     }
		   }
		
		   class EmptyingLoop implements Runnable {
		     public void run() {
		       DataBuffer currentBuffer = initialFullBuffer;
		       try {
		         while (currentBuffer != null) {
		           takeFromBuffer(currentBuffer);
		           if (currentBuffer.isEmpty())
		             currentBuffer = exchanger.exchange(currentBuffer);
		         }
		       } catch (InterruptedException ex) { ... handle ...}
		     }
		   }
		
		   void start() {
		     new Thread(new FillingLoop()).start();
		     new Thread(new EmptyingLoop()).start();
		   }
		 }	
	内存一致性影响：对于通过交换器成功交换对象的每对线程，每个线程中exchange()之前的操作发生在另一个线程中相应exchange()返回之后的操作发生之前。
	
	

	类定义：public class Exchanger<V>
------------------------------------------------------------------------------------------------------------------------------------------------------
Constructor Summary（构造器概要）：
	public Exchanger()
		建新的交换器。		
			
Method Summary（方法概要）：
	exchange(V x):V 
		x - 要交换的对象
		等待另一个线程到达这个交换点（除非当前线程被中断），然后将给定的对象传递给它，接收它的对象作为返回。
		如果另一个线程已经在交换点等待，那么出于线程调度的目的，它将被恢复，并接收当前线程传入的对象。当前线程立即返回，接收另一个线程传递给交换的对象。
		如果没有其他线程正在等待交换，则出于线程调度的目的，当前线程将被禁用，并处于休眠状态，直到发生以下两种情况之一：
			● 其他线程进入交换；或
			● 其他一些线程中断当前线程。
		如果当前线程：
			● 在进入此方法时是否设置了中断状态；或
			● 在等待交换时中断，
		然后抛出InterruptedException，并清除当前线程的中断状态。
		【Throws】：
			InterruptedException 如果当前线程在等待时被中断
	
	exchange(V x, long timeout, TimeUnit unit):V 
		x - 要交换的对象
		等待另一个线程到达这个交换点（除非当前线程被中断或指定的等待时间已过），然后将给定的对象传递给它，接收它的对象作为返回。
		如果另一个线程已经在交换点等待，那么出于线程调度的目的，它将被恢复，并接收当前线程传入的对象。当前线程立即返回，接收另一个线程传递给交换的对象。
		如果没有其他线程正在等待交换，则出于线程调度的目的，当前线程将被禁用，并处于休眠状态，直到发生以下三种情况之一：
			● 其他线程进入交换；或
			● 其他线程中断当前线程；或
			● 指定的等待时间已过。
		如果当前线程：
			● 在进入此方法时是否设置了中断状态；或
			● 在等待交换时中断，
		然后抛出InterruptedException，并清除当前线程的中断状态。
		【Throws】：
			InterruptedException 如果当前线程在等待时被中断
			TimeoutException 如果指定的等待时间在另一个线程进入交换之前结束
			
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
附录：
	1、注：文档中的△符号表示覆盖重写方法。	
	2、注：文档中的★符号表示抽象方法或者直接抛出UnsupportedOperationException异常的方法，总之没有实现具体功能代码的方法。
	3、loadFactor：负载因子（或称为负载系数），它等于“size/capacity”（即大小与容量的比率）。负载因子为0，表示空的hash表，0.5表示半满的散列表，依此类推。轻负载的散列表具有冲突少、适宜插入与查询的特点（但是使用Iterator迭代元素时比较慢）
	4、initialCapacity：初始容量。创建hash表时桶的数量，并发操作时ConcurrentHashMap是一次锁住一个桶。ConcurrentHashMap默认将hash表分为16个桶，诸如get、put、remove等常用操作只锁住当前需要用到的桶。这样，原来只能一个线程进入，现在却能同时有16个写线程执行，并发性能的提升是显而易见的。
	5、java并发一致性：
		对于一致性，可以分为从客户端和服务端两个不同的视角。从客户端来看，一致性主要指的是多并发访问时更新过的数据如何获取的问题。从服务端来看，则是更新如何复制分布到整个系统，以保证数据最终一致。一致性是因为有并发读写才有的问题，因此在理解一致性的问题时，一定要注意结合考虑并发读写的场景。
		从客户端角度，多进程并发访问时，更新过的数据在不同进程如何获取的不同策略，决定了不同的一致性。对于关系型数据库，要求更新过的数据能被后续的访问都能看到，这是“强一致性”。如果能容忍后续的部分或者全部访问不到，则是“弱一致性”。如果经过一段时间后要求能访问到更新后的数据，则是“最终一致性”。
	6、SkipList：跳表。	使用“空间换时间”的算法，令链表的每个结点不仅记录next结点位置，还可以按照level层级分别记录后继第level个结点。在查找时，首先按照层级查找，比如：当前跳表最高层级为3，即每个结点中不仅记录了next结点（层级1），还记录了next的next（层级2）、next的next的next（层级3）结点。现在查找一个结点，则从头结点开始先按高层级开始查：head->head的next的next的next->。。。直到找到结点或者当前结点q的值大于所查结点，则此时当前查找层级的q的前一节点p开始，在p~q之间进行下一层级（隔1个结点）的查找......直到最终迫近、找到结点。此法使用的就是“先大步查找确定范围，再逐渐缩小迫近”的思想进行的查找。	
	7、constant-time（常量时间）：意思就是无论n是什么值运算所花时间都一样。
	8、Linear-time（线性时间）：则是说多大n就花多少时间。
	9、Multiple-time（多项式时间）：则意味着随着n增大，n每增加1所花的时间增长越来越多。对于n^2-3这样一个多项式时间来说，n=2的时候可能只要花1的时间，甚至低于线性时间，但n=4的时候可能就要花13的时间了，可以想象再大一些这个数值会变得巨大。但是它又不及指数时间增长快(m^n)，且m^n不能写成多项式形式，所以它又和多项式时间有区别。	
	10、	Copy-On-Write：简称COW，是一种用于程序设计中的优化策略。其基本思路是，从一开始大家都在共享同一个内容，当某个人想要修改这个内容的时候，才会真正把内容Copy出去形成一个新的内容然后再改，这是一种延时懒惰策略。从JDK1.5开始Java并发包里提供了两个使用CopyOnWrite机制实现的并发容器,它们是CopyOnWriteArrayList和CopyOnWriteArraySet。CopyOnWrite容器非常有用，可以在非常多的并发场景中使用到。
		CopyOnWrite容器即写时复制的容器。通俗的理解是当我们往一个容器添加元素的时候，不直接往当前容器添加，而是先将当前容器进行Copy，复制出一个新的容器，然后新的容器里添加元素，添加完元素之后，再将原容器的引用指向新的容器。这样做的好处是我们可以对CopyOnWrite容器进行并发的读，而不需要加锁，因为当前容器不会添加任何元素。所以CopyOnWrite容器也是一种读写分离的思想，读和写不同的容器。