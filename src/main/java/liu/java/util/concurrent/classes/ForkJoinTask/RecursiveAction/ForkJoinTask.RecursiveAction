----------------------------------------RecursiveAction--------------------------------------------------------------------------------------------------------------
RecursiveAction：递归操作。【Since:1.7】
	无返回值的递归ForkJoinTask。此类建立一种约定，将无返回值操作参数化为Void ForkJoinTasks。因为null是Void类型的唯一有效值，所以join等方法在完成时总是返回null值。
	用法示例。下面是一个简单但完整的ForkJoin排序，它对给定的long[]数组进行排序：
		 static class SortTask extends RecursiveAction {
		   final long[] array; final int lo, hi;
		   SortTask(long[] array, int lo, int hi) {
		     this.array = array; this.lo = lo; this.hi = hi;
		   }
		   SortTask(long[] array) { this(array, 0, array.length); }
		   protected void compute() {
		     if (hi - lo < THRESHOLD)
		       sortSequentially(lo, hi);
		     else {
		       int mid = (lo + hi) >>> 1;
		       invokeAll(new SortTask(array, lo, mid),
		                 new SortTask(array, mid, hi));
		       merge(lo, mid, hi);
		     }
		   }
		   // implementation details follow:
		   static final int THRESHOLD = 1000;
		   void sortSequentially(int lo, int hi) {
		     Arrays.sort(array, lo, hi);
		   }
		   void merge(int lo, int mid, int hi) {
		     long[] buf = Arrays.copyOfRange(array, lo, mid);
		     for (int i = 0, j = lo, k = mid; i < buf.length; j++)
		       array[j] = (k == hi || buf[i] < array[k]) ?
		         buf[i++] : array[k++];
		   }
		 }
	然后，您可以通过创建新的SortTask(anArray)并在ForkJoinPool中调用它来对anArray进行排序。作为一个更具体的简单示例，以下任务会递增数组的每个元素：	
		 class IncrementTask extends RecursiveAction {
		   final long[] array; final int lo, hi;
		   IncrementTask(long[] array, int lo, int hi) {
		     this.array = array; this.lo = lo; this.hi = hi;
		   }
		   protected void compute() {
		     if (hi - lo < THRESHOLD) {
		       for (int i = lo; i < hi; ++i)
		         array[i]++;
		     }
		     else {
		       int mid = (lo + hi) >>> 1;
		       invokeAll(new IncrementTask(array, lo, mid),
		                 new IncrementTask(array, mid, hi));
		     }
		   }
		 }	
	下面的示例说明了一些可能导致更好性能的改进和习惯用法：RecursiveAction不需要完全递归，只要它们保持基本的分而治之的方法。这里是一个类，它将一个双数组的每个元素的平方和相加，方法是将重复的除法的右侧除以2，然后用一系列下一个引用跟踪它们。它使用了基于方法getSurplusQueuedTaskCount的动态阈值，但是通过直接对未窃取的任务执行叶操作而不是进一步细分来平衡潜在的过度划分。
		 double sumOfSquares(ForkJoinPool pool, double[] array) {
		   int n = array.length;
		   Applyer a = new Applyer(array, 0, n, null);
		   pool.invoke(a);
		   return a.result;
		 }
		
		 class Applyer extends RecursiveAction {
		   final double[] array;
		   final int lo, hi;
		   double result;
		   Applyer next; // keeps track of right-hand-side tasks
		   Applyer(double[] array, int lo, int hi, Applyer next) {
		     this.array = array; this.lo = lo; this.hi = hi;
		     this.next = next;
		   }
		
		   double atLeaf(int l, int h) {
		     double sum = 0;
		     for (int i = l; i < h; ++i) // perform leftmost base step
		       sum += array[i] * array[i];
		     return sum;
		   }
		
		   protected void compute() {
		     int l = lo;
		     int h = hi;
		     Applyer right = null;
		     while (h - l > 1 && getSurplusQueuedTaskCount() <= 3) {
		       int mid = (l + h) >>> 1;
		       right = new Applyer(array, mid, h, right);
		       right.fork();
		       h = mid;
		     }
		     double sum = atLeaf(l, h);
		     while (right != null) {
		       if (right.tryUnfork()) // directly calculate if not stolen
		         sum += right.atLeaf(right.lo, right.hi);
		       else {
		         right.join();
		         sum += right.result;
		       }
		       right = right.next;
		     }
		     result = sum;
		   }
		 }	
	
	
	类定义	：public abstract class RecursiveAction extends ForkJoinTask<Void>
	实现接口	：Future<Void>, Serializable
------------------------------------------------------------------------------------------------------------------------------------------------------
Constructor Summary（构造器概要）：
	public RecursiveAction()
	
Method Summary（方法概要）：
	compute():protected abstract void 
		★ 此任务执行的主要计算。
	exec():protected final boolean 
		△ 实现RecursiveAction的执行约定。
		如果已知此任务已正常完成，则返回true
	getRawResult():final Void 
		△ 总是返回null。
	setRawResult(Void mustBeNull):protected final void 
		△ 需要null的完成值。
	
	
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
附录：
	1、注：文档中的△符号表示覆盖重写方法。	
	2、注：文档中的★符号表示抽象方法或者直接抛出UnsupportedOperationException异常的方法，总之没有实现具体功能代码的方法。
	3、loadFactor：负载因子（或称为负载系数），它等于“size/capacity”（即大小与容量的比率）。负载因子为0，表示空的hash表，0.5表示半满的散列表，依此类推。轻负载的散列表具有冲突少、适宜插入与查询的特点（但是使用Iterator迭代元素时比较慢）
	4、initialCapacity：初始容量。创建hash表时桶的数量，并发操作时ConcurrentHashMap是一次锁住一个桶。ConcurrentHashMap默认将hash表分为16个桶，诸如get、put、remove等常用操作只锁住当前需要用到的桶。这样，原来只能一个线程进入，现在却能同时有16个写线程执行，并发性能的提升是显而易见的。
	5、java并发一致性：
		对于一致性，可以分为从客户端和服务端两个不同的视角。从客户端来看，一致性主要指的是多并发访问时更新过的数据如何获取的问题。从服务端来看，则是更新如何复制分布到整个系统，以保证数据最终一致。一致性是因为有并发读写才有的问题，因此在理解一致性的问题时，一定要注意结合考虑并发读写的场景。
		从客户端角度，多进程并发访问时，更新过的数据在不同进程如何获取的不同策略，决定了不同的一致性。对于关系型数据库，要求更新过的数据能被后续的访问都能看到，这是“强一致性”。如果能容忍后续的部分或者全部访问不到，则是“弱一致性”。如果经过一段时间后要求能访问到更新后的数据，则是“最终一致性”。
	6、SkipList：跳表。	使用“空间换时间”的算法，令链表的每个结点不仅记录next结点位置，还可以按照level层级分别记录后继第level个结点。在查找时，首先按照层级查找，比如：当前跳表最高层级为3，即每个结点中不仅记录了next结点（层级1），还记录了next的next（层级2）、next的next的next（层级3）结点。现在查找一个结点，则从头结点开始先按高层级开始查：head->head的next的next的next->。。。直到找到结点或者当前结点q的值大于所查结点，则此时当前查找层级的q的前一节点p开始，在p~q之间进行下一层级（隔1个结点）的查找......直到最终迫近、找到结点。此法使用的就是“先大步查找确定范围，再逐渐缩小迫近”的思想进行的查找。	
	7、constant-time（常量时间）：意思就是无论n是什么值运算所花时间都一样。
	8、Linear-time（线性时间）：则是说多大n就花多少时间。
	9、Multiple-time（多项式时间）：则意味着随着n增大，n每增加1所花的时间增长越来越多。对于n^2-3这样一个多项式时间来说，n=2的时候可能只要花1的时间，甚至低于线性时间，但n=4的时候可能就要花13的时间了，可以想象再大一些这个数值会变得巨大。但是它又不及指数时间增长快(m^n)，且m^n不能写成多项式形式，所以它又和多项式时间有区别。	
	10、	Copy-On-Write：简称COW，是一种用于程序设计中的优化策略。其基本思路是，从一开始大家都在共享同一个内容，当某个人想要修改这个内容的时候，才会真正把内容Copy出去形成一个新的内容然后再改，这是一种延时懒惰策略。从JDK1.5开始Java并发包里提供了两个使用CopyOnWrite机制实现的并发容器,它们是CopyOnWriteArrayList和CopyOnWriteArraySet。CopyOnWrite容器非常有用，可以在非常多的并发场景中使用到。
		CopyOnWrite容器即写时复制的容器。通俗的理解是当我们往一个容器添加元素的时候，不直接往当前容器添加，而是先将当前容器进行Copy，复制出一个新的容器，然后新的容器里添加元素，添加完元素之后，再将原容器的引用指向新的容器。这样做的好处是我们可以对CopyOnWrite容器进行并发的读，而不需要加锁，因为当前容器不会添加任何元素。所以CopyOnWrite容器也是一种读写分离的思想，读和写不同的容器。
		
		
		
		