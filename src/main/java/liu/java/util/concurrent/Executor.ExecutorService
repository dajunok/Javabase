-----------------------------------------ExecutorService-----------------------------------------------------------------------------------------------------------------------------		
ExecutorService：执行器服务接口 【Since:1.5】
	一种Executor，它提供管理终止的方法和产生跟踪一个或多个异步任务进度的Future的方法。
	ExecutorService可以关闭，这将导致它拒绝新任务。提供了两种关闭ExecutorService的不同方法。shutdown()方法将允许在终止之前执行以前提交的任务，而shutdownNow()方法将阻止等待的任务启动并尝试停止当前执行的任务。终止时，执行器没有正在执行的任务，没有等待执行的任务，并且不能提交新的任务。应关闭未使用的ExecutorService，以回收其资源。
	方法submit通过创建和返回可用于取消执行并且或等待完成的Future来扩展基础方法Executor.execute(Runnable)。方法invokeAny和invokeAll执行最常用的批量执行形式，执行集合任务，然后等待至少一个或全部完成。（类ExecutionCompletionService可用于编写这些方法的自定义变体。）
	Executors类为该包中提供的ExecutorService接口提供工厂方法。
	使用案例：下面是一个网络服务的简述，其中线程池中的线程服务传入请求。它使用预配置的执行器。Executors.newFixedThreadPool(int)工厂方法：
		 class NetworkService implements Runnable {
		   private final ServerSocket serverSocket;
		   private final ExecutorService pool;
		
		   public NetworkService(int port, int poolSize)
		       throws IOException {
		     serverSocket = new ServerSocket(port);
		     pool = Executors.newFixedThreadPool(poolSize);
		   }
		
		   public void run() { // run the service
		     try {
		       for (;;) {
		         pool.execute(new Handler(serverSocket.accept()));
		       }
		     } catch (IOException ex) {
		       pool.shutdown();
		     }
		   }
		 }
		
		 class Handler implements Runnable {
		   private final Socket socket;
		   Handler(Socket socket) { this.socket = socket; }
		   public void run() {
		     // read and service request on socket
		   }
		 }	
	以下方法分两个阶段关闭ExecutorService，首先调用shutdown拒绝传入任务，然后调用shutdownNow（如有必要）取消任何延迟任务：
		 void shutdownAndAwaitTermination(ExecutorService pool) {
		   pool.shutdown(); // Disable new tasks from being submitted
		   try {
		     // Wait a while for existing tasks to terminate
		     if (!pool.awaitTermination(60, TimeUnit.SECONDS)) {
		       pool.shutdownNow(); // Cancel currently executing tasks
		       // Wait a while for tasks to respond to being cancelled
		       if (!pool.awaitTermination(60, TimeUnit.SECONDS))
		           System.err.println("Pool did not terminate");
		     }
		   } catch (InterruptedException ie) {
		     // (Re-)Cancel if current thread also interrupted
		     pool.shutdownNow();
		     // Preserve interrupt status
		     Thread.currentThread().interrupt();
		   }
		 }	
	内存一致性影响：在将Runnable或Callable任务提交给ExecutorService之前，线程中的操作发生在该任务所采取的任何操作之前，而这反过来又发生在通过Future.get()检索结果之前。
	
	接口定义	：public interface ExecutorService extends Executor
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
	awaitTermination(long timeout, TimeUnit unit):boolean 
		阻塞，直到所有任务在关闭请求后完成执行，或发生超时，或当前线程被中断（以先发生者为准）。
		【Throws】：
			InterruptedException 如果在等待时中断
	invokeAll(Collection<? extends Callable<T>> tasks):<T> List<Future<T>> 
		<T> 任务返回值的类型
		执行给定的任务，当所有任务完成时返回一个包含状态和结果的Future列表。对于返回列表的每个元素，Future.isDone()为true。请注意，已完成的任务可以正常终止，也可以通过引发异常终止。如果在执行此操作时修改了给定集合，则此方法的结果不确定。
		【Throws】：
			InterruptedException 如果在等待时中断，则取消未完成的任务
			NullPointerException 如果任务或其任何元素为null
			RejectedExecutionException 如果任何任务无法调度执行
	invokeAll(Collection<? extends Callable<T>> tasks,long timeout, TimeUnit unit):<T> List<Future<T>> 
		<T> 任务返回值的类型
		执行给定的任务，在所有任务完成或超时到期时返回保持其状态和结果的Future列表，以先发生者为准。对于返回的列表中的每个元素，Future.isDone()都为true。返回后，未完成的任务将被取消。请注意，已完成的任务可以正常终止，也可以通过引发异常终止。如果在执行此操作时修改了给定集合，则此方法的结果不确定。
		【Throws】：
			InterruptedException 如果在等待时中断，则取消未完成的任务
			NullPointerException 如果任务或其任何元素为null
			RejectedExecutionException 如果任何任务无法调度执行
	invokeAny(Collection<? extends Callable<T>> tasks):<T> T 
		<T> 任务返回值的类型
		执行给定的任务，返回已成功完成任务的结果（即，不引发异常），如果有的话。正常或异常返回后，未完成的任务将被取消。如果在执行此操作时修改了给定集合，则此方法的结果不确定。
		【Throws】：
			InterruptedException 如果在等待时中断，则取消未完成的任务
			NullPointerException 如果要执行的任务或任何元素任务为null
			IllegalArgumentException 如果任务为空
			ExecutionException 如果没有任务成功完成
			RejectedExecutionException 如果任何任务无法调度执行
	invokeAny(Collection<? extends Callable<T>> tasks,long timeout, TimeUnit unit):<T> T 
		<T> 任务返回值的类型
		unit - timeout的时间单位
		执行给定的任务，返回已成功完成的任务（即，不引发异常）的结果（如果在给定的超时（timeout）结束之前有任何操作）。正常或异常返回后，未完成的任务将被取消。如果在执行此操作时修改了给定集合，则此方法的结果不确定。
		【Throws】：
			InterruptedException 如果在等待时中断
			NullPointerException 如果要执行的任务、unit或任何元素任务为null
			TimeoutException 如果在任何任务成功完成之前给定的超时时间已过
			ExecutionException 如果没有任务成功完成
			RejectedExecutionException 如果任何任务无法调度执行
	isShutdown():boolean 
		如果此执行器已关闭，则返回true。
	isTerminated():boolean 
		如果关闭后所有任务都已完成，则返回true。请注意，除非先调用shutdown或shutdownNow，否则isTerminated永远不会为true。
	shutdown():void 
		启动有序关闭，在该关闭中执行以前提交的任务，但不接受新任务。如果已经关闭，则调用没有其他效果。
		此方法不等待以前提交的任务完成执行。使用awaitTermination来完成此操作。
		【Throws】：
			SecurityException 如果存在安全管理器并关闭此ExecutorService，则可能会操作不允许调用方修改的线程，因为它不具有RuntimePermission("modifyThread")权限，或者安全管理器的checkAccess方法拒绝访问。
	shutdownNow():List<Runnable> 
		尝试停止所有正在执行的任务，停止正在等待的任务的处理，并返回正在等待执行的任务的列表。
		此方法不等待主动执行的任务终止。使用awaitTermination来完成此操作。
		除了尽最大努力尝试停止处理活动执行的任务之外，没有任何保证。例如，典型的实现将通过Thread.interrupt()取消，因此任何未能响应中断的任务都可能永远不会终止。
		【Throws】：
			SecurityException 如果存在安全管理器并关闭此ExecutorService，则可能会操作不允许调用方修改的线程，因为它不具有RuntimePermission("modifyThread")权限，或者安全管理器的checkAccess方法拒绝访问。
	submit(Runnable task):Future<?> 
		提交返回值的任务以供执行，并返回表示任务挂起结果的Future。Future的get方法将在成功完成后返回任务的结果。
		如果希望立即阻止等待任务，可以使用result = exec.submit(aCallable).get()形式的构造；
		注意：Executor类包含一组方法，这些方法可以将一些其他常见的闭包（如对象）转换为可调用形式，以便提交它们。
		【Throws】：
			RejectedExecutionException 如果任何任务无法调度执行
			NullPointerException 如果要执行的任务为null
			
	submit(Runnable task, T result):<T> Future<T> 
	submit(Callable<T> task):<T> Future<T> 
	






















