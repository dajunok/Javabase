----------------------------------------Package java.util.concurrent--------------------------------------------------------------------------------------------------------------
在并发编程中常用的实用程序类。【Since 1.5】
											 
Package Description（包说明描述）：
	在并发编程中常用的实用程序类。这个包包括一些小型的标准化可扩展框架，以及一些提供有用功能的类，这些类在其他方面是冗长的或难以实现的。以下是主要部件的简要说明。另请参见java.util.concurrent.locks和 java.util.concurrent.atomic包。
	
	Executor（执行器）：
		【接口】：
			Executor是一个简单的标准化接口，用于定义自定义的线程类子系统，包括线程池、异步I/O和轻量级任务框架。根据使用的具体Executor类，任务可以在新创建的线程、现有的任务执行线程或调用execute的线程中执行，并可以按顺序或同时执行。ExecutorService提供了一个更完整的异步任务执行框架。ExecutorService管理任务的排队和调度，并允许受控关闭。ScheduledExecutorService子接口和相关接口增加了对延迟和定期任务执行的支持。ExecutorService提供安排异步执行任何表示为Callable的函数的方法，该函数是Runnable的模拟结果。Future返回函数的结果，允许确定执行是否已完成，并提供取消执行的方法。RunnableFuture是一种Future，它拥有一个在执行时设置其结果的运行方法。
		【实现】：
			ThreadPoolExecutor和ScheduledThreadPoolExecutor类提供可调的灵活线程池。Executors类为Executor的最常见类型和配置提供工厂方法，以及一些使用它们的实用方法。基于Executors的其他实用程序包括具体类FutureTask，它提供了Futures的通用可扩展实现和ExecutorCompletionService，帮助协调异步任务组的处理。
			ForkJoinPool类提供了一个主要用于处理ForkJoinTask及其子类的实例的Executor。这些类使用一个窃取工作的调度程序，该调度程序可以为符合计算密集型并行处理中经常存在的限制的任务获得高吞吐量。
	
	Queues（队列）：
		ConcurrentLinkedQueue类提供了一个高效的可伸缩线程安全的非阻塞FIFO队列（先进先出队列）。ConcurrentLinkedEque类类似，但还支持Deque接口。
		java.util.concurrent包中的五个实现支持扩展BlockingQueue接口，该接口定义了put和take方法的阻塞版本：LinkedBlockingQueue、ArrayBlockingQueue、SynchronousQueue、PriorityBlockingQueue和DelayQueue。不同的类涵盖了生产者-消费者、消息传递、并行任务和相关并发设计的最常见的使用上下文。		
		扩展接口TransferQueue和LinkedTransferQueue实现类 引入了同步传输方法（transfer），以及相关功能，在该方法中，生产者可以选择阻塞等待其使用者。
		BlockingDeque接口扩展于BlockingQueue以支持FIFO和LIFO（基于栈）操作。LinkedBlockingDeque类是此接口的一个实现。
	
	Timing（定时）：
		TimeUnit类提供了多个粒度（包括纳秒），用于指定和控制基于超时（time-out）的操作。包中的大多数类都包含基于超时（time-out）和不确定等待的操作。在所有使用超时的情况下，超时指定方法在指示超时之前应等待的最短时间。实现尽最大努力在超时发生后尽快检测超时。但是，在检测到超时和在该超时之后实际执行的线程之间可能会有不确定的时间间隔。接受timeout参数的所有方法都将小于或等于零的值视为根本不等待。要等待“永远”，可以使用Long.MAX_VALUE。	
	
	Synchronizers（同步器）：	
		五个类有助于通用的特殊用途同步语法：
			● Semaphore（信号量）：是一种典型的并发工具。
			● CountDownLatch（倒计数锁）：是一个非常简单但非常常见的实用程序，用于阻止给定数量的信号、事件或条件。
			● CyclicBarrier（回环屏障）：是一种可复位的多路同步点，在某些并发编程中非常有用。
			● Phaser（阶段器）：提供了一种更灵活的屏障形式，可用于控制多线程之间的阶段计算。
			● Exchanger（交换器）：允许两个线程在一个约定的点交换对象，并且在一些管道设计中很有用。
	
	Concurrent Collections（并发集合）：
		除了队列之外，此包还提供设计用于多线程上下文的集合实现：ConcurrentHashMap、ConcurrentSkipListMap、ConcurrentSkipListSet、CopyOnWriteArrayList 和 CopyOnWriteArraySet。当期望许多线程访问一个给定的集合时，ConcurrentHashMap通常比同步的HashMap更可取，ConcurrentSkipListMap通常比同步的TreeMap更可取。当预期的读取和遍历数大大超过列表更新数时，CopyOnWriteArrayList比同步ArrayList更可取。
		与此包中的某些类一起使用的“Concurrent”前缀是一个速记符号，表示与类似的“synchronized”前缀类有几个不同之处。例如，java.util.Hashtable和Collections.synchronizedMap(new HashMap())是同步的。但ConcurrentHashMap是“concurrent”。并发集合是线程安全的，但不受单个排除锁控制。在ConcurrentHashMap的特定情况下，它安全地允许任意数量的并发读取以及可调数量的并发写入。当需要通过单个锁阻止对集合的所有访问时，“Synchronized”类会很有用，但会牺牲较差的可伸缩性。在其他需要多个线程访问一个公共集合的情况下，“concurrent”版本通常更可取。而且，当集合未共享或只有持有其他锁时才可访问时，最好使用未同步的集合。
		大多数并发集合实现（包括大多数队列）也不同于通常的java.util约定，因为它们的迭代器（Iterators）和拆分器（Spliterators）提供弱一致性，而不是快速失败（fast-fail）的遍历：
			● 可以同时进行其他作业。
			● 他们永远不会抛出ConcurrentModificationException异常。
			● 它们被保证能够准确地贯穿它们在建造时就存在了的元素一次，并且可以（但不保证）反映创建后的任何修改。
	
	Memory Consistency Properties（内存一致性属性）：
		Java语言规范的第17章定义了在内存操作（如共享变量的读写）的happens-before关系。只有在写操作发生在读操作之前，一个线程的写操作结果才保证对另一个线程的读操作可见。synchronized和volatile构建以及Thread.start()和Thread.join()方法可以形成happens-before关系。特别地：
			● 线程中的每一个操作都发生在该线程中的每一个操作之前，该操作随后按程序的顺序出现。
			● 监视器（monitor）的解锁（同步块或方法出口）发生在同一监视器的每个后续锁（同步块或方法入口）之前。并且因为发生在关系可传递之前，所以线程在解锁之前的所有操作都发生在该监视器的任何线程锁定之后的所有操作之前。
			● 对volatile字段的写入发生在随后对该字段的每次读取之前。volatile字段的写入和读取与进入和退出监视器具有类似的内存一致性效果，但不需要互斥锁定。
			● 在已启动线程中的任何操作之前，对线程启动的调用将发生。
			● 线程中的所有操作都发生在其他线程成功从该线程上的联接返回之前。
		java.util.concurrent及其子包中所有类的方法将这些保证扩展到更高级别的同步。特别地：
			● 在将对象放入任何并发集合之前，线程中的操作发生在从另一线程的集合中访问或删除该元素之后的操作之前。
			● 在向执行器（Executor）提交可运行文件（Runnable）之前，线程中的操作在execution开始之前发生。同样，对于提交给ExecutorService的可调用文件（Callable）。
			● 由Future表示的异步计算所采取的操作发生在通过另一个线程中的Future.get()检索结果之后的操作之前。
			● “releasing”同步器方法（如Lock.unlock、Semaphore.release和CountDownLatch.countDown）之前的操作发生在成功的“acquiring”方法（如Lock.lock、Semaphore.acquire、Condition.await和CountDownLatch.await）之后的操作之前，这些操作在另一个线程中的同一同步器对象上。
			● 对于通过交换器（Exchanger）成功交换对象的每对线程，每个线程中的exchange()之前的操作发生在另一个线程中相应exchange()之后的操作之前。
			● 在调用CyclicBarrier.await和phaser.Phaser.awaitAdvance（及其变体）之前的操作发生在屏障操作执行的操作之前，而屏障操作执行的操作发生在其他线程中相应等待成功返回之后的操作之前。



Interface Summary（接口概要）：
	BlockingDeque
	BlockingQueue
	Callable
	CompletableFuture.AsynchronousCompletionTask
	CompletionService
	CompletionStage
	ConcurrentMap
	ConcurrentNavigableMap
	Delayed
	Executor
	ExecutorService
	ForkJoinPool.ForkJoinWorkerThreadFactory
	ForkJoinPool.ManagedBlocker
	Future
	RejectedExecutionHandler
	RunnableFuture
	RunnableScheduledFuture
	ScheduledExecutorService
	ScheduledFuture
	ThreadFactory
	TransferQueue



Class Summary（类概要）：
	AbstractExecutorService
	ArrayBlockingQueue
	CompletableFuture
	ConcurrentHashMap
	ConcurrentHashMap.KeySetView
	ConcurrentLinkedDeque
	ConcurrentLinkedQueue
	ConcurrentSkipListMap
	ConcurrentSkipListSet
	CopyOnWriteArrayList
	CopyOnWriteArraySet
	CountDownLatch
	CountedCompleter
	CyclicBarrier
	DelayQueue
	Exchanger
	ExecutorCompletionService
	Executors
	ForkJoinPool
	ForkJoinTask
	ForkJoinWorkerThread
	FutureTask
	LinkedBlockingDeque
	LinkedBlockingQueue
	LinkedTransferQueue
	Phaser
	PriorityBlockingQueue
	RecursiveAction
	RecursiveTask
	ScheduledThreadPoolExecutor
	Semaphore
	SynchronousQueue
	ThreadLocalRandom
	ThreadPoolExecutor
	ThreadPoolExecutor.AbortPolicy
	ThreadPoolExecutor.CallerRunsPolicy
	ThreadPoolExecutor.DiscardOldestPolicy
	ThreadPoolExecutor.DiscardPolicy

Enum Summary（枚举概要）
	TimeUnit
	
Exception Summary（异常概要）
	BrokenBarrierException
	CancellationException
	CompletionException
	ExecutionException
	RejectedExecutionException
	TimeoutException




------------------------------------------------------------------------------------------------------------------------------------------------------


	
	
	
	
		
		