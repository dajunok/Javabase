----------------------------------------AbstractQueuedSynchronizer--------------------------------------------------------------------------------------------------------------
AbstractQueuedSynchronizer：抽象队列同步器。【Since:1.5】
	提供一个框架，用于实现依赖先进先出（FIFO）等待队列的阻塞锁和相关同步器（信号量、事件等）。此类被设计为大多数类型的同步器的有用基础，这些同步器依赖单个原子int值来表示状态。子类必须定义更改此状态的受保护方法，以及定义此状态对于正在获取或释放的对象意味着什么。考虑到这些，这个类中的其他方法执行所有排队和阻塞机制。子类可以维护其他状态字段，，但只有关于同步跟踪原子更新的int值时使用getState()、setState(int)和compareAndSetState(int, int)方法操作。
	子类应定义为用于实现其封闭类的同步属性的非公共（non-public）内部帮助器类。类AbstractQueuedSynchronizer不实现任何同步接口。相反，它定义了一些方法，如acquireInterruptibly(int)，具体锁和相关同步器可以根据需要调用这些方法来实现它们的公共（public）方法。
	此类支持默认独占模式和共享模式中的一种或两种。以独占模式获取时，其他线程尝试获取无法成功。多线程获取共享模式可能（但不需要）成功。此类不“理解”这些差异，除非在机械意义上，即当共享模式获取成功时，下一个等待线程（如果存在）还必须确定它是否也可以获取。在不同模式下等待的线程共享相同的FIFO队列。通常，子类实现只支持其中一种模式，但这两种模式都可以发挥作用，例如在ReadWriteLock中。只支持独占模式或只支持共享模式的子类不需要定义支持未使用模式的方法。
	此类定义了一个嵌套的AbstractQueuedSynchronizer.ConditionObject类，该类可由支持独占模式的子类用作Condition实现，对于该模式，方法isHeldExclusively()报告同步是否仅针对当前线程保持，方法release(int)是否使用当前getState()值调用完全释放这个对象，并且acquire(int)，给定这个保存的状态值，最终将这个对象恢复到以前的获取状态。没有AbstractQueuedSynchronizer方法可以创建这样的条件，因此如果不能满足这个约束，就不要使用它。AbstractQueuedSynchronizer.ConditionObject的行为当然取决于其同步器实现的语义。
	这个类为内部队列提供检查、检测和监视方法，并为条件对象提供类似的方法。可以根据需要使用AbstractQueuedSynchronizer将它们导出到类中，以实现同步机制。
	此类的序列化仅存储基础原子整数维护状态，因此反序列化对象具有空线程队列。需要序列化的典型子类将定义一个readObject方法，该方法在反序列化时将其还原为已知的初始状态。
	
	Usage（用法）：
	要将此类用作同步器的基础，请通过使用getState()、setState(int)和/或compareAndSetState(int, int)检查和/或修改同步状态来重新定义以下方法（如适用）：
		● tryAcquire(int)
		● tryRelease(int)
		● tryAcquireShared(int)
		● tryReleaseShared(int)
		● isHeldExclusively()	
	默认情况下，这些方法中的每一个都会引发UnsupportedOperationException异常。这些方法的实现必须是内部线程安全的，通常应该是短的而不是块的。定义这些方法是使用此类的唯一受支持的方法。所有其他方法都声明为final方法，因为它们不能独立变化。
	您还可以从AbstractOwnableSynchronizer中找到继承的方法，这些方法有助于跟踪拥有独占同步器的线程。我们鼓励您使用它们————这使监视和诊断工具能够帮助用户确定哪些线程持有锁。
	即使此类基于内部FIFO队列，它也不会自动执行FIFO获取策略。独占同步的核心形式是：
	获取：
	     while (!tryAcquire(arg)) {
	        enqueue thread if it is not already queued;
	        possibly block current thread;
	     }	
	释放：
	     if (tryRelease(arg))
	        unblock the first queued thread;		
	（共享模式类似，但可能涉及级联信号。）
	因为获取中的检查是在排队之前调用，所以新获取的线程可能会先于被阻塞和排队的其他线程。但是，如果需要，您可以通过内部调用一个或多个检查方法来定义tryAcquire和/或tryAcquireShared以禁用屏障（bargging），从而提供“公平”策略的FIFO获取命令。特别是，如果hasQueuedPredecessors()（一种专门为公平同步器设计的方法）返回true，大多数hasQueuedPredecessors()可以定义tryAcquire返回false。其他变化是可能的。
	吞吐量和可扩展性对于默认的bargging（也称为贪婪、拒绝和避免护送）策略通常是最高的。虽然这不能保证公平或无饥饿，但允许较早排队的线程在稍后排队的线程之前重新整理，并且每个重新整理都有一个公平的机会来成功处理传入的线程。此外，虽然获取不是通常意义上的“快速”（spin），但它们可能在阻塞前执行与其他计算穿插的多个tryAcquire调用。当独占同步只被短暂地保持时，这就给了“快速”（spin）的大部分好处，而不需要承担大部分责任。如果需要，您可以通过前面的调用来增强这一点，以获取具有“快速路径”检查的方法，可能会预检查hasContended()和/或hasQueuedThreads()，以便仅在同步器可能不需要竞争时才这样做。
	此类通过将其使用范围专门化为可依赖于int状态、获取和释放参数以及内部FIFO等待队列的同步器，部分地为同步提供了高效和可扩展的基础。当这还不够时，您可以使用原子类、您自己的自定义队列类和锁支持阻塞支持从较低的级别构建同步器。
	此类通过将其使用范围专门化为可依赖于int状态、获取和释放参数以及内部FIFO等待队列的同步器，部分地为同步提供了高效和可扩展的基础。当这还不够时，您可以使用原子类、您自己的自定义Queue类和LockSupport阻塞支持从较低的级别构建同步器。
	
	Usage Examples（使用案例）：
	这里有一个不可重入互斥锁类，它使用值0表示未锁定状态，使用值1表示已锁定状态。虽然不可重入锁并不严格要求记录当前的所有者线程，但此类仍然这样做，以使使用更易于监视。它还支持条件并公开一种检测方法：
		 class Mutex implements Lock, java.io.Serializable {
		
		   // Our internal helper class
		   private static class Sync extends AbstractQueuedSynchronizer {
		     // Reports whether in locked state
		     protected boolean isHeldExclusively() {
		       return getState() == 1;
		     }
		
		     // Acquires the lock if state is zero
		     public boolean tryAcquire(int acquires) {
		       assert acquires == 1; // Otherwise unused
		       if (compareAndSetState(0, 1)) {
		         setExclusiveOwnerThread(Thread.currentThread());
		         return true;
		       }
		       return false;
		     }
		
		     // Releases the lock by setting state to zero
		     protected boolean tryRelease(int releases) {
		       assert releases == 1; // Otherwise unused
		       if (getState() == 0) throw new IllegalMonitorStateException();
		       setExclusiveOwnerThread(null);
		       setState(0);
		       return true;
		     }
		
		     // Provides a Condition
		     Condition newCondition() { return new ConditionObject(); }
		
		     // Deserializes properly
		     private void readObject(ObjectInputStream s)
		         throws IOException, ClassNotFoundException {
		       s.defaultReadObject();
		       setState(0); // reset to unlocked state
		     }
		   }
		
		   // The sync object does all the hard work. We just forward to it.
		   private final Sync sync = new Sync();
		
		   public void lock()                { sync.acquire(1); }
		   public boolean tryLock()          { return sync.tryAcquire(1); }
		   public void unlock()              { sync.release(1); }
		   public Condition newCondition()   { return sync.newCondition(); }
		   public boolean isLocked()         { return sync.isHeldExclusively(); }
		   public boolean hasQueuedThreads() { return sync.hasQueuedThreads(); }
		   public void lockInterruptibly() throws InterruptedException {
		     sync.acquireInterruptibly(1);
		   }
		   public boolean tryLock(long timeout, TimeUnit unit)
		       throws InterruptedException {
		     return sync.tryAcquireNanos(1, unit.toNanos(timeout));
		   }
		 }	
	这里有一个闩锁（latch）类，它除了只需要一个信号就可以触发外，它就像一个CountDownLatch。因为闩锁（latch）是非独占的，所以它使用共享的获取和释放方法。
		 class BooleanLatch {
		
		   private static class Sync extends AbstractQueuedSynchronizer {
		     boolean isSignalled() { return getState() != 0; }
		
		     protected int tryAcquireShared(int ignore) {
		       return isSignalled() ? 1 : -1;
		     }
		
		     protected boolean tryReleaseShared(int ignore) {
		       setState(1);
		       return true;
		     }
		   }
		
		   private final Sync sync = new Sync();
		   public boolean isSignalled() { return sync.isSignalled(); }
		   public void signal()         { sync.releaseShared(1); }
		   public void await() throws InterruptedException {
		     sync.acquireSharedInterruptibly(1);
		   }
		 }	
	
	
	
	类定义	：public abstract class AbstractQueuedSynchronizer extends AbstractOwnableSynchronizer implements java.io.Serializable
	实现接口	：Serializable
	嵌套类	：ConditionObject
------------------------------------------------------------------------------------------------------------------------------------------------------
Constructor Summary（构造器概要）：
	protected AbstractQueuedSynchronizer()
		创建初始同步状态为零的新AbstractQueuedSynchronizer实例。
		
Method Summary（方法概要）：
	acquire(int arg):final void 
		arg - 获取参数。这个值被传递给tryAcquire(int)，但不被解释，可以表示任何你喜欢的东西。
		以独占模式获取，忽略中断。通过调用至少一次tryAcquire(int)来实现，并在成功时返回。否则，线程会排队，可能会重复阻塞和取消阻塞，调用tryAcquire(int)直到成功。此方法可用于实现方法Lock.lock()。
	acquireInterruptibly(int arg):final void 
		arg - 获取参数。这个值被传递给tryAcquire(int)，但不被解释，可以表示任何你喜欢的东西。
		以独占模式获取，如果中断将中止。通过首先检查中断状态，然后至少调用一次tryAcquire(int)来实现，并在成功时返回。否则，线程将排队，可能会重复阻塞和取消阻塞，调用tryAcquire(int)直到成功或线程被中断。此方法可用于实现方法Lock.lockInterruptibly()。
		【Throws】：
			InterruptedException 如果当前线程被中断
	acquireShared(int arg):final void
		arg - 获取参数。这个值被传递给tryAcquire(int)，但不被解释，可以表示任何你喜欢的东西。 
		在共享模式下获取，忽略中断。通过首先调用至少一次tryAcquireShared(int)来实现，并在成功时返回。否则，线程会排队，可能会重复阻塞和取消阻塞，调用tryAcquireShared(int)直到成功。
	acquireSharedInterruptibly(int arg):final void 
		arg - 获取参数。这个值被传递给tryAcquire(int)，但不被解释，可以表示任何你喜欢的东西。 
		在共享模式下获取，如果中断将中止。通过首先检查中断状态，然后至少调用一次tryAcquire(int)来实现，并在成功时返回。否则，线程将排队，可能会重复阻塞和取消阻塞，调用tryAcquireShared(int)，直到成功或线程被中断。
		【Throws】：
			InterruptedException 如果当前线程被中断
	compareAndSetState(int expect, int update):protected final boolean 
		如果当前状态值等于预期值，则按原子将同步状态设置为给定的更新值。此操作具有volatile读写的内存语义。
		expect - 预期值
		update - 更新值
		如果成功，则返回true。false返回表示实际值不等于预期值。		
	getExclusiveQueuedThreads():final Collection<Thread> 
		返回包含在独占模式下等待获取的线程的集合。它与getQueuedThreads()具有相同的属性，只是它只返回由于独占获取而等待的线程。
	getFirstQueuedThread():final Thread 
		返回队列中的第一个（等待时间最长）线程，如果当前没有线程排队，则返回null。
		在这个实现中，这个操作通常以恒定的时间返回，但如果其他线程同时修改队列，则可能在争用时迭代。
	getQueuedThreads():final Collection<Thread> 
	getQueueLength():final int 
	getSharedQueuedThreads():final Collection<Thread> 
	getState():protected final int 
	getWaitingThreads(ConditionObject condition):final Collection<Thread> 
	getWaitQueueLength(ConditionObject condition):final int 
	hasContended():final boolean 
	hasQueuedPredecessors():final boolean 
	hasQueuedThreads():final boolean 
	hasWaiters(ConditionObject condition):final boolean 
	isHeldExclusively():protected boolean 
	isQueued(Thread thread):final boolean 
	owns(ConditionObject condition):final boolean 
	release(int arg):final boolean 
	releaseShared(int arg):final boolean 
	setState(int newState):protected final void 
	toString():String 
	tryAcquire(int arg):protected boolean 
	tryAcquireNanos(int arg, long nanosTimeout):final boolean 
	tryAcquireShared(int arg):protected int 
	tryAcquireSharedNanos(int arg, long nanosTimeout):final boolean 
	tryRelease(int arg):protected boolean 
	tryReleaseShared(int arg):protected boolean 
	
	
	
	
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
附录：
	1、注：文档中的△符号表示覆盖重写方法。	
	2、注：文档中的★符号表示抽象方法或者直接抛出UnsupportedOperationException异常的方法，总之没有实现具体功能代码的方法。
	3、loadFactor：负载因子（或称为负载系数），它等于“size/capacity”（即大小与容量的比率）。负载因子为0，表示空的hash表，0.5表示半满的散列表，依此类推。轻负载的散列表具有冲突少、适宜插入与查询的特点（但是使用Iterator迭代元素时比较慢）
	4、initialCapacity：初始容量。创建hash表时桶的数量，并发操作时ConcurrentHashMap是一次锁住一个桶。ConcurrentHashMap默认将hash表分为16个桶，诸如get、put、remove等常用操作只锁住当前需要用到的桶。这样，原来只能一个线程进入，现在却能同时有16个写线程执行，并发性能的提升是显而易见的。
	5、java并发一致性：
		对于一致性，可以分为从客户端和服务端两个不同的视角。从客户端来看，一致性主要指的是多并发访问时更新过的数据如何获取的问题。从服务端来看，则是更新如何复制分布到整个系统，以保证数据最终一致。一致性是因为有并发读写才有的问题，因此在理解一致性的问题时，一定要注意结合考虑并发读写的场景。
		从客户端角度，多进程并发访问时，更新过的数据在不同进程如何获取的不同策略，决定了不同的一致性。对于关系型数据库，要求更新过的数据能被后续的访问都能看到，这是“强一致性”。如果能容忍后续的部分或者全部访问不到，则是“弱一致性”。如果经过一段时间后要求能访问到更新后的数据，则是“最终一致性”。
	6、SkipList：跳表。	使用“空间换时间”的算法，令链表的每个结点不仅记录next结点位置，还可以按照level层级分别记录后继第level个结点。在查找时，首先按照层级查找，比如：当前跳表最高层级为3，即每个结点中不仅记录了next结点（层级1），还记录了next的next（层级2）、next的next的next（层级3）结点。现在查找一个结点，则从头结点开始先按高层级开始查：head->head的next的next的next->。。。直到找到结点或者当前结点q的值大于所查结点，则此时当前查找层级的q的前一节点p开始，在p~q之间进行下一层级（隔1个结点）的查找......直到最终迫近、找到结点。此法使用的就是“先大步查找确定范围，再逐渐缩小迫近”的思想进行的查找。	
	7、constant-time（常量时间）：意思就是无论n是什么值运算所花时间都一样。
	8、Linear-time（线性时间）：则是说多大n就花多少时间。
	9、Multiple-time（多项式时间）：则意味着随着n增大，n每增加1所花的时间增长越来越多。对于n^2-3这样一个多项式时间来说，n=2的时候可能只要花1的时间，甚至低于线性时间，但n=4的时候可能就要花13的时间了，可以想象再大一些这个数值会变得巨大。但是它又不及指数时间增长快(m^n)，且m^n不能写成多项式形式，所以它又和多项式时间有区别。	
	10、	Copy-On-Write：简称COW，是一种用于程序设计中的优化策略。其基本思路是，从一开始大家都在共享同一个内容，当某个人想要修改这个内容的时候，才会真正把内容Copy出去形成一个新的内容然后再改，这是一种延时懒惰策略。从JDK1.5开始Java并发包里提供了两个使用CopyOnWrite机制实现的并发容器,它们是CopyOnWriteArrayList和CopyOnWriteArraySet。CopyOnWrite容器非常有用，可以在非常多的并发场景中使用到。
		CopyOnWrite容器即写时复制的容器。通俗的理解是当我们往一个容器添加元素的时候，不直接往当前容器添加，而是先将当前容器进行Copy，复制出一个新的容器，然后新的容器里添加元素，添加完元素之后，再将原容器的引用指向新的容器。这样做的好处是我们可以对CopyOnWrite容器进行并发的读，而不需要加锁，因为当前容器不会添加任何元素。所以CopyOnWrite容器也是一种读写分离的思想，读和写不同的容器。
	
	11、Atomic（原子性）：是指一个操作是不可中断的。即使是在多个线程一起执行的时候，一个操作一旦开始，就不会被其它线程干扰。 
	12、Visibility(可见性）：是指当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看得到修改的值。 Java提供了volatile关键字来保证可见性。 
	13、Orderly（有序性）：指程序执行的顺序按照代码的先后顺序执行。在Java里面，可以通过volatile关键字来保证一定的“有序性”（具体原理在下一节讲述）。另外可以通过synchronized和Lock来保证有序性，很显然，synchronized和Lock保证每个时刻是有一个线程执行同步代码，相当于是让线程顺序执行同步代码，自然就保证了有序性
	14、CAS操作:指的是compareAndSwap操作。如果V（当前值）等于E（表示预期值），则将V的值设为N（表示新值）。若V值和E值不同，则说明已经有其他线程做了更新，则当前线程什么都不做。通俗的理解就是CAS操作需要我们提供一个期望值，当期望值与当前线程的变量值相同时，说明还没线程修改该值，当前线程可以进行修改，也就是执行CAS操作，但如果期望值与当前线程不符，则说明该值已被其他线程修改，此时不执行更新操作，但可以选择重新读取该变量再尝试再次修改该变量，也可以放弃操作。
	15、基元类型：编译器直接支持的数据类型称为基元类型(Primitive type)
	16、DoubleAccumulator、LongAccumulator、DoubleAdder、LongAdder是JDK1.8新增的部分，是对AtomicLong等类的改进。比如LongAccumulator与LongAdder在高并发环境下比AtomicLong更高效。	
		