-----------------------------------------Condition-----------------------------------------------------------------------------------------------------------------------------		
Condition：条件 【Since:1.5】
	Condition将Object监视方法（wait、notify和notifyAll）分解为不同的对象，通过将它们与任意Lock实现的使用相结合，使每个对象具有多个等待集的效果。当Lock替换了同步方法和语句的使用时，Condition替换了Object监视器方法的使用。
	Condition（也称为条件队列或条件变量）提供了一种方法，使一个线程暂停执行（“等待”），直到另一个线程通知某些状态条件现在为true。因为对这个共享状态信息的访问发生在不同的线程中，所以必须对它进行保护，所以某种形式的锁与条件相关联。等待条件提供的键属性是它按原子释放关联的锁的时候并挂起当前线程，就像Object.wait一样。
	Condition实例本质上绑定到锁。要获取特定Lock实例的Condition实例，请使用其newCondition()方法。
	例如，假设我们有一个有界缓冲区，它支持put和take方法。如果在空缓冲区上尝试执行take，则线程将阻塞，直到某个项变为可用；如果在饱和缓冲区上尝试执行put，则线程将阻塞，直到空间变为可用。我们希望保持等待，将线程放入（put）单独的等待集中，以便在缓冲区中有可用的项或空间时仅通知单个线程。这可以通过使用两个Condition实例来实现。
		 class BoundedBuffer {
		   final Lock lock = new ReentrantLock();
		   final Condition notFull  = lock.newCondition(); 
		   final Condition notEmpty = lock.newCondition(); 
		
		   final Object[] items = new Object[100];
		   int putptr, takeptr, count;
		
		   public void put(Object x) throws InterruptedException {
		     lock.lock();
		     try {
		       while (count == items.length)
		         notFull.await();
		       items[putptr] = x;
		       if (++putptr == items.length) putptr = 0;
		       ++count;
		       notEmpty.signal();
		     } finally {
		       lock.unlock();
		     }
		   }
		
		   public Object take() throws InterruptedException {
		     lock.lock();
		     try {
		       while (count == 0)
		         notEmpty.await();
		       Object x = items[takeptr];
		       if (++takeptr == items.length) takeptr = 0;
		       --count;
		       notFull.signal();
		       return x;
		     } finally {
		       lock.unlock();
		     }
		   }
		 }	
	（ArrayBlockingQueue类提供了此功能，因此没有必要实现此示例用法类。）	 
	Condition实现可以提供不同于Object监视器方法的行为和语义，例如保证通知的顺序，或者在执行通知时不需要锁。如果一个实现提供了这种专门的语义，那么该实现必须记录这些语义。
	请注意，Condition实例只是普通对象，它们本身可以用作同步语句中的目标，并且可以调用自己的监视器等待和通知方法。获取Condition实例的监视器锁或使用其监视器方法，与获取与该Condition关联的Lock或使用其等待和发信号方法没有指定的关系。为了避免混淆，建议不要以这种方式使用Condition实例，除非它们可能在自己的实现中。
	除非另有说明，否则为任何参数传递null将导致引发NullPointerException异常。
	
	Implementation Considerations（实施注意事项）：
	在等待某个Condition时，通常允许发生“虚假唤醒”，作为对底层平台语义的让步。这对大多数应用程序几乎没有实际影响，作为一个Condition，应该始终在循环中等待，测试正在等待的状态谓词。实现可以自由地消除虚假唤醒的可能性，但建议应用程序程序员始终假设它们可以发生，因此始终在循环中等待。
	条件等待的三种形式（中断、不可中断和定时）在某些平台上的易实现性和性能特征上可能有所不同。特别是，提供这些特性和维护特定的语义（如排序保证）可能很困难。此外，在所有平台上实现中断线程实际暂停的能力并不总是可行的。
	因此，一个实现不需要为所有三种形式的等待定义完全相同的保证或语义，也不需要支持线程实际暂停的中断。
	实现需要清楚地记录每个等待方法提供的语义和保证，并且当一个实现确实支持线程暂停的中断时，它必须遵守此接口中定义的中断语义。
	由于中断通常意味着取消，并且对中断的检查通常不频繁，因此实现可以优先响应中断而不是正常方法返回。即使可以证明中断发生在另一个可能解除线程阻塞的操作之后，也是如此。实现应该记录这种行为。
	


	接口定义	：public interface Condition
	接口实现类	：AbstractQueuedLongSynchronizer.ConditionObject, AbstractQueuedSynchronizer.ConditionObject
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
	await():void 
		使当前线程等待，直到发出信号或中断。
		与此Condition关联的锁被按原子释放，当前线程出于线程调度目的被禁用，并处于休眠状态，直到发生以下四种情况之一：
			● 其他线程为此Condition调用signal()方法，而当前线程恰好被选为要唤醒的线程；或
			● 其他线程为此Condition调用signalAll()方法；或者
			● 其他线程中断当前线程，并且支持中断线程挂起；或
			● “虚假唤醒”（spurious wakeup）发生。  
		在所有情况下，此方法返回之前，当前线程必须重新获取与此条件关联的锁。当线程返回时，它保证持有这个锁。
		如果当前线程：
			● 在进入此方法时是否设置了中断状态；或
			● 在等待时中断，支持线程暂停中断，
		然后抛出InterruptedException，并清除当前线程的中断状态。在第一种情况下，没有规定在释放锁之前是否进行中断判断。
		实施注意事项：
		调用此方法时，假定当前线程持有与此Condition关联的锁。由实现来决定是否是这种情况，如果不是，如何响应。通常，将引发异常（例如IllegalMonitorStateException），并且实现必须记录该事实。
		实现可以支持响应中断，而不是响应信号的正常方法返回。在这种情况下，实现必须确保将信号重定向到另一个等待线程（如果有）。
		【Throws】：
			InterruptedException 如果当前线程被中断（并且支持中断线程暂停）
	await(long time, TimeUnit unit):boolean  throws InterruptedException
		time - 最长等待时间
		unit - time参数时间单位
		使当前线程等待，直到发出信号或中断，或指定的等待时间过去。此方法在行为上等效于：
			awaitNanos(unit.toNanos(time)) > 0
		如果在从方法返回之前检测到等待时间已过，则为false，否则为true。
		【Throws】：
			InterruptedException 如果当前线程被中断（并且支持中断线程暂停） 
	awaitNanos(long nanosTimeout):long       throws InterruptedException
		nanosTimeout - 等待的最长时间，以纳秒为单位。
		使当前线程等待，直到发出信号或中断，或指定的等待时间已过。
		与此Condition关联的锁被按原子释放，当前线程出于线程调度目的被禁用，并处于休眠状态，直到发生以下五种情况之一：
			● 其他线程为此Condition调用signal()方法，而当前线程恰好被选为要唤醒的线程；或
			● 其他线程为此Condition调用signalAll()方法；或者
			● 其他线程中断当前线程，并且支持中断线程挂起；或 
			● 经过指定的等待时间；或
			● “虚假唤醒”（spurious wakeup）发生。
		在所有情况下，此方法返回之前，当前线程必须重新获取与此条件关联的锁。当线程返回时，它保证持有这个锁。
		如果当前线程：
			● 在进入此方法时是否设置了中断状态；或
			● 在等待时中断，支持线程暂停中断，
		然后抛出InterruptedException，并清除当前线程的中断状态。在第一种情况下，没有规定在释放锁之前是否进行中断判断。
		该方法返回给定返回时提供的nanosTimeout值的剩余等待纳秒数的估计值，或者如果超时，则返回小于或等于零的值。此值可用于确定在等待返回但等待条件仍不保持的情况下是否重新等待以及重新等待的时间。该方法的典型用途如下：
			 boolean aMethod(long timeout, TimeUnit unit) {
			   long nanos = unit.toNanos(timeout);
			   lock.lock();
			   try {
			     while (!conditionBeingWaitedFor()) {
			       if (nanos <= 0L)
			         return false;
			       nanos = theCondition.awaitNanos(nanos);
			     }
			     // ...
			   } finally {
			     lock.unlock();
			   }
			 }	
		设计说明：此方法需要纳秒参数，以避免在报告剩余时间时截断错误。这样的精度损失将使程序员难以确保总等待时间不会系统地短于发生重新等待时指定的时间。	
		实施注意事项：
		调用此方法时，假定当前线程持有与此Condition关联的锁。由实现来决定是否是这种情况，如果不是，如何响应。通常，将引发异常（例如IllegalMonitorStateException），并且实现必须记录该事实。
		实现可以支持响应中断，而不是响应信号的正常方法返回，超过指定等待时间。在这两种情况下，实现必须确保将信号重定向到另一个等待线程（如果有）。
		【Throws】：
			InterruptedException 如果当前线程被中断（并且支持中断线程暂停） 
	awaitUninterruptibly():void 
		使当前线程等待直到发出信号。
		与此Condition关联的锁被按原子释放，当前线程出于线程调度目的被禁用，并处于休眠状态，直到发生以下三种情况之一：
			● 其他线程为此Condition调用signal()方法，而当前线程恰好被选为要唤醒的线程；或
			● 其他线程为此Condition调用signalAll()方法；或者
			● “虚假唤醒”（spurious wakeup）发生。
		在所有情况下，此方法返回之前，当前线程必须重新获取与此条件关联的锁。当线程返回时，它保证持有这个锁。
		如果当前线程进入此方法时被设置为中断状态，或者在等待时被中断，则它将继续等待直到发出信号。当它最终从这个方法返回时，它的中断状态仍将被设置。
		实施注意事项：
		调用此方法时，假定当前线程持有与此Condition关联的锁。由实现来决定是否是这种情况，如果不是，如何响应。通常，将引发异常（例如IllegalMonitorStateException），并且实现必须记录该事实。
	awaitUntil(Date deadline):boolean        throws InterruptedException
		deadline - 等待的绝对时间
		使当前线程等待，直到发出信号或中断，或者指定的截止时间已过。
		与此Condition关联的锁被按原子释放，当前线程出于线程调度目的被禁用，并处于休眠状态，直到发生以下五种情况之一：
			● 其他线程为此Condition调用signal()方法，而当前线程恰好被选为要唤醒的线程；或
			● 其他线程为此Condition调用signalAll()方法；或者
			● 其他线程中断当前线程，并且支持中断线程挂起；或 
			● 规定的截止日期已过；或
			● “虚假唤醒”（spurious wakeup）发生。
		在所有情况下，此方法返回之前，当前线程必须重新获取与此条件关联的锁。当线程返回时，它保证持有这个锁。
		如果当前线程：
			● 在进入此方法时是否设置了中断状态；或
			● 在等待时中断，支持线程暂停中断，
		然后抛出InterruptedException，并清除当前线程的中断状态。在第一种情况下，没有规定在释放锁之前是否进行中断判断。
		返回值指示截止时间是否已过，可以使用如下方式：
			 boolean aMethod(Date deadline) {
			   boolean stillWaiting = true;
			   lock.lock();
			   try {
			     while (!conditionBeingWaitedFor()) {
			       if (!stillWaiting)
			         return false;
			       stillWaiting = theCondition.awaitUntil(deadline);
			     }
			     // ...
			   } finally {
			     lock.unlock();
			   }
			 }	
		实施注意事项：
		调用此方法时，假定当前线程持有与此Condition关联的锁。由实现来决定是否是这种情况，如果不是，如何响应。通常，将引发异常（例如IllegalMonitorStateException），并且实现必须记录该事实。
		实现可以支持响应中断，而不是响应信号的正常方法返回，超过指定截止时间。在这两种情况下，实现必须确保将信号重定向到另一个等待线程（如果有）。
		如果返回时截止日期已过，则为false，否则为true。	
		【Throws】：
			InterruptedException 如果当前线程被中断（并且支持中断线程暂停） 	
	signal():void 
		唤醒一个等待线程。
		如果有线程正在等待，那么将选择一个线程来唤醒。然后该线程必须重新获取锁，然后才能从wait返回。
		实施注意事项：
		当调用此方法时，实现可能（通常是这样）要求当前线程持有与此Condition关联的锁。实现必须记录此前提条件以及未持有锁时采取的任何操作。通常，将引发一个异常，如IllegalMonitorStateException。
	signalAll():void 
		唤醒所有等待的线程。
		如果有线程在等待，那么它们都会被唤醒。每个线程必须重新获取锁，然后才能从等待状态返回。
		实施注意事项：
		当调用此方法时，实现可能（通常是这样）要求当前线程持有与此Condition关联的锁。实现必须记录此前提条件以及未持有锁时采取的任何操作。通常，将引发一个异常，如IllegalMonitorStateException。





























