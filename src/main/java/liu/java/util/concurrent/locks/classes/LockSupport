----------------------------------------LockSupport--------------------------------------------------------------------------------------------------------------
LockSupport：锁支持。【Since:1.6】
	用于创建锁和其他同步类的基本线程阻塞基元。
	这个类与使用它的每个线程关联一个许可证（在信号量（Semaphore）类的意义上）。如果许可证有效，调用park将立即返回，在此过程中使用许可证；否则可能会被阻塞。如果许可证尚不可用，则调用unpark可使其可用。（与信号量（Semaphore）不同，许可证不会累积。最多有一个。）
	方法park和unpark提供了有效的阻塞和解除阻塞线程的方法，这些线程不会遇到导致不推荐使用的方法Thread.suspend和Thread.resume不可用的问题：由于许可证，在一个调用park的线程和另一个试图解除阻塞的线程之间的争用将保持活跃。此外，如果调用方的线程被中断，并且支持超时版本，则park将返回。park方法也可以在任何其他时间返回，因为“没有理由”，因此通常必须在返回时重新检查条件的循环中调用。从这个意义上说，park是对“繁忙等待”的优化，它不会浪费太多时间，但必须与unpark进行配对才能有效。
	三种形式的park都支持blocker对象参数。当线程被阻塞时会记录此对象，以允许监视和诊断工具识别线程被阻塞的原因。（此类工具可以使用getBlocker(Thread)方法访问拦截器（Blocker））。强烈建议使用这些形式而不是没有此参数的原始形式。作为锁实现中的拦截器提供的正常参数是这样的。
	这些方法被设计成用于创建更高级别的同步实用程序的工具，对于大多数并发控制应用程序来说它们本身并不有用。park方法仅适用于以下结构：
		while (!canProceed()) { ... LockSupport.park(this); }
	如果在调用park之前既不能继续也不能进行任何其他操作，则会导致锁定或阻塞。因为每个线程只关联一个许可证，所以任何对park的中间使用都可能干扰其预期效果。
	样板使用情况。下面是先进先出（first-in-first-out）不可重入锁类的描述：
		class FIFOMutex {
		   private final AtomicBoolean locked = new AtomicBoolean(false);
		   private final Queue<Thread> waiters
		     = new ConcurrentLinkedQueue<Thread>();
		
		   public void lock() {
		     boolean wasInterrupted = false;
		     Thread current = Thread.currentThread();
		     waiters.add(current);
		
		     // Block while not first in queue or cannot acquire lock
		     while (waiters.peek() != current ||
		            !locked.compareAndSet(false, true)) {
		       LockSupport.park(this);
		       if (Thread.interrupted()) // ignore interrupts while waiting
		         wasInterrupted = true;
		     }
		
		     waiters.remove();
		     if (wasInterrupted)          // reassert interrupt status on exit
		       current.interrupt();
		   }
		
		   public void unlock() {
		     locked.set(false);
		     LockSupport.unpark(waiters.peek());
		   }
		 }	
		 
		 
	
	类定义	：public class LockSupport
------------------------------------------------------------------------------------------------------------------------------------------------------
Method Summary（方法概要）：
	getBlocker(Thread t):static Object 
		t - 线程
		返回为尚未解除阻止的park方法的最新调用提供的拦截器（blocker）对象，如果未被阻塞，则返回null。返回的值只是一个瞬间快照————线程可能已经在另一个拦截器对象上解除阻塞或阻塞。
		返回拦截器（blocker）。
		【Throws】：
			NullPointerException 如果参数为null
	park():static void 
		除非许可证可用，否则出于线程调度目的禁用当前线程。
		如果许可证可用，那么它将被使用，调用将立即返回；否则，当前线程将因线程调度而禁用，并处于休眠状态，直到发生以下三种情况之一：
			● 其他线程以当前线程为目标调用unpark；或
			● 其他线程中断当前线程；或
			● 调用错误地（也就是说，没有任何原因）返回。
		此方法不报告其中哪一个导致该方法返回。调用方应该首先重新检查导致线程停止（park）的条件。例如，调用方还可以在返回时确定线程的中断状态。
	park(Object blocker):static void 
		blocker - 负责此线程驻留的同步对象（拦截器）
		除非许可证可用，否则出于线程调度目的禁用当前线程。
		如果许可证可用，那么它将被使用，调用将立即返回；否则，当前线程将因线程调度而禁用，并处于休眠状态，直到发生以下三种情况之一：
			● 其他线程以当前线程为目标调用unpark；或
			● 其他线程中断当前线程；或
			● 调用错误地（也就是说，没有任何原因）返回。
		此方法不报告其中哪一个导致该方法返回。调用方应该首先重新检查导致线程停止（park）的条件。例如，调用方还可以在返回时确定线程的中断状态。
	parkNanos(Object blocker, long nanos):static void 
		blocker - 负责此线程驻留的同步对象（拦截器）
		nanos - 等待的最大纳秒数
		除非许可证可用，否则出于线程调度目的禁用当前线程，直到指定的等待时间。
		如果许可证可用，那么它将被使用，调用将立即返回；否则，出于线程调度目的，当前线程将被禁用，并处于休眠状态，直到发生以下四种情况之一：
			● 其他线程以当前线程为目标调用unpark；或
			● 其他线程中断当前线程；或
			● 经过指定的等待时间；或
			● 调用错误地（也就是说，没有任何原因）返回。
		此方法不报告其中哪一个导致该方法返回。调用方应该首先重新检查导致线程停止（park）的条件。例如，线程的中断状态，或者返回时经过的时间。
	parkNanos(long nanos):static void 
		nanos - 等待的最大纳秒数
		除非许可证可用，否则出于线程调度目的禁用当前线程，直到指定的等待时间。
		如果许可证可用，那么它将被使用，调用将立即返回；否则，出于线程调度目的，当前线程将被禁用，并处于休眠状态，直到发生以下四种情况之一：
			● 其他线程以当前线程为目标调用unpark；或
			● 其他线程中断当前线程；或
			● 经过指定的等待时间；或
			● 调用错误地（也就是说，没有任何原因）返回。
		此方法不报告其中哪一个导致该方法返回。调用方应该首先重新检查导致线程停止（park）的条件。例如，线程的中断状态，或者返回时经过的时间。
	parkUntil(Object blocker, long deadline):static void 
		blocker - 负责此线程驻留的同步对象（拦截器）
		除非许可证可用，否则出于线程调度目的禁用当前线程，直到指定的最后期限。
		如果许可证可用，那么它将被使用，调用将立即返回；否则，出于线程调度目的，当前线程将被禁用，并处于休眠状态，直到发生以下四种情况之一：
			● 其他线程以当前线程为目标调用unpark；或
			● 其他线程中断当前线程；或
			● 经过指定的等待时间；或
			● 调用错误地（也就是说，没有任何原因）返回。
		此方法不报告其中哪一个导致该方法返回。调用方应该首先重新检查导致线程停止（park）的条件。调用方还可以确定线程的中断状态，或者返回时的当前时间。
	parkUntil(long deadline):static void 
		blocker - 负责此线程驻留的同步对象（拦截器）
		deadline - 绝对时间，等待到从纪元开始的毫秒数。
		为了线程调度的目的禁用当前线程，直到指定的最后期限，除非许可证可用。
		如果许可证可用，那么它将被使用，调用将立即返回；否则，出于线程调度目的，当前线程将被禁用，并处于休眠状态，直到发生以下四种情况之一：
			● 其他线程以当前线程为目标调用unpark；或
			● 其他线程中断当前线程；或
			● 经过指定的等待时间；或
			● 调用错误地（也就是说，没有任何原因）返回。
		此方法不报告其中哪一个导致该方法返回。调用方应该首先重新检查导致线程停止（park）的条件。调用方还可以确定线程的中断状态，或者返回时的当前时间。
	unpark(Thread thread):static void 
		thread - 要unpark的线程，或者为null，在这种情况下，此操作无效。
		为给定线程提供许可证（如果该线程尚不可用）。如果线程在停止时被阻塞，那么它将被解锁。否则，它的下一个park调用将保证不会被阻塞。如果给定的线程尚未启动，则不能保证此操作完全有效。
	
	
	
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
附录：
	1、注：文档中的△符号表示覆盖重写方法。	
	2、注：文档中的★符号表示抽象方法或者直接抛出UnsupportedOperationException异常的方法，总之没有实现具体功能代码的方法。
	3、loadFactor：负载因子（或称为负载系数），它等于“size/capacity”（即大小与容量的比率）。负载因子为0，表示空的hash表，0.5表示半满的散列表，依此类推。轻负载的散列表具有冲突少、适宜插入与查询的特点（但是使用Iterator迭代元素时比较慢）
	4、initialCapacity：初始容量。创建hash表时桶的数量，并发操作时ConcurrentHashMap是一次锁住一个桶。ConcurrentHashMap默认将hash表分为16个桶，诸如get、put、remove等常用操作只锁住当前需要用到的桶。这样，原来只能一个线程进入，现在却能同时有16个写线程执行，并发性能的提升是显而易见的。
	5、java并发一致性：
		对于一致性，可以分为从客户端和服务端两个不同的视角。从客户端来看，一致性主要指的是多并发访问时更新过的数据如何获取的问题。从服务端来看，则是更新如何复制分布到整个系统，以保证数据最终一致。一致性是因为有并发读写才有的问题，因此在理解一致性的问题时，一定要注意结合考虑并发读写的场景。
		从客户端角度，多进程并发访问时，更新过的数据在不同进程如何获取的不同策略，决定了不同的一致性。对于关系型数据库，要求更新过的数据能被后续的访问都能看到，这是“强一致性”。如果能容忍后续的部分或者全部访问不到，则是“弱一致性”。如果经过一段时间后要求能访问到更新后的数据，则是“最终一致性”。
	6、SkipList：跳表。	使用“空间换时间”的算法，令链表的每个结点不仅记录next结点位置，还可以按照level层级分别记录后继第level个结点。在查找时，首先按照层级查找，比如：当前跳表最高层级为3，即每个结点中不仅记录了next结点（层级1），还记录了next的next（层级2）、next的next的next（层级3）结点。现在查找一个结点，则从头结点开始先按高层级开始查：head->head的next的next的next->。。。直到找到结点或者当前结点q的值大于所查结点，则此时当前查找层级的q的前一节点p开始，在p~q之间进行下一层级（隔1个结点）的查找......直到最终迫近、找到结点。此法使用的就是“先大步查找确定范围，再逐渐缩小迫近”的思想进行的查找。	
	7、constant-time（常量时间）：意思就是无论n是什么值运算所花时间都一样。
	8、Linear-time（线性时间）：则是说多大n就花多少时间。
	9、Multiple-time（多项式时间）：则意味着随着n增大，n每增加1所花的时间增长越来越多。对于n^2-3这样一个多项式时间来说，n=2的时候可能只要花1的时间，甚至低于线性时间，但n=4的时候可能就要花13的时间了，可以想象再大一些这个数值会变得巨大。但是它又不及指数时间增长快(m^n)，且m^n不能写成多项式形式，所以它又和多项式时间有区别。	
	10、	Copy-On-Write：简称COW，是一种用于程序设计中的优化策略。其基本思路是，从一开始大家都在共享同一个内容，当某个人想要修改这个内容的时候，才会真正把内容Copy出去形成一个新的内容然后再改，这是一种延时懒惰策略。从JDK1.5开始Java并发包里提供了两个使用CopyOnWrite机制实现的并发容器,它们是CopyOnWriteArrayList和CopyOnWriteArraySet。CopyOnWrite容器非常有用，可以在非常多的并发场景中使用到。
		CopyOnWrite容器即写时复制的容器。通俗的理解是当我们往一个容器添加元素的时候，不直接往当前容器添加，而是先将当前容器进行Copy，复制出一个新的容器，然后新的容器里添加元素，添加完元素之后，再将原容器的引用指向新的容器。这样做的好处是我们可以对CopyOnWrite容器进行并发的读，而不需要加锁，因为当前容器不会添加任何元素。所以CopyOnWrite容器也是一种读写分离的思想，读和写不同的容器。
	
	11、Atomic（原子性）：是指一个操作是不可中断的。即使是在多个线程一起执行的时候，一个操作一旦开始，就不会被其它线程干扰。 
	12、Visibility(可见性）：是指当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看得到修改的值。 Java提供了volatile关键字来保证可见性。 
	13、Orderly（有序性）：指程序执行的顺序按照代码的先后顺序执行。在Java里面，可以通过volatile关键字来保证一定的“有序性”（具体原理在下一节讲述）。另外可以通过synchronized和Lock来保证有序性，很显然，synchronized和Lock保证每个时刻是有一个线程执行同步代码，相当于是让线程顺序执行同步代码，自然就保证了有序性
	14、CAS操作:指的是compareAndSwap操作。如果V（当前值）等于E（表示预期值），则将V的值设为N（表示新值）。若V值和E值不同，则说明已经有其他线程做了更新，则当前线程什么都不做。通俗的理解就是CAS操作需要我们提供一个期望值，当期望值与当前线程的变量值相同时，说明还没线程修改该值，当前线程可以进行修改，也就是执行CAS操作，但如果期望值与当前线程不符，则说明该值已被其他线程修改，此时不执行更新操作，但可以选择重新读取该变量再尝试再次修改该变量，也可以放弃操作。
	15、基元类型：编译器直接支持的数据类型称为基元类型(Primitive type)
	16、DoubleAccumulator、LongAccumulator、DoubleAdder、LongAdder是JDK1.8新增的部分，是对AtomicLong等类的改进。比如LongAccumulator与LongAdder在高并发环境下比AtomicLong更高效。
	17、reentrant lock：重入锁（递归锁）。就是在同一线程上该锁是可重入的（锁定多次），对于不同线程则相当于普通的互斥锁。
	18、Mutex lock：互斥锁。用于控制多个线程对他们之间共享资源互斥访问的一个信号量。也就是说是为了避免多个线程在某一时刻同时操作一个共享资源。例如线程池中的有多个空闲线程和一个任务队列。任何是一个线程都要使用互斥锁互斥访问任务队列，以避免多个线程同时访问任务队列以发生错乱。在某一时刻，只有一个线程可以获取互斥锁，在释放互斥锁之前其他线程都不能获取该互斥锁。如果其他线程想要获取这个互斥锁，那么这个线程只能以阻塞方式进行等待。
	19、condition lock：条件锁。就是所谓的条件变量，某一个线程因为某个条件为满足时可以使用条件变量使改程序处于阻塞状态。一旦条件满足以“信号量”的方式唤醒一个因为该条件而被阻塞的线程。最为常见就是在线程池中，起初没有任务时任务队列为空，此时线程池中的线程因为“任务队列为空”这个条件处于阻塞状态。一旦有任务进来，就会以信号量的方式唤醒一个线程来处理这个任务。
	20、Spin lock：自旋锁。是一种busy-waiting的锁。也就是说，如果T1正在使用自旋锁，而T2也去申请这个自旋锁，此时T2肯定得不到这个自旋锁。与互斥锁相反的是，此时运行T2的处理器core2会一直不断地循环检查锁是否可用（自旋锁请求），直到获取到这个自旋锁为止。从“自旋锁”的名字也可以看出来，如果一个线程想要获取一个被使用的自旋锁，那么它会一致占用CPU请求这个自旋锁使得CPU不能去做其他的事情，直到获取这个锁为止，这就是“自旋”的含义。当发生阻塞时，互斥锁可以让CPU去处理其他的任务；而自旋锁让CPU一直不断循环请求获取这个锁。通过两个含义的对比可以我们知道“自旋锁”是比较耗费CPU的。

		