----------------------------------------AtomicReferenceFieldUpdater<T,V>--------------------------------------------------------------------------------------------------------------
AtomicReferenceFieldUpdater<T,V>：原子引用字段更新器。【Since:1.5】
	<T> 包含可更新字段的对象的类型
	<V> 字段的类型
	一种基于反射的实用程序，可以对指定类的指定volatile引用字段进行原子更新。此类设计用于原子数据结构，其中同一节点的多个引用字段独立地服从原子更新。例如，树节点可以声明为
		 class Node {
		   private volatile Node left, right;
		
		   private static final AtomicReferenceFieldUpdater<Node, Node> leftUpdater =
		     AtomicReferenceFieldUpdater.newUpdater(Node.class, Node.class, "left");
		   private static AtomicReferenceFieldUpdater<Node, Node> rightUpdater =
		     AtomicReferenceFieldUpdater.newUpdater(Node.class, Node.class, "right");
		
		   Node getLeft() { return left; }
		   boolean compareAndSetLeft(Node expect, Node update) {
		     return leftUpdater.compareAndSet(this, expect, update);
		   }
		   // ... and so on
		 }	
	注意，这个类中compareAndSet方法的的原子性保证要弱。因为这个类不能确保字段的所有使用都适合原子访问，所以它只能保证原子性，只与compareAndSet的其他调用有关，并在同一个更新程序上设置。
	
	
	类定义	：public abstract class AtomicReferenceFieldUpdater<T,V>
------------------------------------------------------------------------------------------------------------------------------------------------------
Constructor Summary（构造器概要）：
	protected AtomicReferenceFieldUpdater()
		protected do-nothing构造函数，供子类使用。


Method Summary（方法概要）：
	newUpdater(Class<U> tclass,Class<W> vclass,String fieldName):static <U,W> AtomicReferenceFieldUpdater<U,W> 
		U - tclass实例类型
		W - vclass实例类型
		tclass - 持有字段的对象的类
		vclass - 字段的类
		fieldName - 要更新的字段的名称
		为具有给定字段的对象创建并返回更新器。需要Class参数来检查反射类型和泛型类型是否匹配。	
		【Throws】：
			ClassCastException 如果字段类型错误
			IllegalArgumentException 如果字段不是volatile整数类型
			RuntimeException 如果类不包含该字段或者是错误类型，则使用嵌套的基于反射的异常，或者根据Java语言访问控制，该字段不能被调用方访问。
	accumulateAndGet(T obj, V x,BinaryOperator<V> accumulatorFunction):final V 
		obj - 要获取和设置其字段的对象
		x - accumulatorFunction的一个计算参数，它的另一个参数是obj的当前值。
		accumulatorFunction - 带两个参数的无副作用函数
		按原子更新此更新器管理的给定对象的字段，将给定函数accumulatorFunction应用于obj当前值和给定值x，并返回更新的值。该函数应该是无副作用的，因为当尝试的更新由于线程间的争用而失败时，它可能会被重新应用。函数的第一个参数是obj当前值，第二个参数是给定的x。
		返回更新后的值。
	compareAndSet(T obj, V expect, V update):abstract boolean 
		obj - 要获取和设置其字段的对象
		expect - 预期值
		update - 更新值
		★ 如果当前值==预期值，则按原子将此更新器管理的给定对象的字段设置为给定的更新值。对于对compareAndSet和set的其他调用，此方法保证为原子方法，但不一定针对字段中的其他更改。
		如果成功，则返回true。
	get(T obj):abstract V 
		obj - 要获取和设置其字段的对象
		★ 获取此更新器管理的给定对象的字段中保存的当前值。	
		返回当前值
	getAndAccumulate(T obj, V x,BinaryOperator<V> accumulatorFunction):final V 
		obj - 要获取和设置其字段的对象
		x - accumulatorFunction的一个计算参数，它的另一个参数是obj的当前值。
		accumulatorFunction - 带两个参数的无副作用函数
		按原子更新此更新器管理的给定对象的字段，将给定函数accumulatorFunction应用于obj当前值和给定值x，并返上一个值。该函数应该是无副作用的，因为当尝试的更新由于线程间的争用而失败时，它可能会被重新应用。函数的第一个参数是obj当前值，第二个参数是给定的x。
		返回上一个值（即更新前的值）。
	getAndSet(T obj, V newValue):V 
		obj - 要获取和设置其字段的对象
		newValue - 新值
		按原子将此更新器管理的给定对象的字段设置为给定值并返回旧值。
		返回旧值（即设置前的值）。
	getAndUpdate(T obj, UnaryOperator<V> updateFunction):final V 
		obj - 要获取和设置其字段的对象
		updateFunction - 无副作用更新函数
		应用给定函数按原子方式更新此更新器管理的给定对象的字段，并返回上一个值。该函数应该是无副作用的，因为当尝试的更新由于线程间的争用而失败时，它可能会被重新应用。
		返回上一个值（即更新前的值）。
	lazySet(T obj, V newValue):abstract void 
		obj - 要获取和设置其字段的对象
		newValue - 新值
		★ 最终将此更新器管理的给定对象的字段设置为给定的更新值。	
	set(T obj, V newValue):abstract void 
		obj - 要获取和设置其字段的对象
		newValue - 新值
		★ 将此更新器管理的给定对象的字段设置为给定的更新值。对于随后调用compareAndSet，此操作保证作为volatile存储。
	updateAndGet(T obj, UnaryOperator<V> updateFunction):final V 
		obj - 要获取和设置其字段的对象
		updateFunction - 无副作用更新函数
		应用给定函数按原子方式更新此更新器管理的给定对象的字段，并返回更新值。该函数应该是无副作用的，因为当尝试的更新由于线程间的争用而失败时，它可能会被重新应用。
		返回更新值（即更新后的值）。
	weakCompareAndSet(T obj, V expect, V update):abstract boolean 
		obj - 要获取和设置其字段的对象
		expect - 预期值
		update - 更新值
		★ 如果当前值==预期值，则自动将此更新器管理的给定对象的字段设置为给定的更新值。对于对compareAndSet和set的其他调用，此方法保证为原子方法，但不一定针对字段中的其他更改。
		可能会错误地失败，并且不提供顺序保证，因此compareAndSet很少有适当的替代方案。
		如果成功，则返回true。
	
	
	
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
附录：
	1、注：文档中的△符号表示覆盖重写方法。	
	2、注：文档中的★符号表示抽象方法或者直接抛出UnsupportedOperationException异常的方法，总之没有实现具体功能代码的方法。
	3、loadFactor：负载因子（或称为负载系数），它等于“size/capacity”（即大小与容量的比率）。负载因子为0，表示空的hash表，0.5表示半满的散列表，依此类推。轻负载的散列表具有冲突少、适宜插入与查询的特点（但是使用Iterator迭代元素时比较慢）
	4、initialCapacity：初始容量。创建hash表时桶的数量，并发操作时ConcurrentHashMap是一次锁住一个桶。ConcurrentHashMap默认将hash表分为16个桶，诸如get、put、remove等常用操作只锁住当前需要用到的桶。这样，原来只能一个线程进入，现在却能同时有16个写线程执行，并发性能的提升是显而易见的。
	5、java并发一致性：
		对于一致性，可以分为从客户端和服务端两个不同的视角。从客户端来看，一致性主要指的是多并发访问时更新过的数据如何获取的问题。从服务端来看，则是更新如何复制分布到整个系统，以保证数据最终一致。一致性是因为有并发读写才有的问题，因此在理解一致性的问题时，一定要注意结合考虑并发读写的场景。
		从客户端角度，多进程并发访问时，更新过的数据在不同进程如何获取的不同策略，决定了不同的一致性。对于关系型数据库，要求更新过的数据能被后续的访问都能看到，这是“强一致性”。如果能容忍后续的部分或者全部访问不到，则是“弱一致性”。如果经过一段时间后要求能访问到更新后的数据，则是“最终一致性”。
	6、SkipList：跳表。	使用“空间换时间”的算法，令链表的每个结点不仅记录next结点位置，还可以按照level层级分别记录后继第level个结点。在查找时，首先按照层级查找，比如：当前跳表最高层级为3，即每个结点中不仅记录了next结点（层级1），还记录了next的next（层级2）、next的next的next（层级3）结点。现在查找一个结点，则从头结点开始先按高层级开始查：head->head的next的next的next->。。。直到找到结点或者当前结点q的值大于所查结点，则此时当前查找层级的q的前一节点p开始，在p~q之间进行下一层级（隔1个结点）的查找......直到最终迫近、找到结点。此法使用的就是“先大步查找确定范围，再逐渐缩小迫近”的思想进行的查找。	
	7、constant-time（常量时间）：意思就是无论n是什么值运算所花时间都一样。
	8、Linear-time（线性时间）：则是说多大n就花多少时间。
	9、Multiple-time（多项式时间）：则意味着随着n增大，n每增加1所花的时间增长越来越多。对于n^2-3这样一个多项式时间来说，n=2的时候可能只要花1的时间，甚至低于线性时间，但n=4的时候可能就要花13的时间了，可以想象再大一些这个数值会变得巨大。但是它又不及指数时间增长快(m^n)，且m^n不能写成多项式形式，所以它又和多项式时间有区别。	
	10、	Copy-On-Write：简称COW，是一种用于程序设计中的优化策略。其基本思路是，从一开始大家都在共享同一个内容，当某个人想要修改这个内容的时候，才会真正把内容Copy出去形成一个新的内容然后再改，这是一种延时懒惰策略。从JDK1.5开始Java并发包里提供了两个使用CopyOnWrite机制实现的并发容器,它们是CopyOnWriteArrayList和CopyOnWriteArraySet。CopyOnWrite容器非常有用，可以在非常多的并发场景中使用到。
		CopyOnWrite容器即写时复制的容器。通俗的理解是当我们往一个容器添加元素的时候，不直接往当前容器添加，而是先将当前容器进行Copy，复制出一个新的容器，然后新的容器里添加元素，添加完元素之后，再将原容器的引用指向新的容器。这样做的好处是我们可以对CopyOnWrite容器进行并发的读，而不需要加锁，因为当前容器不会添加任何元素。所以CopyOnWrite容器也是一种读写分离的思想，读和写不同的容器。
	
	11、Atomic（原子性）：是指一个操作是不可中断的。即使是在多个线程一起执行的时候，一个操作一旦开始，就不会被其它线程干扰。 
	12、Visibility(可见性）：是指当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看得到修改的值。 Java提供了volatile关键字来保证可见性。 
	13、Orderly（有序性）：指程序执行的顺序按照代码的先后顺序执行。在Java里面，可以通过volatile关键字来保证一定的“有序性”（具体原理在下一节讲述）。另外可以通过synchronized和Lock来保证有序性，很显然，synchronized和Lock保证每个时刻是有一个线程执行同步代码，相当于是让线程顺序执行同步代码，自然就保证了有序性
	14、CAS操作:指的是compareAndSwap操作。如果V（当前值）等于E（表示预期值），则将V的值设为N（表示新值）。若V值和E值不同，则说明已经有其他线程做了更新，则当前线程什么都不做。通俗的理解就是CAS操作需要我们提供一个期望值，当期望值与当前线程的变量值相同时，说明还没线程修改该值，当前线程可以进行修改，也就是执行CAS操作，但如果期望值与当前线程不符，则说明该值已被其他线程修改，此时不执行更新操作，但可以选择重新读取该变量再尝试再次修改该变量，也可以放弃操作。
	15、基元类型：编译器直接支持的数据类型称为基元类型(Primitive type)
	16、AtomicIntegerFieldUpdater：是用来更新某一个实例对象里面的int属性的。	它的用法规则如下：
		● 字段必须是volatile类型的，在线程之间共享变量时保证立即可见
		● 字段的描述类型（修饰符public/protected/default/private）是与调用者与操作对象字段的关系一致。也就是说调用者能够直接操作对象字段，那么就可以反射进行原子操作。
		● 对于父类的字段，子类是不能直接操作的，尽管子类可以访问父类的字段。
		● 只能是实例变量，不能是类变量，也就是说不能加static关键字。
		● 只能是可修改变量，不能使final变量，因为final的语义就是不可修改。
		● 对于AtomicIntegerFieldUpdater和AtomicLongFieldUpdater只能修改int/long类型的字段，不能修改其包装类型（Integer/Long）。如果要修改包装类型就需要使用AtomicReferenceFieldUpdater。
