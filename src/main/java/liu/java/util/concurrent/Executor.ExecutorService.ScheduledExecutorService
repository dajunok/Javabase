-----------------------------------------ExecutorService-----------------------------------------------------------------------------------------------------------------------------		
ScheduledExecutorService：预定执行器服务接口 【Since:1.5】
	一种ExecutorService（执行服务程序），它可以调度命令在给定的延迟后运行，或定期执行。
	调度方法创建具有各种延迟的任务，并返回可用于取消或检查执行的任务对象。scheduleAtFixedRate和scheduleWithFixedDelay方法创建和执行定期运行的任务，直到取消为止。
	使用Executor.execute(Runnable)和ExecutorService提交方法提交的命令以请求的零延迟进行调度。调度方法中也允许零延迟和负延迟（但不允许周期），并将其视为立即执行的请求。
	所有计划方法都接受相对延迟和周期作为参数，而不是绝对时间或日期。将以日期表示的绝对时间转换为所需格式是一件简单的事情。例如，要在未来某个日期进行调度，可以使用：schedule(task, date.getTime() - System.currentTimeMillis(),TimeUnit.MILLISECONDS)。但是要注意，由于网络时间同步协议、时钟漂移或其他因素，相对延迟的到期不需要与任务启用的当前日期一致。
	Executors类为该包中提供的ScheduledExecutorService实现提供了方便的工厂方法。
	使用示例：下面是一个类，该类的方法将ScheduledExecutorService设置为每10秒蜂鸣一小时：
		import static java.util.concurrent.TimeUnit.*;
		 class BeeperControl {
		   private final ScheduledExecutorService scheduler =
		     Executors.newScheduledThreadPool(1);
		
		   public void beepForAnHour() {
		     final Runnable beeper = new Runnable() {
		       public void run() { System.out.println("beep"); }
		     };
		     final ScheduledFuture<?> beeperHandle =
		       scheduler.scheduleAtFixedRate(beeper, 10, 10, SECONDS);
		     scheduler.schedule(new Runnable() {
		       public void run() { beeperHandle.cancel(true); }
		     }, 60 * 60, SECONDS);
		   }
		 }	
	
	接口定义	：public interface ScheduledExecutorService extends ExecutorService
	父接口	：ExecutorService
	接口实现类	：ScheduledThreadPoolExecutor
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
	schedule(Runnable command,long delay, TimeUnit unit):ScheduledFuture<?> 
		unit - delay参数的时间单位
		创建并执行一个在给定延迟后启用的一次性操作。
		【Throws】：
			RejectedExecutionException 如果任务无法调度执行
			NullPointerException 如果command为null
	schedule(Callable<V> callable,long delay, TimeUnit unit):<V> ScheduledFuture<V> 
		unit - delay参数的时间单位
		创建并执行在给定延迟后启用的ScheduledFuture。
		【Throws】：
			RejectedExecutionException 如果任务无法调度执行
			NullPointerException 如果callable为null
	scheduleAtFixedRate(Runnable command,long initialDelay,long period,TimeUnit unit):ScheduledFuture<?> 
		unit - initialDelay和period参数的时间单位
		创建并执行一个定期操作，该操作首先在给定的初始延迟（initialDelay）之后启用，然后在给定的时间段（period）内启用；即，执行将在initialDelay之后开始，然后在initialDelay+period之后开始，然后在initialDelay+2*period之后开始，依此类推。如果任务的任何执行遇到异常，将禁止后续执行。否则，任务只能通过取消或终止执行器来终止。如果此任务的任何执行时间长于其周期，则后续执行可能会延迟开始，但不会同时执行。
		【Throws】：
			RejectedExecutionException 如果任务无法调度执行
			NullPointerException 如果command为null
			IllegalArgumentException 如果周期小于或等于零
	scheduleWithFixedDelay(Runnable command,long initialDelay,long delay,TimeUnit unit):ScheduledFuture<?>
		 创建并执行一个定期操作，该操作在给定的初始延迟（initialDelay）之后首先启用，然后在一个执行终止和下一个执行开始之间具有给定的延迟（delay）。如果任务的任何执行遇到异常，将禁止后续执行。否则，任务只能通过取消或终止执行器来终止。
		【Throws】：
			RejectedExecutionException 如果任务无法调度执行
			NullPointerException 如果command为null
			IllegalArgumentException 如果delay小于或等于零



















