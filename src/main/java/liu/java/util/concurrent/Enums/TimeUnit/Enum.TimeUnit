-------------------------------TimeUnit-----------------------------------------------------------------------------------------------------------------------
TimeUnit：时间单位。【since 1.5】
	TimeUnit表示给定粒度单位的持续时间，并提供跨单位转换以及在这些单位中执行定时和延迟操作的实用方法。时间单位不维护时间信息，但只帮助组织和使用可以在不同上下文中单独维护的时间表示。纳秒是指千分之一微秒、微妙是指千分之一毫秒、毫秒是指千分之一秒、1分分钟为六十秒、1小时为六十分钟、一天二十四小时。
	TimeUnit主要用于通知基于时间的方法如何解释给定的时间参数。例如，如果锁不可用，以下代码将在50毫秒后超时：
		 Lock lock = ...;
		 if (lock.tryLock(50L, TimeUnit.MILLISECONDS)) ...	
	此代码将在50秒后超时：
		 Lock lock = ...;
		 if (lock.tryLock(50L, TimeUnit.SECONDS)) ...		
	但是，请注意，不能保证特定的超时实现能够通知到时间的推移，其粒度与给定的TimeUnit相同。
	
		
	枚举定义	：public enum TimeUnit extends Enum<TimeUnit>
	语法糖	：public enum TimeUnit
------------------------------------------------------------------------------------------------------------------------------------------------------		
Enum Constant Summary（枚举常量概要）：
	DAYS:
		表示二十四小时的时间单位(日或天）。
	HOURS:
		表示60分钟的时间单位（小时）。
	MINUTES:
		表示60秒的时间单位（分钟）。
	SECONDS:
		表示一秒钟的时间单位（秒）。
	MILLISECONDS:
		表示千分之一秒的时间单位（毫秒）。
	MICROSECONDS:
		表示千分之一毫秒的时间单位（微妙）。	
	NANOSECONDS:
		表示千分之一微秒的时间单位（纳秒）。	
	

Method Summary（方法概要）：
	convert(long sourceDuration, TimeUnit sourceUnit):long 
		将给定单位中给定的持续时间转换为此单位。从细粒度到粗粒度的转换会截断，因此会降低精度。例如，将999毫秒转换为秒，它转换结果为0秒。从粗粒度到细粒度的转换，参数在数值上会溢出，如果为负，则饱为Long.MIN_VALU；如果为正则饱和为Long.MAX_VALUE。
		例如，要将10分钟转换为毫秒，请使用：TimeUnit.MILLISECONDS.convert(10L, TimeUnit.MINUTES)。
	sleep(long timeout):void
		 使用此时间单位执行Thread.sleep。这是一个方便的方法，它将时间参数转换为Thread.sleep方法所需的格式。	
		【Throws】：
			InterruptedException 如果在休眠时中断
	timedJoin(Thread thread, long timeout):void 
		使用此时间单位执行定时Thread.join。这是一个方便的方法，它将时间参数转换为Thread.join方法所需的格式。
		【Throws】：
			InterruptedException 如果在等待时中断
	timedWait(Object obj, long timeout):void 
		使用此时间单位执行定时Object.wait。这是一个方便的方法，它将超时参数转换为Object.wait方法所需的格式。
		例如，可以使用以下方法实现阻塞轮询方法（请参见blockingqueue.poll）：
		 public synchronized Object poll(long timeout, TimeUnit unit)
		     throws InterruptedException {
		   while (empty) {
		     unit.timedWait(this, timeout);
		     ...
		   }
		 }
 		【Throws】：
			InterruptedException 如果在等待时中断 			
	toDays(long duration):long 
		等效于TimeUnit.DAYS.convert(duration, this)。
	toHours(long duration):long 
		等效于TimeUnit.HOURS.convert(duration, this)。
	toMicros(long duration):long 
		等效于TimeUnit.MICROSECONDS.convert(duration, this)。
	toMillis(long duration):long 
		等效于TimeUnit.MILLISECONDS.convert(duration, this)。
	toMinutes(long duration):long 
		等效于TimeUnit.MINUTES.convert(duration, this)。
	toNanos(long duration):long 
		等效于TimeUnit.NANOSECONDS.convert(duration, this)。
	toSeconds(long duration):long 
		等效于TimeUnit.SECONDS.convert(duration, this)。
	valueOf(String name):static TimeUnit 
		返回具有指定名称的此类型的枚举常量。字符串必须与用于在此类型中声明枚举常量的标识符完全匹配。（不允许使用外部空白字符。）
		【Throws】：
			IllegalArgumentException 如果此枚举类型没有具有指定名称的常量
			NullPointerException 如果参数为null
	values():static TimeUnit[] 
		返回一个数组，该数组包含此枚举类型的常量，以声明时的顺序。此方法可用于对常量进行迭代，如下所示：
			for (TimeUnit c : TimeUnit.values())
			    System.out.println(c);	
			    
		
------------------------------------------------------------------------------------------------------------------------------------------------------
附录：
	1、注：文档中的△符号表示覆盖重写方法，✘符号表示已被淘汰掉的方法。	
	2、注：文档中的★符号表示抽象方法或者直接抛出UnsupportedOperationException异常的方法，总之没有实现具体功能代码的方法。
	3、loadFactor：负载因子（或称为负载系数），它等于“size/capacity”（即大小与容量的比率）。负载因子为0，表示空的hash表，0.5表示半满的散列表，依此类推。轻负载的散列表具有冲突少、适宜插入与查询的特点（但是使用Iterator迭代元素时比较慢）
	4、initialCapacity：初始容量。创建hash表时桶的数量，并发操作时ConcurrentHashMap是一次锁住一个桶。ConcurrentHashMap默认将hash表分为16个桶，诸如get、put、remove等常用操作只锁住当前需要用到的桶。这样，原来只能一个线程进入，现在却能同时有16个写线程执行，并发性能的提升是显而易见的。
	5、java并发一致性：
		对于一致性，可以分为从客户端和服务端两个不同的视角。从客户端来看，一致性主要指的是多并发访问时更新过的数据如何获取的问题。从服务端来看，则是更新如何复制分布到整个系统，以保证数据最终一致。一致性是因为有并发读写才有的问题，因此在理解一致性的问题时，一定要注意结合考虑并发读写的场景。
		从客户端角度，多进程并发访问时，更新过的数据在不同进程如何获取的不同策略，决定了不同的一致性。对于关系型数据库，要求更新过的数据能被后续的访问都能看到，这是“强一致性”。如果能容忍后续的部分或者全部访问不到，则是“弱一致性”。如果经过一段时间后要求能访问到更新后的数据，则是“最终一致性”。
	6、SkipList：跳表。	使用“空间换时间”的算法，令链表的每个结点不仅记录next结点位置，还可以按照level层级分别记录后继第level个结点。在查找时，首先按照层级查找，比如：当前跳表最高层级为3，即每个结点中不仅记录了next结点（层级1），还记录了next的next（层级2）、next的next的next（层级3）结点。现在查找一个结点，则从头结点开始先按高层级开始查：head->head的next的next的next->。。。直到找到结点或者当前结点q的值大于所查结点，则此时当前查找层级的q的前一节点p开始，在p~q之间进行下一层级（隔1个结点）的查找......直到最终迫近、找到结点。此法使用的就是“先大步查找确定范围，再逐渐缩小迫近”的思想进行的查找。	
	7、constant-time（常量时间）：意思就是无论n是什么值运算所花时间都一样。
	8、Linear-time（线性时间）：则是说多大n就花多少时间。
	9、Multiple-time（多项式时间）：则意味着随着n增大，n每增加1所花的时间增长越来越多。对于n^2-3这样一个多项式时间来说，n=2的时候可能只要花1的时间，甚至低于线性时间，但n=4的时候可能就要花13的时间了，可以想象再大一些这个数值会变得巨大。但是它又不及指数时间增长快(m^n)，且m^n不能写成多项式形式，所以它又和多项式时间有区别。	
	10、	Copy-On-Write：简称COW，是一种用于程序设计中的优化策略。其基本思路是，从一开始大家都在共享同一个内容，当某个人想要修改这个内容的时候，才会真正把内容Copy出去形成一个新的内容然后再改，这是一种延时懒惰策略。从JDK1.5开始Java并发包里提供了两个使用CopyOnWrite机制实现的并发容器,它们是CopyOnWriteArrayList和CopyOnWriteArraySet。CopyOnWrite容器非常有用，可以在非常多的并发场景中使用到。
		CopyOnWrite容器即写时复制的容器。通俗的理解是当我们往一个容器添加元素的时候，不直接往当前容器添加，而是先将当前容器进行Copy，复制出一个新的容器，然后新的容器里添加元素，添加完元素之后，再将原容器的引用指向新的容器。这样做的好处是我们可以对CopyOnWrite容器进行并发的读，而不需要加锁，因为当前容器不会添加任何元素。所以CopyOnWrite容器也是一种读写分离的思想，读和写不同的容器。
	11、线程“公平”与“饥饿”：如果一个线程因为CPU时间全部被其他线程抢走而得不到CPU运行时间，这种状态被称之为“饥饿”。而该线程被“饥饿致死”正是因为它得不到CPU运行时间的机会。解决饥饿的方案被称之为“公平性” – 即所有线程均能公平地获得运行机会。		






















