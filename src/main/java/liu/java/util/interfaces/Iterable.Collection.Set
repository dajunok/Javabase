Set<E>接口：数学集合，【Since:1.2】
	不包含重复元素的集合。更正式地说，集合不包含像e1.equals(e2)这样的一对元素e1和e2，并且最多包含一个null元素。正如其名称所暗示的那样，这个接口为数学集抽象建模。
	除了从Collection接口继承的约定之外，Set接口还对所有构造函数的约定以及add、equals和hashCode方法的约定进行了附加规定。为了方便起见，这里还包括其他继承方法的声明。（这些声明随附的规范是为Set接口定制的，但不包含任何附加规定。）
	对构造器的附加规定不足为奇，所有构造器必须创建一个不包含重复元素的集合（如上所定义）
	注意：如果可变对象用作集合元素，则必须非常小心。如果在对象是集合中的元素时，以影响相等比较的方式更改对象的值，则不会指定集合的行为。这种禁止的一个特殊情况是，不允许一个集合作为一个元素来包含它自己。
	一些集合实现对它们可能包含的元素有限制。例如，一些实现禁止空元素，一些实现对其元素的类型有限制。试图添加不合格元素会引发未选中的异常，通常为NullPointerException或ClassCastException。试图查询不合格元素的存在可能会引发异常，或者只是返回false；一些实现将显示前一种行为，而一些实现将显示后一种行为。更一般地说，在不合格元素上尝试操作，如果完成操作不会导致不合格元素插入到集合中，则可能会引发异常，或者根据实现的选择，可能会成功。此类异常在该接口的规范中标记为“可选”。
	此接口是Java集合框架的成员。
	
	
	接口定义	：public interface Set<E> extends Collection<E>
	父接口	：Iterable<E>,Collection<E>
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
	add(E e):boolean 
		△ 如果指定的元素还不存在，则将其添加到此集合中（可选操作）。更正式地说，如果像这样(e==null ? e2==null : e.equals(e2))，集合不包含元素e2，则将指定的元素e添加到此集合中。如果此集合已经包含元素，则调用将使集合保持不变并返回false。结合对构造函数的限制，这可以确保集合从不包含重复的元素。
		上述规定并不意味着集合必须接受所有元素；集合可以拒绝添加任何特定元素，包括null元素，并抛出异常，如Collection.add规范中所述。单独的集合实现应该清楚地记录对它们可能包含的元素的任何限制。
		【Throws】：
			● IllegalStateException 如果此set不支持add操作
			● ClassCastException 如果指定元素的类阻止将其添加到此set（集合）中
			● NullPointerException 如果指定的元素为null，并且此set（集合）不允许null元素
			● IllegalArgumentException 如果指定元素的某些属性阻止将其添加到此set（集合）中	
	addAll(Collection<? extends E> c):boolean 
		△ 如果指定集合中的所有元素尚不存在，则将它们添加到此集合中（可选操作）。如果指定的c也是一个集合，则addAll操作将有效地修改此集合，使其值为两个集合的并集。如果在操作进行过程中修改了指定的集合，则此操作的行为未定义。
		【Throws】：
			● IllegalStateException 如果此set不支持addAll操作
			● ClassCastException 如果指定集合的元素的类阻止将其添加到此set（集合）中
			● NullPointerException 如果指定的元素为null，并且此set（集合）不允许null元素
			● IllegalArgumentException 如果指定的集合包含一个或多个空元素，并且此集合不允许null元素，或者指定的集合为null	
	clear():void 
		△从该集合中移除所有元素（可选操作）。此调用返回后，集合将为空。
	contains(Object o):boolean 
		△如果此集合包含指定元素，则返回true。更正式地说，如果且仅当此集合包含元素e(o==null ? e==null : o.equals(e))。
		【Throws】：
			● ClassCastException 如果指定元素的类型与此集合不兼容（可选）
			● NullPointerException 如果指定的元素为null，并且此集合不允许null元素（可选）
	containsAll(Collection<?> c):boolean 
		△如果此集合包含指定集合的所有元素，则返回true。如果指定的collection也是集合，则如果该集合是集合的子集，则此方法返回true。		
		【Throws】：
			● ClassCastException 如果指定集合中一个或多个元素的类型与此集合不兼容（可选）
			● NullPointerException 如果指定的集合包含一个或多个null元素，并且此集合不允许null元素（可选），或者指定的集合为null	
	equals(Object o):boolean 
		△ 将指定的对象与此集进行相等比较。如果指定的对象也是一个集合，两个集合的大小相同，并且指定集合的每个成员都包含在此集合中（或等效地，此集合的每个成员都包含在指定集合中），则返回true。此定义确保equals方法在Set接口的不同实现中正常工作。
	hashCode():int 
		△返回此集的哈希代码值。集合的哈希代码定义为集合中元素的哈希代码之和，其中空元素的哈希代码定义为零。这确保s1.equals(s2)意味着s1.hashCode()==s2.hashCode()对于任意两个集合s1和s2，这是Object.hashCode()的一般约定所要求的。	
	isEmpty():boolean 
		△如果此集合不包含元素，则返回true
	iterator():Iterator<E> 
		△ 返回此集合中元素的迭代器。元素不会以特定的顺序返回（除非此集合是某个提供保证的类的实例）。
	remove(Object o):boolean 
		△ 如果指定元素存在，则从该集合中移除该元素（可选操作）。更正式地说，删除像这样(o==null ? e==null : o.equals(e))的元素e，如果这个集合包含这样一个元素，则返回“真”（如果此集合因调用而更改，则返回等效）。（调用返回后，此集合将不包含此元素。）
		【Throws】：
			● UnsupportedOperationException 如果此集合不支持删除操作(一般指未实行功能代码，需子类覆盖实现)
			● ClassCastException 如果指定元素的类型与此集合不兼容（可选）
			● NullPointerException 如果指定的元素为null，并且此集合不允许为null元素（可选）				
	removeAll(Collection<?> c):boolean 
		△ 从此集合中删除包含在指定集合中的所有元素（可选操作）。如果指定的集合也是集合，则此操作将有效地修改此集合，使其值为两个集合的不对称集合差。
		【Throws】：
			● UnsupportedOperationException 如果此集合不支持removeAll操作(一般指未实行功能代码，需子类覆盖实现)
			● ClassCastException 如果指定元素的类型与此集合不兼容（可选）
			● NullPointerException 如果此集合包含null元素，并且指定的集合不允许null元素（可选），或者指定的集合为null
	retainAll(Collection<?> c):boolean 
		△ 仅保留此集合中包含在指定集合中的元素（可选操作）。换句话说，从该集合中删除指定集合中不包含的所有元素。如果指定的集合也是一个集合，则此操作将有效地修改此集合，使其值为两个集合的交集。
		【Throws】：
			● UnsupportedOperationException 如果此集合不支持retainAll操作(一般指未实行功能代码，需子类覆盖实现)
			● ClassCastException 如果此集合的元素的类与指定集合不兼容（可选）
			● NullPointerException 如果此集合包含null元素，并且指定的集合不允许null元素（可选），或者指定的集合为null
	size():int 
		△ 返回此集合中的元素数量（其基数）。如果此集合包含超过Integer.MAX_VALUE元素，则返回Integer.MAX_VALUE。
	spliterator():default Spliterator<E> 
		△ 在此集合中的元素上创建Spliterator（拆分器）。
		Spliterator报告Spliterator.DISTINCT。实现应该记录额外特征值的报告。
		默认实现从集合的迭代器创建后期绑定Spliterator（拆分器）。Spliterator（拆分器）继承集合迭代器的fail-fast属性。	
		创建的Spliterator还报告Spliterator.SIZED
	toArray():Object[] 
		△ 返回包含此集合中所有元素的数组。如果这个集合对迭代器返回元素的顺序有任何保证，那么这个方法必须以相同的顺序返回元素。
		返回的数组将是“安全的”，因为此集合不维护对它的引用。（换句话说，此方法必须分配一个新数组，即使此集合由数组支持）。因此，调用者可以自由修改返回的数组
		此方法充当基于数组和基于集合的API之间的桥梁。
	toArray(T[] a):<T> T[] 
		△ 返回包含此集合中所有元素的数组；返回的数组的运行时类型是指定数组的运行时类型。如果集合符合指定的数组，则将在其中返回该集合。否则，将为新数组分配指定数组的运行时类型和该集合的大小。
		如果此集合适合具有备用空间的指定数组（即，数组中的元素多于此集合），则紧跟集合末尾的数组中的元素将设置为null。（只有当调用者知道该集合不包含任何null元素时，才有助于确定该集合的长度。）
		如果这个集合对迭代器返回元素的顺序有任何保证，那么这个方法必须以相同的顺序返回元素。
		与toarray()方法一样，此方法充当基于数组和基于集合的API之间的桥梁。此外，此方法允许对输出数组的运行时类型进行精确控制，并且可以在某些情况下用于节省分配成本。
		假设x是一个已知仅包含字符串的集合。以下代码可用于将集合转储到新分配的字符串数组中：
			String[] y = x.toArray(new String[0]);
		请注意，toArray(new Object[0])，功能与toarray()相同。
		【Throws】：
			● ArrayStoreException 如果指定数组的运行时类型不是此集合中每个元素的运行时类型的父类型
			● NullPointerException 如果指定的数组为null
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
附录：
	1、注：文档中的△符号表示覆盖重写方法。
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	