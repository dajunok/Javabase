一、案例说明：
	1、DoubleSummaryStatistics类的测试Demo
二、源代码文件（.java）介绍：
三、知识点：
	------------------------------------------------------------------------------------------------------------------------------------------------------
	1、DoubleSummaryStatistics：状态统计类。【Since:1.8】
		用于收集统计信息（如计数、最小值、最大值、总和、平均值）的状态对象。这个类设计用于（尽管不需要）流（streams）。例如，您可以使用以下方法计算双精度流的摘要统计信息：
			DoubleSummaryStatistics stats = doubleStream.collect(DoubleSummaryStatistics::new,
                                                      DoubleSummaryStatistics::accept,
                                                      DoubleSummaryStatistics::combine);
		DoubleSummaryStatistics可以用作流的缩减目标。例如：	
			DoubleSummaryStatistics stats = people.stream().collect(Collectors.summarizingDouble(Person::getWeight));
		这只需一次，就可以计算出人数，以及他们体重的最小值、最大值、总和和平均值。
		此实现不是线程安全的。但是，在并行流上使用Collectors.ToDoublestatistics（）是安全的，因为stream.collect（）的并行实现提供了必要的分区、隔离和结果合并，以实现安全高效的并行执行。
	
		类定义：public class DoubleSummaryStatistics implements DoubleConsumer
	------------------------------------------------------------------------------------------------------------------------------------------------------
	构造器：
		DoubleSummaryStatistics()
			构造一个具有:count=0，sum=0，min=Double.POSITIVE_INFINITY，max=Double.NEGATIVE_INFINITY，average=0的空实例。
	
	方法：
		accept(double value):void 
			在摘要信息中记录另一个值(参数指定值)。
		combine(DoubleSummaryStatistics other):void 
			将另一个DoubleSummaryStatistics的状态合并(相关属性进行加法操作)到此状态中。
		getAverage():final double 
			返回记录值的算术平均值，如果没有记录值，则返回零。如果任何记录值为NaN或总和在任何点为NaN，则平均值将为代码NaN。
			根据记录值的顺序，返回的平均值可能会有所不同。该方法可以使用补偿求和或其他技术来实现，以减少用于计算平均值的数值求和中的误差范围。
			通过增加绝对量排序的值往往会产生更精确的结果。
		getCount():final long 
			返回记录值的计数数量。
		getMax():final double 
			返回最大记录值，如果任何记录值为NaN，则返回Double.NaN；如果没有记录值，则返回Double.negative无穷大。与数值比较运算符不同，该方法认为负零严格小于正零。
		getMin():final double 
			返回最小记录值，如果任何记录值为NaN，则返回Double.NaN；如果没有记录值，则返回Double.POSITIVE_INFINITY(正数无穷大)。与数值比较运算符不同，该方法认为负零严格小于正零。	
		getSum():final double 
			返回记录的值之和，如果没有记录值，则返回零。如果任何记录值为NaN或总和在任何点为NaN，则总和将为NaN。
		toString():String 
			返回对象的字符串表示形式。通常，ToString方法返回一个“以文本方式表示”此对象的字符串。结果应该是一个简洁但信息丰富的表达，很容易让人阅读。建议所有子类都重写此方法。
			类对象的ToString方法返回一个字符串，该字符串由对象为实例的类的名称、at符号字符“@”和对象哈希代码的无符号十六进制表示形式组成。换句话说，此方法返回一个等于以下值的字符串：
				 getClass().getName() + '@' + Integer.toHexString(hashCode())
			返回适合调试的此对象的非空字符串表示形式。具体的表示格式未指定，可能因实现和版本而异。
	------------------------------------------------------------------------------------------------------------------------------------------------------
	

四、涉及接口与类：
	1、DoubleConsumer：函数式接口。
		这是一个函数接口，其函数方法为accept(double)。
		表示接受单个double-valued参数且不返回结果的操作。这是双消费的原始类型专门化。与大多数其他功能接口不同，DoubleConsumer预期通过side-effects进行操作。
	
		接口定义：@FunctionalInterface 	public interface DoubleConsumer
	------------------------------------------------------------------------------------------------------------------------------------------------------
		accept(double value):void 
			函数方法。对给定参数执行此操作。	
		andThen(DoubleConsumer after):default DoubleConsumer 
			返回一个组合的DoubleConsumer，它依次执行此操作(函数方法)和After操作。
	------------------------------------------------------------------------------------------------------------------------------------------------------
				
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		