-----------------------------------------DataInput-----------------------------------------------------------------------------------------------------------------------------		
DataInput：数据输入流  【Since:1.0】
	DataInput接口提供从二进制流读取字节，并从它们中重构任何Java原始类型中的数据。还有一种功能，可以从修改后的UTF-8格式的数据中重建字符串。
	通常情况下，对于该接口中的所有读取例程，如果在读取所需字节数之前到达文件结尾，则会引发一个EOFException异常（这是一种IOException）。如果由于除文件结尾以外的任何原因而无法读取任何字节，则会引发除EOFException之外的IOException异常。特别是，如果输入流已关闭，则可能引发IOException异常。
	
	Modified UTF-8（改进的 UTF-8）
	DataInput和DataOutput接口的实现以稍微修改了UTF-8的格式表示Unicode字符串。（有关标准UTF-8格式的信息，请参阅第3.9节Unicode标准的Unicode编码格式，版本4.0）。请注意，在下表中，最重要的位出现在最左边的列中。
		------------------------
	此格式与标准UTF-8格式的区别如下：
		● 空字节'\u0000'是以2字节格式而不是1字节编码的，这样编码的字符串就不会有嵌入的空值。
		● 仅使用1字节、2字节和3字节格式。
		● 补充字符以代理对的形式表示。

	接口定义	：public interface DataInput
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Method Summary（方法概要）
	readBoolean():boolean 
		读取一个输入字节，如果该字节非零，则返回true；如果该字节为零，则返回false。此方法适用于读取DataOutput接口的writeBoolean方法写入的字节。
		【Throws】：
			EOFException 如果此流在读取所有字节之前到达末尾。
			IOException 如果发生I/O错误。
	readByte():byte 
		读取并返回一个输入字节。字节被视为-128到127（含）范围内的有符号值。此方法适用于读取接口DataOutput的writeByte方法写入的字节。
		【Throws】：
			EOFException 如果此流在读取所有字节之前到达末尾。
			IOException 如果发生I/O错误。
	readChar():char 
		读取两个输入字节并返回char值。让a为第一个读取字节，b为第二个字节。返回的值为：
			(char)((a << 8) | (b & 0xff))
		此方法适用于读取接口DataOutput的writeChar方法写入的字节。
		【Throws】：
			EOFException 如果此流在读取所有字节之前到达末尾。
			IOException 如果发生I/O错误。
	readDouble():double 
		读取八个输入字节并返回一个double值。它首先以readLong方法的方式构造一个long值，然后以Double.longBitsToDouble方法的方式将这个long值转换为double。此方法适用于读取DataOutput接口的writeDouble方法写入的字节。
		【Throws】：
			EOFException 如果此流在读取所有字节之前到达末尾。
			IOException 如果发生I/O错误。
	readFloat():float 
		读取四个输入字节并返回float值。它首先以readInt方法的方式构造一个int值，然后以Float.intBitsToFloat方法的方式将该int值转换为一个float。此方法适用于读取DataOutput接口的writeFloat方法写入的字节。
		【Throws】：
			EOFException 如果此流在读取所有字节之前到达末尾。
			IOException 如果发生I/O错误。
	readFully(byte b[]):void 
		从输入流中读取一些字节，并将它们存储到缓冲区数组b中。读取的字节数等于b的长度。
		此方法将一直阻塞，直到出现以下情况之一：
			● b.length长度的输入数据字节是可用的，在这种情况下，返回正常值。
			● 检测到文件结尾，在这种情况下会引发EOFException异常。
			● 发生I/O错误，在这种情况下会引发除EOFException以外的IOException。
		如果b为null，则引发NullPointerException异常。如果b.length为零，则不读取任何字节。否则，第一个字节读取被存储到元素b[0]中，下一个字节读取到b[1]中，依此类推。如果从这个方法中抛出异常，那么可能是b的一些字节（但不是所有字节）已经用来自输入流的数据进行了更新。
		【Throws】：
			EOFException 如果此流在读取所有字节之前到达末尾。
			IOException 如果发生I/O错误。
	readFully(byte b[], int off, int len):void 
		b -   读取数据的缓冲区。
		off - 指定数据偏移量的int。
		len - 指定要读取的字节数的int。
		从输入流读取len长度字节。
		此方法将一直阻塞，直到出现以下情况之一：
			● 输入数据的len长度字节是可用的，在这种情况下，返回正常值。
			● 检测到文件结尾，在这种情况下会引发EOFException异常。
			● 发生I/O错误，在这种情况下会引发除EOFException以外的IOException。
		如果b为null，则引发NullPointerException。如果off为负，或者len为负，或者off+len大于数组b的长度，则会引发IndexOutOfBoundsException异常。如果len为零，则不读取字节。否则，第一个字节读取被存储到元素b[off]中，下一个字节读取到b[off+1]中，依此类推。读取的字节数最多等于len。
		【Throws】：
			EOFException 如果此流在读取所有字节之前到达末尾。
			IOException 如果发生I/O错误。
	readInt():int 
		读取四个输入字节并返回一个int值。让a-d作为第一个到第四个字节的读取。返回的值为：
			 (((a & 0xff) << 24) | ((b & 0xff) << 16) |
			  ((c & 0xff) <<  8) | (d & 0xff))	
		此方法适用于读取DataOutput接口的writeInt方法写入的字节。
	readLine():String 
		从输入流中读取下一行文本。它读取连续的字节，将每个字节分别转换为一个字符，直到遇到行终止符或文件结尾；然后将读取的字符作为字符串返回。注意，因为这个方法处理字节，所以它不支持完整的Unicode字符集的输入。
		如果在读取一个字节之前遇到文件结尾，则返回null。否则，读取的每个字节都将被零扩展名转换为char类型。如果遇到字符'\n'，则将丢弃该字符并停止读取。如果遇到字符'\r'，它将被丢弃，如果下面的字节转换为字符'\n'，那么它也将被丢弃；然后读取将停止。如果在遇到字符'\n'和'\r'之前遇到文件结尾，则读取将停止。一旦停止读取，将返回一个字符串，其中包含所有已读取但未丢弃的字符，并按顺序排列。请注意，此字符串中的每个字符的值都小于\u0100，即，(char)256。
		【Throws】：
			IOException 如果发生I/O错误。
	readLong():long 
		读取八个输入字节并返回一个长值。让a-h作为第一个到第八个字节的读取。返回的值为：
			 (((long)(a & 0xff) << 56) |
			  ((long)(b & 0xff) << 48) |
			  ((long)(c & 0xff) << 40) |
			  ((long)(d & 0xff) << 32) |
			  ((long)(e & 0xff) << 24) |
			  ((long)(f & 0xff) << 16) |
			  ((long)(g & 0xff) <<  8) |
			  ((long)(h & 0xff)))
		此方法适用于读取DataOutput接口的writeLong方法写入的字节。
	readShort():short 
		读取两个输入字节并返回一个short值。让a为第一个读取字节，b为第二个字节。返回的值为：
			(short)((a << 8) | (b & 0xff))
		此方法适用于读取DataOutput接口的writeShort方法写入的字节。
		【Throws】：
			EOFException 如果此流在读取所有字节之前到达末尾。
			IOException 如果发生I/O错误。
	readUnsignedByte():int 
		读取一个输入字节，零将其扩展到int类型，并返回结果，因此结果在0到255之间。此方法适用于读取DataOutput接口的writeByte方法写入的字节（如果writeByte的参数是0到255之间的值）。
		返回读取的无符号8位值。
		【Throws】：
			EOFException 如果此流在读取所有字节之前到达末尾。
			IOException 如果发生I/O错误。
	readUnsignedShort():int 
		读取两个输入字节并返回一个介于0到65535之间的int值。让a是第一个读取的字节，b是第二个字节。返回的值为：
			(((a & 0xff) << 8) | (b & 0xff))
		此方法适用于读取DataOutput接口的writeShort方法写入的字节，前提是writeShort的参数的范围是0到65535之间的值。
		【Throws】：
			EOFException 如果此流在读取所有字节之前到达末尾。
			IOException 如果发生I/O错误。
	readUTF():String 
		读取使用修改后的UTF-8格式编码的字符串。readUTF的一般约定是读取以修改后的UTF-8格式编码的Unicode字符串的表示形式；然后将此字符串作为String返回。
		首先，读取两个字节，并使用与readUnsignedShort方法完全相同的方式构造无符号16位整数。这个整数值称为UTF长度，并指定要读取的额外字节数。然后，通过分组考虑这些字节，将它们转换为字符。每个组的长度是根据组的第一个字节的值计算的。组后面的字节（如果有）是下一组的第一个字节。
		如果一个组的第一个字节与位模式0xxxxxxx匹配（其中x表示“可能是0或1”），则该组仅由该字节组成。字节被零扩展以形成一个字符。
		如果一个组的第一个字节与位模式110xxxxx匹配，则该组由该字节a和第二个字节b组成。如果没有字节b（因为字节a是要读取的最后一个字节），或者如果字节b与位模式10xxxxxx不匹配，则引发UTFDataFormatException异常。否则，组将转换为字符：
			(char)(((a & 0x1F) << 6) | (b & 0x3F))
		如果一个组的第一个字节与位模式1110xxxx匹配，则该组由该字节a和另外两个字节b和c组成。如果没有字节c（因为字节a是要读取的最后两个字节之一），或者字节b或字节c与位模式10xxxxxx不匹配，则会引发UTFDataFormatException异常。否则，组将转换为字符：
			(char)(((a & 0x0F) << 12) | ((b & 0x3F) << 6) | (c & 0x3F))
		如果组的第一个字节与模式1111xxxx或模式10xxxxxx匹配，则引发UTFDataFormatException异常。
		在此过程将每个组转换为字符后，将按照从输入流中读取相应组的相同顺序收集字符，以形成返回的字符串。
		DataOutput接口的writeUTF方法可用于写入适合此方法读取的数据。
		【Throws】：
			EOFException 如果此流在读取所有字节之前到达末尾。
			IOException 如果发生I/O错误。
			UTFDataFormatException 如果字节不代表字符串的有效修改的UTF-8编码。
	skipBytes(int n):int 
		n - 要跳过的字节数。
		尝试从输入流中跳过n个字节以上的数据，放弃跳过的字节。但是，它可能跳过一些较小的字节数，可能为零。这可能是由多个条件中的任何一个造成的；在跳过n个字节之前到达文件结尾只是一种可能。此方法从不引发EOFException异常。将返回跳过的实际字节数。
		返回实际跳过的字节数。
		【Throws】：
			IOException 如果发生I/O错误。
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
附录：






















