-----------------------------------------Serializable-----------------------------------------------------------------------------------------------------------------------------		
Serializable：序列化  【Since: JDK1.1】
	一个标识接口。
	类的可序列化性由实现java.io.Serializable接口的类启用。不实现此接口的类将不具有序列化或反序列化的任何状态。可序列化类的所有子类型本身都是可序列化的。序列化接口没有方法或字段，仅用于标识可序列化的语义。
	要允许序列化不可序列化类的子类型，子类型可能会负责保存和还原父类型的public、protected和（如果可访问）包字段的状态。只有当子类型扩展的类具有可访问的无参数构造函数来初始化类的状态时，子类型才能承担此责任。如果不是这样，则声明类可序列化是错误的。运行时将检测到错误。
	在反序列化过程中，将使用类的public或protected无参构造函数初始化不可序列化类的字段。可以序列化的子类必须可以访问无参数构造函数。可序列化子类的字段将从流中还原。
	遍历图形时，可能会遇到不支持可序列化接口的对象。在这种情况下，将引发NotSerializableException，并标识不可序列化对象的类。
	在序列化和反序列化过程中需要特殊处理的类必须实现具有这些确切签名的特殊方法：
		 private void writeObject(java.io.ObjectOutputStream out)   throws IOException
		 private void readObject(java.io.ObjectInputStream in)     throws IOException, ClassNotFoundException;
		 private void readObjectNoData()   throws ObjectStreamException;	
	writeObject方法负责为其特定类写入对象的状态，以便相应的readObject方法可以还原它。通过调用out.defaultWriteObject可以调用保存Object字段的默认机制。该方法不需要关心属于它的超类或子类的状态。通过使用writeObject方法将单个字段写入ObjectOutputStream或使用DataOutput支持的原始数据类型的方法来保存状态。
	readObject方法负责从流中读取并还原类字段。它可以调用in.defaultReadObject来调用默认机制来恢复对象的非静态和非瞬态字段。defaultReadObject方法使用流中的信息为保存在流中的对象的字段分配当前对象中相应命名的字段。当类演化为添加新字段时，这将处理这种情况。该方法不需要关心属于它的超类或子类的状态。通过使用writeObject方法将单个字段写入ObjectOutputStream或使用DataOutput支持的原始数据类型的方法来保存状态。
	如果序列化流未将给定类作为要反序列化的对象的超类列出，则readObjectNoData方法负责为其特定类初始化对象的状态。在接收方使用反序列化实例类的不同版本而不是发送方的情况下，可能会发生这种情况，并且接收方的版本扩展了不由发送方版本扩展的类。如果序列化流已被篡改，也可能发生这种情况；因此，尽管源流“不利”或不完整，但readObjectNoData对于正确初始化反序列化对象非常有用。
	需要指定在将对象写入流时要使用的可选对象的可序列化类应使用准确的签名实现此特殊方法：
		ANY-ACCESS-MODIFIER Object writeReplace() throws ObjectStreamException;
	如果方法存在，则通过序列化调用此writeReplace方法，并且可以从被序列化对象的类中定义的方法访问它。因此，该方法可以具有private、protected和包私有访问。这种方法的子类访问遵循Java可访问性规则。
	当从流中读取替换实例时，需要指定替换的类应使用准确的签名实现此特殊方法。
		ANY-ACCESS-MODIFIER Object readResolve() throws ObjectStreamException;
	此readResolve方法遵循与writeReplace相同的调用规则和可访问性规则。
	序列化运行时与每个可序列化的类a版本号（称为serialVersionUID）关联，该版本号在反序列化过程中用于验证序列化对象的发送方和接收方是否已为该对象加载了与序列化兼容的类。如果接收者为与对应发送者的类具有不同serialVersionUID的对象加载了一个类，那么反序列化将导致InvalidClassException异常。可序列化类可以通过声明名为“serialVersionUID”的字段显式声明自己的serialVersionUID，该字段必须是static、final和long类型：
		ANY-ACCESS-MODIFIER static final long serialVersionUID = 42L;
	如果序列化类没有显式声明serialVersionUID，则序列化运行时将根据类的各个方面计算该类的默认serialVersionUID值，如Java（TM）对象序列化规范中所描述的。但是，强烈建议所有可序列化类都显式声明serialVersionUID值，因为默认serialVersionUID计算对类详细信息高度敏感，这些详细信息可能因编译器实现而异，因此在反序列化期间可能会导致意外的InvalidClassExceptions异常。因此，为了保证跨Java编译器实现一致的serialVersionUID值，可序列化类必须声明显式serialVersionUID值。还强烈建议显式serialVersionUID声明在可能的情况下使用private修饰符，因为此类声明仅适用于立即声明的类--serialVersionUID字段不能用作继承成员。数组类不能声明显式的serialVersionUID，因此它们始终具有默认的计算值，但数组类不需要匹配serialVersionUID值。
	
	
	

	接口定义	：public interface Serializable 
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
附录：
	1、注：文档中的△符号表示覆盖重写方法，✘符号表示已淘汰的方法。	
	2、注：文档中的★符号表示抽象方法或者直接抛出UnsupportedOperationException异常的方法，总之没有实现具体功能代码的方法。	

