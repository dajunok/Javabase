----------------------------------------FilterInputStream--------------------------------------------------------------------------------------------------------------
FilterInputStream：过滤器输入流	【Since:JDK1.0】
	FilterInputStream包含一些其他的输入流，它使用这些输入流作为它的基本数据源，可能会沿途转换数据或提供其他功能。类FilterInputStream本身只使用将所有请求传递到包含的输入流的版本重写InputStream的所有方法。FilterInputStream的子类可能会进一步覆盖其中一些方法，还可能提供其他方法和字段。
	
	
	类定义	：public class FilterInputStream extends InputStream
	实现接口	：AutoCloseable, Closeable
	直接子类	：AudioInputStream, ByteArrayInputStream, FileInputStream, FilterInputStream, InputStream, ObjectInputStream, PipedInputStream, SequenceInputStream, StringBufferInputStream
------------------------------------------------------------------------------------------------------------------------------------------------------
Field Summary（字段概要）：
	in 
		要过滤的输入流。
		


Constructor Summary（构造器概要）：
	protected FilterInputStream(InputStream in)
		in - 基础输入流，如果要在没有基础流的情况下创建此实例，则为null。
		通过将参数in赋给字段this.in来创建FilterInputStream，以便以后使用。
	
	
Method Summary（方法概要）：
	available():int 
		△  返回可以从此输入流中读取（或跳过）的字节数的估计值，而不被此输入流方法的下一个调用方阻塞。下一次调用可能是同一个线程或另一个线程。单个读取或跳过这么多字节不会阻塞，但可能会读取或跳过更少的字节。
		此方法返回in.available()的结果。
		【Throws】：
			IOException 如果发生I/O错误。
	close():void 
		△  关闭此输入流并释放与该流关联的任何系统资源。此方法只简单的执行in.close()。
		【Throws】：
			IOException 如果发生I/O错误。
	mark(int readlimit):synchronized void 
		readlimit - 标记位置无效之前可以读取的最大字节数限制。
		△  标记此输入流中的当前位置。对reset方法的后续调用将此流重新定位到最后标记的位置，以便后续读取重新读取相同的字节。
		readlimit参数告诉此输入流允许在标记位置失效之前读取许多字节。
		此方法只简单的执行in.mark(readlimit)。
	markSupported():boolean 
		△  测试此输入流是否支持mark和reset方法。此方法只简单的执行in.markSupported()
		如果此流实例支持mark和rese方法，则返回true；否则返回false。
	read():int 
		△  从输入流中读取下一个字节数据。值byte作为int返回，范围在0到255之间。如果由于到达流结尾而没有字节可用，则返回值-1。此方法将一直阻塞，直到输入数据可用、检测到流的结尾或引发异常为止。
		此方法只简单的执行in.read()并返回结果。
		【Throws】：
			IOException 如果发生I/O错误。
	read(byte b[]):int
		b - 读取数据的缓冲区。
		△  从该输入流中最多读取byte.length字节的数据到字节数组。此方法将一直阻塞，直到输入数据可用。
		此方法只简单的调用read(b, 0, b.length)并返回结果。重要的是，它不执行in.read(b)；FilterInputStream的某些子类取决于实际使用的实现策略。
		【Throws】：
			IOException 如果发生I/O错误。
	read(byte b[], int off, int len):int
		b - 读取数据的缓冲区。
		off - 数组b中写入数据的起始偏移量。
		len - 要读取的最大字节数。		
		△  从输入流读取最多len个字节的数据到一个字节数组中。如果len不是零，则方法将一直阻塞，直到某些输入可用；否则，将不读取任何字节，并返回0。
		此方法只简单的执行in.read(b, off, len)并返回结果。
		【Throws】：
			IOException 如果第一个字节由于除文件结尾以外的任何原因无法读取，或者输入流已关闭，或者发生其他I/O错误。
			NullPointerException 如果b为null。
			IndexOutOfBoundsException 如果off为负，len为负，或者len大于b.length-off。	
	reset():synchronized void 
		△  将此流重新定位到此输入流上一次调用mark方法时的位置。
		此方法只简单的执行in.reset()。
		流标记用于需要提前阅读以查看流中的内容的情况。通常，通过调用一些通用的解析器最容易做到这一点。如果流是由解析处理的类型，那么它只是顺其自然。如果流不是那种类型，那么解析器应该在失败时抛出异常。如果在readlimit字节内发生这种情况，则允许外部代码重置流并尝试另一个解析器。
	skip(long n):long
		n - 要跳过的字节数。
		△  跳过并丢弃此输入流中的n字节数据。由于各种原因，skip方法可能会跳过一些较小的字节，可能是0。将返回跳过的实际字节数。
		此方法只简单的执行 in.skip(n)。
		【Throws】：
			IOException 如果流不支持seek，或者发生其他I/O错误。
			
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
附录：
	1、注：文档中的△符号表示覆盖重写方法，✘符号表示已淘汰的方法。	
	2、注：文档中的★符号表示抽象方法或者直接抛出UnsupportedOperationException异常的方法，总之没有实现具体功能代码的方法。	













		