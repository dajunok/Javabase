----------------------------------------ObjectInputStream--------------------------------------------------------------------------------------------------------------
ObjectInputStream：对象输入流	【Since:JDK1.1】
	ObjectInputStream反序列化原始数据和以前使用ObjectOutputStream编写的对象。
	ObjectOutputStream和ObjectInputStream分别与FileOutputStream和FileInputStream一起使用时，可以为对象图形提供持久存储的应用程序。ObjectInputStream用于恢复以前序列化的对象。其他用途包括使用套接字（socket）流在主机之间传递对象，或者在远程通信系统中对参数和参数进行封送（marshaling）和解组（unmarshaling）。
	ObjectInputStream确保从流创建的图形中所有对象的类型与Java虚拟机中存在的类相匹配。使用标准机制根据需要加载类。
	只能从流中读取支持java.io.Serializable或java.io.Externalizable接口的对象。
	方法readObject用于从流中读取对象。应该使用Java的安全铸件来获得所需的类型。在Java中，字符串和数组是对象，并在序列化过程中被视为对象。读取时，需要将它们强制转换为预期的类型。
	可以使用DataInput上的适当方法从流中读取原始数据类型。
	对象的默认反序列化机制将每个字段的内容还原为其在写入时的值和类型。反序列化过程将忽略声明为transient或static的字段。对其他对象的引用会根据需要从流中读取这些对象。使用引用共享机制可以正确还原对象图。反序列化时总是分配新对象，这会防止覆盖现有对象。
	读取对象类似于运行新对象的构造函数。为对象分配内存并初始化为0（NULL）。不会为不可序列化类调用没有参数的构造函数，然后从流中还原可序列化类的字段，从最接近java.lang.object的可序列化类开始，到对象最特定的类结束。
	例如，从ObjectOutputStream中的示例所写的流中读取：
	      FileInputStream fis = new FileInputStream("t.tmp");
	      ObjectInputStream ois = new ObjectInputStream(fis);
	
	      int i = ois.readInt();
	      String today = (String) ois.readObject();
	      Date date = (Date) ois.readObject();
	
	      ois.close();		
	类通过实现java.io.Serializable或java.io.Externalizable接口来控制它们的序列化方式。
	实现Serializable接口允许对象序列化保存和恢复对象的整个状态，并允许类在流的写入时间和读取时间之间发生。它自动遍历对象之间的引用，保存和恢复整个图形。
	在序列化和反序列化过程中需要特殊处理的Serializable类应实现以下方法：
		 private void writeObject(java.io.ObjectOutputStream stream)
		     throws IOException;
		 private void readObject(java.io.ObjectInputStream stream)
		     throws IOException, ClassNotFoundException;
		 private void readObjectNoData()
		     throws ObjectStreamException;	
	readObject方法负责使用由相应的writeObject方法写入流中的数据读取和还原特定类的对象状态。该方法不需要关注属于它的超类或子类的状态。通过从ObjectInputStream中读取单个字段的数据并将其分配给对象的相应字段，可以恢复状态。DataInput支持读取原始数据类型。
	任何读取对象数据的尝试，如果超出了由相应的writeObject方法写入的自定义数据的边界，都将导致抛出OptionalDataException异常，其eof字段值为true。超过分配数据结尾的非对象读取将以指示流结尾的方式反映数据结尾：bytewise读取将返回-1作为字节读取或读取的字节数，而原始类型读取将引发EOFException异常。如果没有对应的writeObject方法，则默认序列化数据的结尾将标记分配数据的结尾。
	从readExternal方法中发出的原始和对象读取调用的行为相同————如果流已定位在由相应的writeExternal方法写入的数据的末尾，则对象读取将引发OptionalDataException异常，eof设置为true，byteWise读取将返回-1，原始读取将引发EOFException异常。请注意，对于使用旧的ObjectStreamConstants.PROTOCOL_VERSION_1协议写入的流，此行为不适用，在该协议中，由writeExternal方法写入的数据的结尾没有被划分，因此无法检测到。
	如果序列化流未将给定类列为要反序列化的对象的超类，则readObjectNoData方法负责为其特定类初始化对象的状态。在接收方使用反序列化实例类的不同版本而不是发送方的情况下，可能会发生这种情况，并且接收方的版本扩展了不由发送方版本扩展的类。如果序列化流已被篡改，也可能发生这种情况；因此，尽管源流“敌对”或不完整，但readObjectNoData对于正确初始化反序列化对象非常有用。
	序列化不会读取或为任何未实现java.io.Serializable接口的对象的字段赋值。不能序列化的对象的子类可以序列化。在这种情况下，不可序列化的类必须有一个无参构造函数，以允许初始化其字段。在这种情况下，子类负责保存和恢复不可序列化类的状态。通常情况下，该类的字段是可访问的（public、package或protected），或者存在可用于恢复状态的get和set方法。
	反序列化对象时发生的任何异常都将被ObjectInputStream捕获并中止读取过程。
	实现Externalizable接口允许对象对对象的序列化形式的内容和格式进行完全控制。调用Externalizable接口的方法writeExternal和readExternal来保存和恢复对象状态。当由一个类实现时，它们可以使用ObjectOutput和ObjectInput的所有方法写入和读取自己的状态。对象负责处理发生的任何版本控制。
	枚举常量的反序列化与普通的可序列化或可外部化对象不同。枚举常量的序列化形式仅由其名称组成；不传输该常量的字段值。要反序列化枚举常量，ObjectInputStream将从流中读取常量名称；然后通过使用枚举常量的基类型和接收到的常量名称作为参数调用静态方法Enum.valueOf(Class, String)来获取反序列化的常量。与其他可序列化或可外部化的对象一样，枚举常量可以作为随后出现在序列化流中的反向引用的目标。无法自定义反序列化枚举常量的过程：反序列化期间忽略枚举类型定义的任何类特定的readObject、readObjectNoData和readResolve方法。类似地，任何serialPersistentField或serialVersionUID字段声明也将被忽略————所有枚举类型都具有固定的serialVersionUID 0L。
	
	
	类定义	：public class ObjectInputStream extends InputStream implements ObjectInput, ObjectStreamConstants
	实现接口	：AutoCloseable, Closeable , ObjectInput, ObjectStreamConstants
------------------------------------------------------------------------------------------------------------------------------------------------------
Constructor Summary（构造器概要）：
	protected ObjectInputStream()
		为完全重新实现ObjectInputStream的子类提供一种方法，使其不必分配仅由该ObjectInputStream实现使用的私有数据。
		如果安装了安全管理器，则此方法首先使用SerializablePermission("enableSubclassImplementation") 权限调用安全管理器的checkPermission方法，以确保可以启用子类化。
		【Throws】：
			SecurityException 如果安全管理器存在，并且其checkPermission方法拒绝启用子类化。
			IOException  如果在创建此流时发生I/O错误。
	public ObjectInputStream(InputStream in)
		in - 要读取的输入流
		创建从指定的InputStream中读取的ObjectInputStream。从流中读取序列化流头并进行验证。在相应的ObjectOutputStream写入并刷新头之前，此构造函数将一直阻塞。
		如果安装了安全管理器，则此构造函数将在重写ObjectInputStream.readFields或ObjectInputStream.readUnshared方法的子类的构造函数直接或间接调用时检查“enableSubclassImplementation”序列化权限。
		【Throws】：
			StreamCorruptedException 如果流头不正确
			SecurityException 如果安全管理器存在，并且其checkPermission方法拒绝启用子类化。
			IOException  如果在创建此流时发生I/O错误。
			NullPointerException 如果in为null。
		
Method Summary（方法概要）：
	available():int 
		△ 返回可以在不阻塞的情况下读取的字节数。
		返回可用字节数。
		【Throws】：
			IOException 如果从底层输入流读取时出现I/O错误
	close():void 
		△ 关闭输入流。必须调用以释放与流关联的任何资源。
		【Throws】：
			IOException 如果发生I/O错误。
	defaultReadObject():void 
		从此流中读取当前类的非静态（non-static）和非瞬态（non-transient）字段。这只能从被反序列化的类的readObject方法调用。如果不是这样调用，它将抛出NotActiveException异常。
		【Throws】：
			ClassNotFoundException 如果找不到序列化对象的类。
			IOException  如果发生I/O错误。
			NotActiveException 如果流当前没有读取对象。
	enableResolveObject(boolean enable):protected boolean 
		enable - 如果打算为每个被反序列化的对象启用resolveObject，则指定为true。
		启用流以允许替换从流中读取的对象。启用后，将为反序列化的每个对象调用resolveObject方法。
		如果enable为true，并且安装了安全管理器，则此方法首先调用安全管理器的checkPermission方法，并具有SerializablePermission("enableSubstitution")权限，以确保可以启用流以允许从流中读取的对象被替换。
		返回调用此方法之前的上一个设置。
		【Throws】：
			SecurityException 如果安全管理器存在，并且其checkPermission方法拒绝启用流以允许替换从流中读取的对象。
	read():int 
		△ 读取一个字节的数据。如果没有可用的输入，此方法将阻塞。
		返回一个字节读取，如果到达流的结尾，则返回-1。
		【Throws】：
			IOException 如果发生I/O错误。
	read(byte b[], int off, int len):int
		b - 读取数据的缓冲区。
		off - 数组b中写入数据的起始偏移量。
		len - 要读取的最大字节数。		
		△ 读取一个字节数组。此方法将一直阻塞，直到某些输入可用。考虑使用java.io.DataInputStream.readFully精确读取'length'字节。
		返回实际读取的字节数，当到达流结尾时，返回-1。		
		【Throws】：
			IOException 如果发生I/O错误。	
	readBoolean():boolean 
		△ 读取布尔值。
		返回读取的布尔值。
		【Throws】：
			EOFException 如果到达文件结尾。
			IOException 如果发生I/O错误。
	readByte():byte 
		△ 读取8位字节。
		返回读取的8位字节。
		【Throws】：
			EOFException 如果到达文件结尾。
			IOException 如果发生I/O错误。
	readChar():char 
		△ 读取16位字符。
		返回读取的16位字符。
		【Throws】：
			EOFException 如果到达文件结尾。
			IOException 如果发生I/O错误。	
	readClassDescriptor():protected ObjectStreamClass 
		从序列化流中读取类描述符。当ObjectInputStream期望类描述符作为序列化流中的下一项时，调用此方法。ObjectInputStream的子类可以重写此方法以读取以非标准格式编写的类描述符（由ObjectOutputStream的子类重写writeClassDescriptor方法）。默认情况下，此方法根据Object序列化规范中定义的格式读取类描述符。
		返回读取的类描述符。
		【Throws】：
			IOException 如果发生I/O错误。
			ClassNotFoundException 如果找不到类描述符表示形式中使用的序列化对象的类。
	readDouble():double 
		△ 读取64位double值。
		返回读取的64位double值。
		【Throws】：
			EOFException 如果到达文件结尾。
			IOException 如果发生I/O错误。		
	readFields():ObjectInputStream.GetField 
		从流中读取持久字段并按名称使其可用。
		返回表示被反序列化对象的持久字段的GetField对象
		【Throws】：
			ClassNotFoundException 如果找不到序列化对象的类。
			IOException 如果发生I/O错误。	
			NotActiveException 如果流当前没有读取对象。
	readFloat():float 
		△ 读取32位float值。
		返回读取的32位float值。
		【Throws】：
			EOFException 如果到达文件结尾。
			IOException 如果发生I/O错误。
	readFully(byte[] buf):void 
		buf - 读取数据的缓冲区
		△ 读取字节，阻塞直到读取所有字节。
		【Throws】：
			EOFException 如果到达文件结尾。
			IOException 如果发生I/O错误。
	readFully(byte b[], int off, int len):void 
		b -   读取数据的缓冲区。
		off - 指定数据偏移量的int。
		len - 指定要读取的字节数的int。
		△ 读取字节，阻塞直到读取所有字节。
		【Throws】：
			EOFException 如果到达文件结尾。
			IOException 如果发生I/O错误。
	readInt():int 
		△ 读取32位int。
		返回读取的32位整数。
		【Throws】：
			EOFException 如果到达文件结尾。
			IOException 如果发生I/O错误。
	readLine():String 
		✘ 已淘汰。此方法无法将字节正确转换为字符。有关详细信息和备选方案，请参阅DataInputStream。
		读取已被\n、\r、\r\n或eof终止的行。
		【Throws】：
			IOException 如果从底层输入流读取时出现I/O错误。
	readLong():long 
		△ 读取64位long值。
		返回读取的64位long值。
		【Throws】：
			EOFException 如果到达文件结尾。
			IOException 如果发生I/O错误。
	readObject():final Object 
		△ 从ObjectInputStream读取对象。读取对象的类、类的签名以及类及其所有父类型的非瞬态（non-transient）和非静态（non-static）字段的值。可以使用writeObject和readObject方法重写类的默认反序列化。此对象引用的Object是通过传递方式读取的，以便由readObject重新构造对象的完整等效图。
		当根（root）对象的所有字段及其引用的对象都被完全还原时，根（root）对象将被完全还原。此时，对象验证回调将根据注册的优先级按顺序执行。回调由对象（在readObject特殊方法中）注册，因为它们是单独还原的。
		对于InputStream和不应反序列化的类的问题，会引发异常。所有异常对InputStream都是致命的，并使其处于不确定状态；由调用方来忽略或恢复流状态。
		返回从流中读取的对象。
		【Throws】：
			ClassNotFoundException 找不到序列化对象的类。
			InvalidClassException 序列化使用的类有问题。
			StreamCorruptedException 流中的控制信息不一致。
			OptionalDataException 在流中而不是对象中找到了原始数据。
			IOException 任何与输入/输出相关的常见异常。		
	readObjectOverride():protected Object 
		此方法由ObjectOutputStream的受信任子类调用，该子类使用受保护的无参数构造函数构造了ObjectOutputStream。子类应提供带有修饰符“final”的重写方法。
		返回从流中读取的对象。
		【Throws】：
			ClassNotFoundException 找不到序列化对象的类定义。
			OptionalDataException 在流中找到原始数据，而不是对象。
			IOException 如果从底层流读取时发生I/O错误。
	readShort():short 
		读取16位short值。
		返回读取的16位short值。
		【Throws】：
			EOFException 如果到达文件结尾。
			IOException 如果发生I/O错误。
	readStreamHeader():protected void 
		提供readStreamHeader方法以允许子类读取和验证自己的流头。它读取并验证幻数和版本号。
	readUnshared():Object 
		从ObjectInputStream读取“非共享”对象。此方法与readObject相同，只是它防止后续调用readObject和readUnshared返回通过此调用获得的反序列化实例的其他引用。按特性：
			● 如果调用readUnshared反序列化后引用（以前写入流的对象的流表示形式），则将引发ObjectStreamException异常。
			● 如果readUnshared成功返回，则任何随后尝试反序列化对readUnshared反序列化的流句柄的引用都将导致引发ObjectStreamException异常。
		通过readUnshared反序列化对象将使与返回对象关联的流句柄无效。请注意，这本身并不总是保证readUnshared返回的引用是唯一的；反序列化对象可以定义一个readResolve方法，该方法返回对其他方可见的对象，或者readUnshared可以返回类对象或枚举常量，该类对象或枚举常量可以在流中的其他位置或通过外部方法获得。如果反序列化对象定义了readResolve方法，并且该方法的调用返回一个数组，则readUnshared返回该数组的浅克隆；这保证返回的数组对象是唯一的，并且不能从对ObjectInputStream的readObject或readUnshared调用中第二次获取，即使底层数据流已被操作。
		重写此方法的ObjectInputStream子类只能在具有“enableSubclassImplementation”序列化权限的安全上下文中构造；任何尝试在没有此权限的情况下实例化此类子类都将导致引发SecurityException异常。
		【Throws】：
			ClassNotFoundException 如果找不到要反序列化的对象的类。
			StreamCorruptedException 如果流中的控制信息不一致
			ObjectStreamException 如果要反序列化的对象已出现在流中。
			OptionalDataException 如果原始数据是流中的下一个。
			IOException 如果反序列化期间发生I/O错误。	
	readUnsignedByte():int 
		△ 读取无符号8位字节。
		返回读取的无符号8位字节值。
		【Throws】：
			EOFException 如果到达文件结尾。
			IOException 如果发生I/O错误。
	readUnsignedShort():int 
		△ 读取无符号16位short值。
		返回读取的无符号16位short值。
		【Throws】：
			EOFException 如果到达文件结尾。
			IOException 如果发生I/O错误。
	readUTF():String 
		△ 以修改后的UTF-8格式读取字符串。
		返回字符串。
		【Throws】：
			IOException 如果从底层输入流读取时出现I/O错误
			UTFDataFormatException 如果读取字节不代表字符串的有效修改的UTF-8编码
	registerValidation(ObjectInputValidation obj, int prio):void 
		obj - 接收验证回调的对象。
		prio - 控制回调的顺序；零是一个好的默认值。使用更高的号码提前回拨，使用更低的号码稍后回拨。在优先级中，回调不按特定顺序处理。
		在返回图形之前注册要验证的对象。虽然与resolveObject类似，但这些验证是在整个图形重新构建之后调用的。通常，readObject方法会将对象注册到流中，以便在还原所有对象时，可以执行最后一组验证。
		【Throws】：
			NotActiveException 流当前未读取对象，因此注册回调无效。
			InvalidObjectException 验证对象为null。
	resolveClass(ObjectStreamClass desc):protected Class<?> 
		desc - 类ObjectStreamClass的实例
		加载与指定流类描述等效的本地类。子类可以实现此方法以允许从备用源中提取类。
		ObjectOutputStream中对应的方法是annotateClass。对于流中的每个唯一类，此方法只调用一次。此方法可以由子类实现，以使用备用加载机制，但必须返回类对象。返回后，如果该类不是数组类，则将其serialVersionUID与序列化类的serialVersionUID进行比较，如果不匹配，则反序列化失败，并引发InvalidClassException异常。
		此方法在ObjectInputStream中的默认实现返回调用的结果
			Class.forName(desc.getName(), false, loader)
		其中，加载器确定如下：如果当前线程栈上有一个方法，其声明类是由用户定义的类加载器定义的（并且不是为实现反射调用而生成的），则加载器是与当前执行帧最近的此类方法对应的类加载器；否则，加载器为null。如果此调用导致ClassNotFoundException异常，并且传递的ObjectStreamClass实例的名称是原始类型或Java语言关键字void，则将返回表示该原始类型的类对象或void（例如，将名称“int”的ObjectStreamClass解析为Integer.TYPE）。否则，将向此方法的调用方引发ClassNotFoundException异常。
		返回与desc对应的Class对象。
		【Throws】：
			IOException 任何常见的输入/输出异常。
			ClassNotFoundException 如果找不到序列化对象的类。
	resolveObject(Object obj):protected Object 
		obj - 要替换的对象
		此方法将允许ObjectInputStream的可信子类在反序列化期间用一个对象替换另一个对象。在调用enableResolveObject之前，将禁用替换对象。enableResolveObject方法检查请求解析对象的流是否可以信任。对可序列化对象的每个引用都传递给resolveObject。为了确保对象的private状态不会无意中暴露，只有受信任的流才可以使用resolveObject。
		此方法在对象被读取之后，但在从readObject返回之前调用。默认的resolveObject方法只返回相同的对象。
		当子类替换对象时，它必须确保被替换对象与存储引用的每个字段都兼容。如果对象的类型不是字段或数组元素类型的子类，则通过引发异常中止序列化，并且不会存储该对象。
		第一次遇到每个对象时，只调用一次此方法。对该对象的所有后续引用都将重定向到新对象。
		返回被替换的对象（原对象）。
		【Throws】：
			IOException 任何常见的输入/输出异常。
	resolveProxyClass(String[] interfaces):protected Class<?> 
		interfaces - 代理类描述符中反序列化的接口名称列表
		返回一个代理类，该代理类实现代理类描述符中指定的接口；子类可以实现此方法以从流中读取自定义数据以及动态代理类的描述符，从而允许它们对接口和代理类使用备用加载机制。
		对于流中的每个唯一代理类描述符，只调用一次此方法。
		ObjectOutputStream中对应的方法是annotateProxyClass。对于覆盖此方法的ObjectInputStream给定子类，ObjectOutputStream相应子类中的annotateProxyClass方法必须写入此方法读取的任何数据或对象。
		ObjectInputStream中此方法的默认实现返回调用Proxy.getProxyClass的结果，其中包含在interfaces参数中命名的接口的类对象列表。每个接口名i的类对象是通过调用
			Class.forName(i, false, loader)
		其中，loader是执行栈上第一个非空（non-null）类加载器的类型，或者如果栈上没有非空（non-null）类加载器，则为null（resolveClass方法使用相同的类加载器选择）。除非任何已解析的接口是non-public的，否则该加载程序的相同值也是传递给Proxy.getProxyClass的类加载程序；如果存在non-public接口，则传递它们的类加载程序（如果遇到多个non-public接口类加载程序，则抛出IllegalAccessError异常）。如果Proxy.getProxyClass抛出IllegalArgumentException，resolveProxyClass将抛出包含IllegalArgumentException的ClassNotFoundException异常。
		【Throws】：
			IOException 底层InputStream引发的任何异常。
			ClassNotFoundException 如果找不到代理类或任何命名接口。
	skipBytes(int n):int 
		n - 要跳过的字节数。
		△ 跳过字节。
		返回实际跳过的字节数。
		【Throws】：
			IOException 如果发生I/O错误。

			
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
附录：
	1、注：文档中的△符号表示覆盖重写方法，✘符号表示已淘汰的方法。	
	2、注：文档中的★符号表示抽象方法或者直接抛出UnsupportedOperationException异常的方法，总之没有实现具体功能代码的方法。	













		