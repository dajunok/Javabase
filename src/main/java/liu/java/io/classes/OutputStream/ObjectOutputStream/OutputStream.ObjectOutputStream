----------------------------------------ObjectOutputStream--------------------------------------------------------------------------------------------------------------
ObjectOutputStream：对象输出流	【Since:JDK1.1】
	ObjectOutputStream将原始数据类型和Java对象的图形写入OutputStream。可以使用ObjectInputStream读取（重组）对象。对象的持久存储可以通过使用流的文件来完成。如果流是网络套接字（socket）流，则可以在另一台主机或另一个进程中重新构建对象。
	只有支持java.io.Serializable接口的对象才能写入流。对每个可序列化对象的类进行编码，包括类的类名和签名、对象字段和数组的值以及从初始对象引用的任何其他对象的闭包。
	方法writeObject用于将对象写入流。任何对象（包括字符串和数组）都是用writeObject写入的。可以将多个对象或原始类型写入流。必须从相应的ObjectInputstream中读取对象，这些对象的类型和写入顺序必须相同。
	也可以使用来自DataOutput的适当方法将原始数据类型写入流。也可以使用writeUTF方法写入字符串（String）。
	对象的默认序列化机制写入对象的类、类签名以及所有non-transient字段和non-static字段的值。对其他对象的引用（transient或static字段除外）也会导致这些对象被写入。使用引用共享机制对单个对象的多个引用进行编码，以便可以将对象的图形还原为与写入原始对象时相同的图形。
	例如，要编写一个可以由ObjectInputStream中的示例读取的对象：
	      FileOutputStream fos = new FileOutputStream("t.tmp");
	      ObjectOutputStream oos = new ObjectOutputStream(fos);
	
	      oos.writeInt(12345);
	      oos.writeObject("Today");
	      oos.writeObject(new Date());
	
	      oos.close();	
	在序列化和反序列化过程中需要特殊处理的类必须实现具有这些确切签名的特殊方法：
		 private void readObject(java.io.ObjectInputStream stream) throws IOException, ClassNotFoundException;
		 private void writeObject(java.io.ObjectOutputStream stream) throws IOException
		 private void readObjectNoData() throws ObjectStreamException;	
	writeObject方法负责为它的特定类编写对象的状态，以便相应的readObject方法可以恢复它。该方法不需要关注属于对象的超类或子类的状态。通过使用writeObject方法将单个字段写入ObjectOutputStream或使用DataOutput支持的基本数据类型的方法来保存状态。
	序列化不会写出任何未实现java.io.Serializable接口的对象的字段。不能序列化的对象的子类可以序列化。在这种情况下，不可序列化的类必须有一个无参构造函数，以允许初始化其字段。在这种情况下，子类负责保存和恢复不可序列化类的状态。通常情况下，该类的字段是可访问的（public、package或protected），或者存在可用于恢复状态的get和set方法。
	通过实现引发NotSerializableException异常的writeObject和readObject方法，可以阻止对象的序列化。ObjectOutputStream将捕获异常并中止序列化过程。
	实现Externalizable接口允许对象对对象的序列化形式的内容和格式进行完全控制。调用Externalizable接口writeExternal和readExternal的方法来保存和恢复对象状态。当由类实现时，它们可以使用ObjectOutput和ObjectInput的所有方法来写入和读取自己的状态。对象负责处理发生的任何版本控制。
	枚举常量的序列化方式与普通的可序列化或可外部化对象不同。枚举常量的序列化形式仅由其名称组成；不传输该常量的字段值。要序列化枚举常量，ObjectOutputStream将写入常量的name方法返回的字符串。与其他可序列化或可外部化的对象一样，枚举常量可以作为随后出现在序列化流中的反向引用的目标。无法自定义序列化枚举常量的过程；在序列化过程中忽略由枚举类型定义的任何类特定的writeObject和writeReplace方法。类似地，任何serialPersistentFields或serialVersionUID字段声明也将被忽略————所有枚举类型都具有固定的serialVersionUID 0L。
	原始数据（不包括可序列化字段和可外部化数据）写入块数据记录中的ObjectOutputStream。块数据记录由一个头和数据组成。块数据头由一个标记和头后面的字节数组成。连续的原始数据写入被合并到一个块数据记录中。块数据记录使用的阻塞因子将为1024字节。每个块数据记录最多可填充1024个字节，或在块数据模式终止时写入。对ObjectOutputStream方法writeObject、defaultWriteObject和writeFields的调用最初会终止任何现有的块数据记录。
	
	
	
	
	
	类定义	：public class ObjectOutputStream  extends OutputStream implements ObjectOutput, ObjectStreamConstants
	实现接口	：AutoCloseable, Closeable ,Flushable ,DataOutput ,ObjectOutput, ObjectStreamConstants
------------------------------------------------------------------------------------------------------------------------------------------------------
Constructor Summary（构造器概要）：
	protected ObjectOutputStream()
		为完全重新实现ObjectOutputStream的子类提供一种方法，使其不必分配仅由此ObjectOutputStream实现使用的private数据。
		如果安装了安全管理器，则此方法首先调用安全管理器的checkPermission方法，并具有SerializablePermission（“enableSubclassImplementation”）权限，以确保可以启用子类化。
		【Throws】：
			SecurityException 如果安全管理器存在，并且其checkPermission方法拒绝启用子类化。
			IOException 如果在创建此流时发生I/O错误。
	public ObjectOutputStream(OutputStream out)
		out - 要写入的输出流
		创建写入指定输出流的ObjectOutputStream。此构造函数将序列化流头写入底层流；调用方可能希望立即刷新流，以确保在读取头时，用于接收ObjectInputStream的构造函数不会阻塞。
		如果安装了安全管理器，则当子类的构造函数直接或间接调用时，此构造函数将检查“enableSubclassImplementation”序列化权限，该子类重写ObjectOutputStream.putFields或ObjectOutputStream.writeUnshared方法。
		【Throws】：
			SecurityException 如果不受信任的子类非法重写安全敏感的方法
			IOException 如果在写入流头时发生I/O错误。
			NullPointerException 如果out为null。
		
Method Summary（方法概要）：
	annotateClass(Class<?> cl):protected void 
		cl - 要为其注释自定义数据的类。
		子类可以实现此方法以允许类数据存储在流中。默认情况下，此方法不执行任何操作。ObjectInputStream中对应的方法是resolveClass。对于流中的每个唯一类，此方法只调用一次。类名称和签名将已写入流。此方法可以自由使用ObjectOutputStream来保存它认为合适的类的任何表示（例如，类文件的字节）。ObjectInputStream对应子类中的resolveClass方法必须读取和使用由annotateClass编写的任何数据或对象。
		【Throws】：
			IOException 底层输出流引发的任何异常。			
	annotateProxyClass(Class<?> cl):protected void 
		cl - 为其注释自定义数据的代理类
		子类可以实现此方法来在流中存储自定义数据以及动态代理类的描述符。
		对于流中的每个唯一代理类描述符，此方法只调用一次。ObjectOutputStream中此方法的默认实现不起任何作用。
		ObjectInputStream中的相应方法是resolveProxyClass。对于重写此方法的ObjectOutputStream的给定子类，ObjectOutputStream的相应子类中的resolveProxyClass方法必须读取由annotateProxyClass写入的任何数据或对象。
		【Throws】：
			IOException 底层输出流引发的任何异常。
	close():void 
		△ 关闭流。必须调用此方法以释放与流关联的任何资源。
		【Throws】：
			IOException 如果发生I/O错误。
	defaultWriteObject():void 
		将当前类的非静态（non-static）和非瞬态（non-transient）字段写入此流。只能从要序列化的类的writeObject方法调用此函数。如果不是这样调用，它将抛出NotActiveException异常。
		【Throws】：
			IOException 如果在写入底层输出流时发生I/O错误。
	drain():protected void 
		排出ObjectOutputStream中的所有缓冲数据。类似于flush，但不会将flush传播到底层流。
		【Throws】：
			IOException 如果在写入底层流时发生I/O错误。
	enableReplaceObject(boolean enable):protected boolean 
		enable - 用于启用对象替换的布尔参数
		使流能够替换流中的对象。启用后，将为正在序列化的每个对象调用replaceObject方法。
		如果enable为true，并且安装了安全管理器，则此方法首先调用安全管理器的checkPermission方法，并具有SerializablePermission("enableSubstitution")权限，以确保允许流替换流中的对象。
		【Throws】：
			SecurityException 如果安全管理器存在，并且其checkPermission方法拒绝允许流替换流中的对象。
	flush():void 
		△ 刷新流。这将写入任何缓冲的输出字节并刷新到底层流。
		【Throws】：
			IOException 如果发生I/O错误。
	putFields():ObjectOutputStream.PutField 
		检索用于缓冲要写入流的持久字段的对象。调用writeFields方法时，这些字段将写入流。
		返回保存可序列化字段的Putfield类实例。
		【Throws】：
			IOException 如果发生I/O错误。
	replaceObject(Object obj):protected Object 
		obj - 要替换的对象。
		此方法将允许ObjectOutputStream的可信子类在序列化期间用一个对象替换另一个对象。在调用enableReplaceObject之前，将禁用替换对象。enableReplaceObject方法检查请求进行替换的流是否可以信任。写入序列化流的每个对象的第一次出现将传递给replaceObject。对该对象的后续引用将由对replaceObject的原始调用返回的对象替换。为了确保对象的private状态不会无意中公开，只有受信任的流才能使用replaceObject。
		ObjectOutputStream.writeObject方法采用一个Object类型的参数（与Serializable类型不同），以便在不可序列化对象被可序列化对象替换的情况下使用。
		当子类替换对象时，它必须确保在反序列化期间必须进行互补替换，或者被替换对象与将存储引用的每个字段都兼容。如果对象的类型不是字段或数组元素类型的子类，则通过引发异常中止序列化，并且不会存储该对象。
		第一次遇到每个对象时，只调用一次此方法。对该对象的所有后续引用都将重定向到新对象。此方法应返回要替换的对象或原始对象。
		可以返回null作为要替换的对象，但在包含对原始对象的引用的类中可能会导致NullReferenceException异常，因为它们可能需要一个对象而不是null。
		【Throws】：
			IOException 底层输出流引发的任何异常。
	reset():void 
		△ 重置将忽略已写入流的任何对象的状态。状态被重置为与新的ObjectOutputStream相同。流中的当前点标记为“重置”，因此相应的ObjectInputStream将在同一点重置。以前写入流的对象将不会被引用已存在于流中。它们将被再次写入流中。
		【Throws】：
			IOException 如果在序列化对象时调用reset()。
	useProtocolVersion(int version):void 
		version - 使用java.io.ObjectStreamConstants中的ProtocolVersion。
		指定写入流时要使用的流协议版本。
		此例程提供一个钩子，使当前版本的序列化能够以与流格式的早期版本向后兼容的格式写入。
		将尽一切努力避免引入额外的向后不兼容性；但是，有时没有其他选择。
		【Throws】：
			IllegalStateException 如果在序列化任何对象之后调用。
			IllegalArgumentException 如果传入无效版本。
			IOException 如果发生I/O错误。
	write(byte b[]):void 
		b - 要写入的数据。
		△ 写入字节数组。在实际写入字节之前，此方法将一直阻塞。
		【Throws】：
			IOException 如果发生I/O错误。
	write(byte b[], int off, int len):void 
		b - 要写入的数据。
		off - 数据中的起始偏移量。
		len - 要写入的字节数。
		△ 写入字节的子数组。在实际写入字节之前，此方法将一直阻塞。
		【Throws】：
			IOException 如果发生I/O错误。特别是，如果输出流关闭，则引发IOException。
	write(int b):abstract void 
		b - 字节。
		△ 写入一个字节。此方法将一直阻塞，直到实际写入字节为止。
		【Throws】：
			IOException 如果发生I/O错误。特别是，如果输出流关闭，则引发IOException。
	writeBoolean(boolean v):void 
		v - 要写入的布尔值。
		△ 写入布尔值。
		【Throws】：
			IOException 如果发生I/O错误。
	writeByte(int val):void 
		val - 要写入的字节值。
		△ 写入8位字节。
		【Throws】：
			IOException 果在写入底层流时发生I/O错误。
	writeBytes(String str):void 
		str - 要写入的字节字符串。
		△ 以字节序列写入字符串。
		【Throws】：
			IOException 果在写入底层流时发生I/O错误。
	writeChar(int val):void 
		val - 要写入的char值。
		△ 写入16位字符。
		【Throws】：
			IOException 果在写入底层流时发生I/O错误。
	writeChars(String str):void 
		str - 要写入的字符串值。
		△ 以字符序列形式写入字符串。
		【Throws】：
			IOException 果在写入底层流时发生I/O错误。
	writeClassDescriptor(ObjectStreamClass desc):protected void 
		desc - 要写入流的描述符类。
		将指定的描述符类写入ObjectOutputStream。类描述符用于标识写入流的对象的类。ObjectOutputStream的子类可以重写此方法以自定义类描述符写入序列化流的方式。然后，应重写ObjectOutputStream中的对应方法readClassDescriptor，以从其自定义流表示形式重新构造类描述符。默认情况下，此方法根据对象序列化规范中定义的格式写入类描述符。
		注意，只有当ObjectOutputStream未使用旧的序列化流格式（通过调用ObjectOutputStream的useProtocolVersion方法设置）时，才会调用此方法。如果此序列化流使用旧格式（PROTOCOL_VERSION_1），则类描述符将以无法重写或自定义的方式在内部写入。
		【Throws】：
			IOException 如果发生I/O错误。
	writeDouble(double val):void 
		val - 要写入的double值。
		△ 写入64位double值。
		【Throws】：
			IOException 果在写入底层流时发生I/O错误。
	writeFields():void 
		将缓冲字段写入流。
		【Throws】：
			IOException 果在写入底层流时发生I/O错误。
			NotActiveException 当没有调用Classes writeObject方法来写入对象的状态时调用。
	writeFloat(float val):void 
		val - 要写入的float值。
		△ 写入32位float值。
		【Throws】：
			IOException 果在写入底层流时发生I/O错误。
	writeInt(int v):void 
		val - 要写入的int值。
		△ 写入32位int值。
		【Throws】：
			IOException 果在写入底层流时发生I/O错误。
	writeLong(long v):void 
		val - 要写入的long值。
		△ 写入64位long值。
		【Throws】：
			IOException 果在写入底层流时发生I/O错误。
	writeObject(Object obj):void 
		obj - 要写入的对象
		△ 将指定的对象写入ObjectOutputStream。写入对象的类、类的签名以及类及其所有父类型的非瞬态（non-transient）和非静态（non-static）字段的值。可以使用writeObject和readObject方法重写类的默认序列化。此对象引用的对象是以可传递的方式写入的，以便由ObjectInputStream重新构造完整的等效对象图。
		对于OutputStream问题和不应序列化的类，会引发异常。所有异常对OutputStream都是致命的，而OutputStream仍处于不确定状态，调用方可以忽略或恢复流状态。
		【Throws】：
			InvalidClassException 序列化使用的类有问题。
			NotSerializableException 要序列化的某些对象未实现java.io.Serializable接口。
			IOException 底层输出流引发的任何异常。
	writeShort(int val):void 
		val - 要写入的short值。
		△ 写入16位short值。
		【Throws】：
			IOException 果在写入底层流时发生I/O错误。	
	writeStreamHeader():protected void 
		提供了writeStreamHeader方法，因此子类可以将自己的头追加或提前追加到流中。它将幻数和版本写入流。
		【Throws】：
			IOException 果在写入底层流时发生I/O错误。	
	writeUnshared(Object obj):void 
		obj - 要写入流的对象。
		将“非共享”对象写入ObjectOutputStream。此方法与writeObject相同，只是它总是将给定对象作为流中新的唯一对象写入（而不是指向以前序列化的实例的反向引用）。明确地：
			● 通过writeUnshared写入的对象总是以与新出现的对象（尚未写入流的对象）相同的方式序列化，而不管该对象以前是否写入过。
			● 如果writeObject用于写入以前用writeUnshared写入的对象，则以前的writeUnshared操作将被视为是单独对象的写入操作。换句话说，ObjectOutputStream将永远不会生成对通过调用writeUnshared写入的对象数据的反向引用。
		虽然通过writeUnshared写入对象本身并不保证反序列化时对该对象的唯一引用，但它允许在流中多次定义单个对象，以便接收器对readUnshared的多次调用不会发生冲突。注意，上面描述的规则只适用于用writeUnshared写入的基本级对象，而不适用于要序列化的对象图中任何可传递引用的子对象。
		重写此方法的ObjectOutputStream子类只能在具有“enableSubclassImplementation”序列化权限的安全上下文中构造；任何尝试在没有此权限的情况下实例化此类子类都将导致引发SecurityException异常。
		【Throws】：
			InvalidClassException 如果要序列化的对象的类存在问题
			NotSerializableException 如果要序列化的图形中的对象未实现Serializable接口
			IOException 如果在序列化过程中发生I/O错误。
	void writeUTF(String str)
		str - 要写入的字符串值。
		△ 以修改后的UTF-8格式写入此字符串的原始数据。请注意，将字符串作为原始数据或对象写入流之间存在显著差异。由writeObject写入的String实例最初作为字符串写入流中。Future writeObject()调用将对字符串的引用写入流中。
		【Throws】：
			IOException 果在写入底层流时发生I/O错误。	
			
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
附录：
	1、注：文档中的△符号表示覆盖重写方法，✘符号表示已淘汰的方法。	
	2、注：文档中的★符号表示抽象方法或者直接抛出UnsupportedOperationException异常的方法，总之没有实现具体功能代码的方法。	













		