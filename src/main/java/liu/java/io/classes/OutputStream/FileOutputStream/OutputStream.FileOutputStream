----------------------------------------FileOutputStream--------------------------------------------------------------------------------------------------------------
FileOutputStream：文件输出流	【Since:JDK1.0】
	文件输出流是将数据写入文件或文件描述符(FileDescriptor)的输出流。文件是否可用或是否可以创建取决于底层平台。特别是一些平台，一次只允许一个FileOutputStream（或其他文件写入对象）打开一个文件进行写入。在这种情况下，如果所涉及的文件已经打开，则此类中的构造函数将失败。
	FileOutputStream用于写入原始字节流，如图像数据。对于写入字符流，请考虑使用FileWriter。
	
	
	类定义	：public class FileOutputStream extends OutputStream
	实现接口	：AutoCloseable, Closeable ,Flushable
------------------------------------------------------------------------------------------------------------------------------------------------------
Constructor Summary（构造器概要）：
	public FileOutputStream(File file)
		file - 要打开进行写入的文件。
		创建文件输出流以写入指定文件对象表示的文件。将创建一个新的FileDescriptor对象来表示此文件连接。
		首先，如果有安全管理器，则调用其checkWrite方法，并使用文件参数表示的路径作为其参数。
		如果文件存在，但是目录而不是常规文件，不存在但无法创建，或者由于任何其他原因无法打开，则会引发FileNotFoundException异常。
		【Throws】：
			FileNotFoundException 如果文件存在，但是目录而不是常规文件，不存在但无法创建，或者由于任何其他原因无法打开。
			SecurityException 如果安全管理器存在，并且其checkWrite方法拒绝对文件的写访问。
	public FileOutputStream(File file, boolean append)
		file - 要打开进行写入的文件。
		append - 如果为true，则字节将写入文件的结尾而不是开头（即追加）。
		创建文件输出流以写入指定文件对象表示的文件。如果第二个参数为true，那么字节将写入文件的结尾而不是开头。将创建一个新的FileDescriptor对象来表示此文件连接。
		首先，如果有安全管理器，则调用其checkWrite方法，并使用文件参数表示的路径作为其参数。
		如果文件存在，但是目录而不是常规文件，不存在但无法创建，或者由于任何其他原因无法打开，则会引发FileNotFoundException异常。
		【Throws】：
			FileNotFoundException 如果文件存在，但是目录而不是常规文件，不存在但无法创建，或者由于任何其他原因无法打开。
			SecurityException 如果安全管理器存在，并且其checkWrite方法拒绝对文件的写访问。		
	public FileOutputStream(FileDescriptor fdObj)
		fdObj - 要打开以进行写入的文件描述符
		创建文件输出流以写入指定的文件描述符，该描述符表示与文件系统中实际文件的现有连接。
		首先，如果有安全管理器，则调用其checkWrite方法，并使用文件参数表示的路径作为其参数。
		如果fdObj为null，则引发NullPointerException异常。
		如果fdObj无效，则此构造函数不会引发异常。但是，如果在结果流上调用方法以尝试对该流进行I/O操作，则会引发IOException异常。
		【Throws】：
			SecurityException 如果安全管理器存在，并且其checkWrite方法拒绝对文件描述符的写访问。
	public FileOutputStream(String name)
		name - 依赖系统的文件名
		创建文件输出流以使用指定名称写入文件。将创建一个新的FileDescriptor对象来表示此文件连接。
		首先，如果有一个安全管理器，它的checkWrite方法将以name作为参数进行调用。
		如果文件存在，但是目录而不是常规文件，不存在但无法创建，或者由于任何其他原因无法打开，则会引发FileNotFoundException。
		【Throws】：
			FileNotFoundException 如果文件存在，但是目录而不是常规文件，不存在但无法创建，或者由于任何其他原因无法打开。
			SecurityException 如果安全管理器存在，并且其checkWrite方法拒绝对文件的写访问。		
	public FileOutputStream(String name, boolean append)
		name - 依赖系统的文件名
		append - 如果为true，则字节将写入文件的结尾而不是开头（即追加）。
		创建一个文件输出流，以使用指定的名称写入该文件。如果第二个参数为true，那么字节将写入文件的结尾而不是开头（即追加）。将创建一个新的FileDescriptor对象来表示此文件连接。
		首先，如果有一个安全管理器，它的checkWrite方法将以name作为参数进行调用。
		如果该文件存在，但是目录而不是常规文件，不存在但无法创建，或者由于任何其他原因无法打开，则会引发FileNotFoundException异常。
		【Throws】：
			FileNotFoundException 如果文件存在，但是目录而不是常规文件，不存在但无法创建，或者由于任何其他原因无法打开。
			SecurityException 如果安全管理器存在，并且其checkWrite方法拒绝对文件的写访问。		
			
Method Summary（方法概要）：
	close():void 
		△ 关闭此文件输出流并释放与此流关联的任何系统资源。此文件输出流可能不再用于写入字节。
		如果此流具有关联的通道，则该通道也将关闭。
		【Throws】：
			IOException 如果发生I/O错误。
	finalize():protected void 
		△ 清除到文件的连接，并确保在不再引用此流时调用此文件输出流的Close方法。
		【Throws】：
			IOException 如果发生I/O错误。
	getChannel():FileChannel 
		返回与此文件输出流关联的唯一FileChannel对象。
		返回通道的初始位置将等于到目前为止写入文件的字节数，除非此流处于追加模式，在这种情况下，它将等于文件的大小。向该流写入字节将相应地增加通道的位置。通过显式或写入方式改变通道的位置，将更改此流的文件位置。
		返回与此文件输出流关联的文件通道。
	getFD():final FileDescriptor 
		返回与此流关联的文件描述符。
		返回FileDescriptor对象，表示与此FileOutputStream对象使用的文件系统中的文件的连接。
		【Throws】：
			IOException 如果发生I/O错误。
	write(byte b[]):void 
		b - 数据。
		△ 将b.length字节从指定的字节数组写入此文件输出流。
		【Throws】：
			IOException 如果发生I/O错误。
	write(byte b[], int off, int len):void 
		b - 数据。
		off - 数据中的起始偏移量。
		len - 要写入的字节数。
		△ 将指定字节数组中以偏移量off开始的len字节写入此文件输出流。
		【Throws】：
			IOException 如果发生I/O错误。
	write(int b):void 
		b - 要写入的字节。
		△ 将指定的字节写入此文件输出流。实现OutputStream的写入方法。
		【Throws】：
			IOException 如果发生I/O错误。
	
			
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
附录：
	1、注：文档中的△符号表示覆盖重写方法，✘符号表示已淘汰的方法。	
	2、注：文档中的★符号表示抽象方法或者直接抛出UnsupportedOperationException异常的方法，总之没有实现具体功能代码的方法。	













		