----------------------------------------StringWriter--------------------------------------------------------------------------------------------------------------
StringWriter：字符串写入器	【Since:JDK1.1】
	在字符串缓冲区中收集其输出的字符流，然后可以使用该缓冲区构造字符串。
	关闭StringWriter没有效果。此类中的方法可以在流关闭后调用，而不生成IOException异常。
	
	
	类定义	：public class StringWriter extends Writer
	实现接口	：Closeable, Flushable, Appendable, AutoCloseable
------------------------------------------------------------------------------------------------------------------------------------------------------
Field Summary（字段概要）
	Writer.lock : Object
		用于同步此流上的操作的对象。为了提高效率，字符流对象可以使用自身以外的对象来保护关键部分。因此，子类应该在此字段中使用对象，而不是此方法或同步方法。

Constructor Summary（构造器概要）：
	public StringWriter()
		使用默认的初始字符串缓冲区大小创建新的StringWriter。
	public StringWriter(int initialSize)
		initialSize - 在自动扩展缓冲区之前，将适合该缓冲区的char值的数目
		使用指定的初始字符串缓冲区大小创建新的StringWriter。
		【Throws】：
			IllegalArgumentException 如果initialSize为负数。
	
Method Summary（方法概要）：
	append(char c):Writer 
		c - 要追加的16位字符
		△ 将指定的字符追加到此写入器。
		对out.append(c)形式的此方法的调用与下面调用的行为完全相同
			out.write(c) 
		返回此写入器。
	append(CharSequence csq):Writer 
		csq - 要追加的字符序列。如果csq为空，那么将向该写入器追加四个字符“null”。
		△ 将指定的字符序列追加到此写入器。
		对out.append(csq)形式的此方法的调用与下面调用的行为完全相同
			out.write(csq.toString()) 
		根据字符序列csq的toString规范，不能追加整个序列。例如，调用字符缓冲区的toString方法将返回一个子序列，其内容取决于缓冲区的位置和限制。
		返回此写入器。
		【Throws】：
			IOException 如果发生I/O错误。
	append(CharSequence csq, int start, int end):Writer 
		csq - 要追加的字符序列。如果csq为空，那么将向该写入器追加四个字符“null”。
		start - 子序列中第一个字符的索引
		end - 子序列中最后一个字符后面的字符的索引
		△ 将指定字符序列的子序列追加到此写入器。可追加的。
		当csq不为空时，对out.append(csq, start, end)形式的此方法的调用的行为与调用的方式完全相同。
			out.write(csq.subSequence(start, end).toString()) 
		返回此写入器。		
	close():void 
		△ 关闭StringWriter没有效果。此类中的方法可以在流关闭后调用，而不生成IOException异常。
		【Throws】：
			IOException 如果发生I/O错误。
	flush():void 
		△ 刷新此流。
	getBuffer():StringBuffer 
		返回字符串缓冲区本身。
		返回保存当前缓冲区值的StringBuffer。
	toString():String 
		△ 以字符串形式返回缓冲区的当前值。
	write(char cbuf[], int off, int len):void 
		cbuf - 要写入的字符数组
		off - 开始写入字符的偏移量
		len - 要写入的字符数量
		△ 写入字符数组的一部分。
	write(int c):void 
		c - 使用int类型指定要写入的字符
		△ 只写单个字符。
	write(String str):void 
		str - 要写入的字符串
		△ 写入字符串。
	write(String str, int off, int len):void 
		str - 字符串
		off - 开始写入字符的偏移量
		len - 要写入的字符数量
		△ 写入字符串的一部分。	
			
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
附录：
	1、注：文档中的△符号表示覆盖重写方法，✘符号表示已淘汰的方法。	
	2、注：文档中的★符号表示抽象方法或者直接抛出UnsupportedOperationException异常的方法，总之没有实现具体功能代码的方法。	













		