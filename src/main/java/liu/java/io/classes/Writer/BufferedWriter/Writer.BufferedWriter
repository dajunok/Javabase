----------------------------------------BufferedWriter--------------------------------------------------------------------------------------------------------------
BufferedWriter：缓冲写入器	【Since:JDK1.1】
	将文本写入字符输出流，缓冲字符，以便有效地写入单个字符、数组和字符串。
	可以指定缓冲区大小，也可以接受默认大小。默认值对于大多数用途来说都足够大。
	提供了newLine()方法，该方法使用平台自己的行分隔符概念（由系统属性line.separator定义）。并非所有平台都使用换行符（“\n”）终止行。因此，调用此方法终止每个输出行比直接编写换行符更可取。
	通常，写入器(Writer)会立即将其输出发送到底层字符流或字节流。除非需要提示输出，否则建议将BufferedWriter包装在write()操作可能代价高昂的任何写入器周围，如FileWriter和OutputStreamWriter。例如：
		PrintWriter out    = new PrintWriter(new BufferedWriter(new FileWriter("foo.out")));
	将PrintWriter的输出缓冲到文件中。如果不进行缓冲，每次调用print()方法都会导致将字符转换为字节，然后立即将这些字节写入文件，这可能非常低效。
	
	
	类定义	：public class BufferedWriter extends Writer
	实现接口	：Closeable, Flushable, Appendable, AutoCloseable
------------------------------------------------------------------------------------------------------------------------------------------------------
Field Summary（字段概要）
	Writer.lock : Object
		用于同步此流上的操作的对象。为了提高效率，字符流对象可以使用自身以外的对象来保护关键部分。因此，子类应该在此字段中使用对象，而不是此方法或同步方法。

Constructor Summary（构造器概要）：
	public BufferedWriter(Writer out)
		out - Writer
		创建使用默认大小的输出缓冲区的缓冲字符输出流。
	public BufferedWriter(Writer out, int sz)
		out - Writer
		sz - 出缓冲区大小，正整数
		【Throws】：
			IllegalArgumentException 如果sz <= 0
	
Method Summary（方法概要）：
	close():abstract void 
		△ 关闭流，首先对其进行刷新。关闭流后，进一步的write()或flush()调用将导致引发IOException。关闭以前关闭的流没有效果。
		【Throws】：
			IOException 如果发生I/O错误。
	flush():void 
		△ 刷新流。
		【Throws】：
			IOException 如果发生I/O错误。
	newLine():void 
		写入行分隔符。行分隔符字符串由系统属性line.separator定义，不一定是单个换行符（“\n”）。
		【Throws】：
			IOException 如果发生I/O错误。
	write(char cbuf[], int off, int len):void 
		cbuf - 要写入的字符数组
		off - 开始写入字符的偏移量
		len - 要写入的字符数量
		△ 写入字符数组的一部分。	
		通常，此方法将给定数组中的字符存储到此流的缓冲区中，并根据需要将缓冲区刷新到底层流中。但是，如果请求的长度至少与缓冲区相同，那么此方法将刷新缓冲区并将字符直接写入底层流。因此，冗余的BufferedWriter不会不必要地复制数据。
		【Throws】：
			IOException 如果发生I/O错误。
	write(int c):void 
		c - 使用int类型指定要写入的字符
		△ 只写一个字符。
		【Throws】：
			IOException 如果发生I/O错误。
	write(String s, int off, int len):void 
		s - 要写入的字符串
		off - 开始写入字符的偏移量
		len - 要写入的字符数量
		△ 写入字符串的一部分。	
		如果len参数的值为负数，则不写入任何字符。这与超类中此方法的规范相反，超类要求抛出IndexOutOfBoundsException异常。
		【Throws】：
			IOException 如果发生I/O错误。
			
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
附录：
	1、注：文档中的△符号表示覆盖重写方法，✘符号表示已淘汰的方法。	
	2、注：文档中的★符号表示抽象方法或者直接抛出UnsupportedOperationException异常的方法，总之没有实现具体功能代码的方法。	













		