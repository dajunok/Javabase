----------------------------------------CharArrayWriter--------------------------------------------------------------------------------------------------------------
CharArrayWriter：字符数组写入器	【Since:JDK1.1】
	此类实现了一个可以用作编写器的字符缓冲区。当数据写入流时，缓冲区自动增长。可以使用toCharArray()和toString()检索数据。
	注意：对此类调用close()没有任何效果，并且可以在流关闭后调用此类的方法，而不产生IOException异常。
	
	
	类定义	：public class CharArrayWriter extends Writer
	实现接口	：Closeable, Flushable, Appendable, AutoCloseable
------------------------------------------------------------------------------------------------------------------------------------------------------
Field Summary（字段概要）
	buf : char[]
		存储数据的缓冲区。
	count : int	
		缓冲区中的字符数。
		
Constructor Summary（构造器概要）：
	public CharArrayWriter()
		创建新的CharraryWriter。
	public CharArrayWriter(int initialSize)
		initialSize - 指定初始缓冲区大小的int。
		创建具有指定初始大小的新CharrayWriter。
		【Throws】：
			IllegalArgumentException 如果initialSize为负数。
			
Method Summary（方法概要）：
	append(char c):Writer 
		c - 要追加的16位字符
		△ 将指定的字符追加到此写入器。
		对out.append(c)形式的此方法的调用与调用的行为完全相同
			out.write(c) 
		返回此写入器。
	append(CharSequence csq):Writer 
		csq - 要追加的字符序列。如果csq为空，那么将向该写入器追加四个字符“null”。
		△ 将指定的字符序列追加到此写入器。
		对out.append(csq)形式的此方法的调用与调用的行为完全相同
			out.write(csq.toString()) 
		根据字符序列csq的toString规范，不能追加整个序列。例如，调用字符缓冲区的toString方法将返回一个子序列，其内容取决于缓冲区的位置和限制。
		返回此写入器。
	append(CharSequence csq, int start, int end):Writer 
		csq - 要追加的字符序列。如果csq为空，那么将向该写入器追加四个字符“null”。
		start - 子序列中第一个字符的索引
		end - 子序列中最后一个字符后面的字符的索引
		△ 将指定字符序列的子序列追加到此写入器。
		当csq不为空时，对out.append(csq, start, end)形式的此方法的调用的行为与调用的方式完全相同。
			out.write(csq.subSequence(start, end).toString()) 
		返回此写入器。
		【Throws】：
			IndexOutOfBoundsException 如果start或end为负，start大于end，或者end大于csq.length()。	
	close():void 
		△  关闭流，此方法不会释放缓冲区，因为它的内容可能仍然是必需的。注意：在这个类中调用这个方法将没有效果。
	flush():abstract void 
		△ 刷新流。（在这个类中调用这个方法将没有效果）
	reset():void 
		重置缓冲区，以便在不丢弃已分配的缓冲区的情况下再次使用它。
	size():int 
		返回缓冲区的当前大小。
	toCharArray():char[]
		返回输入数据的副本。
		从输入数据复制的字符数组。
	toString():String 
		△  将输入数据转换为字符串。
	write(char cbuf[], int off, int len):void 
		cbuf - 要写入的字符数组
		off - 开始写入字符的偏移量
		len - 要写入的字符数量
		△ 将字符写入缓冲区。	
	write(int c):void 
		c - 使用int类型指定要写入的字符
		△ 将字符写入缓冲区。
	write(String str, int off, int len):void 
		str - 字符串
		off - 开始写入字符的偏移量
		len - 要写入的字符数量
		△ 将字符串的一部分写入缓冲区。
	writeTo(Writer out):void 
		out - 要写入的输出流
		将缓冲区的内容写入另一个字符流。
		【Throws】：
			IOException 如果发生I/O错误。
			
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
附录：
	1、注：文档中的△符号表示覆盖重写方法，✘符号表示已淘汰的方法。	
	2、注：文档中的★符号表示抽象方法或者直接抛出UnsupportedOperationException异常的方法，总之没有实现具体功能代码的方法。	













		