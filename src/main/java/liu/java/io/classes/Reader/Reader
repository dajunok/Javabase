----------------------------------------Reader--------------------------------------------------------------------------------------------------------------
Reader：阅读器	【Since:JDK1.0】
	用于读取字符流的抽象类。子类必须实现的唯一方法是read(char[], int, int)和close()。然而，大多数子类将覆盖这里定义的一些方法，以便提供更高的效率、额外的功能，或者两者兼而有之。
	
	
	
	类定义	：public abstract class Reader implements Readable, Closeable
	实现接口	：Readable, Closeable
	直接子类	：BufferedReader, CharArrayReader, FilterReader, InputStreamReader, PipedReader, StringReader
------------------------------------------------------------------------------------------------------------------------------------------------------
Field Summary（字段概要）
	lock : Object
		用于同步此流上的操作的对象。为了提高效率，字符流对象可以使用自身以外的对象来保护关键部分。因此，子类应该在此字段中使用对象，而不是此方法或同步方法。


Constructor Summary（构造器概要）：
	protected Reader()
		创建一个新的字符流阅读器，其关键部分将在阅读器本身上同步。
	protected Reader(Object lock)
		lock - 要同步的对象。
		创建一个新的字符流阅读器，其关键部分将在给定对象上同步。
	
Method Summary（方法概要）：
	close():abstract void 
		△ ★ 关闭流并释放与其关联的任何系统资源。流关闭后，进一步的read()、ready()、mark()、reset()或skip()调用将引发IOException。关闭以前关闭的流没有效果。
		【Throws】：
			IOException 如果发生I/O错误。
	mark(int readAheadLimit):void 
		readAheadLimit - 限制在保留标记的同时可以读取的字符数。读取这么多字符后，尝试重置（reset）流可能会失败。
		标记流中的当前位置。对reset()的后续调用将尝试将流重新定位到此点。并非所有字符输入流都支持mark()操作。
		【Throws】：
			IOException 如果流不支持mark()，或者发生其他I/O错误。
	markSupported():boolean 
		指示此流是否支持mark()操作。默认实现总是返回false。子类应重写此方法。
		如果且仅当此流支持mark操作时返回true。
	read():int 
		读取单个字符。此方法将阻塞，直到字符可用、发生I/O错误或到达流的末尾。
		想要支持有效的单字符输入的子类应该重写这个方法。
		返回以0到65535（0x00-0xffff）范围内的整数形式读取的字符，或者如果已达到流的结尾，返回-1。
		【Throws】：
			IOException 如果发生I/O错误。
	read(char cbuf[]):int 
		cbuf - 目标缓冲区
		将字符读取到数组中。此方法将阻塞，直到某些输入可用、发生I/O错误或到达流的末尾。
		返回已读取的字符数，如果已到达流的结尾，则返回-1。
		【Throws】：
			IOException 如果发生I/O错误。
	read(char cbuf[], int off, int len):abstract int 
		cbuf - 目标缓存
		off - 开始存储字符的偏移量
		len - 要读取的最大字符数量
		★ 将字符读入数组的一部分。此方法将阻塞，直到某些输入可用、发生I/O错误或到达流的末尾。
		返回已读取的字符数，如果已到达流的结尾，则返回-1。
		【Throws】：
			IOException 如果发生I/O错误。
	read(java.nio.CharBuffer target):int 
		target - 读取字符的缓冲区
		△ 尝试将字符读取到指定的字符缓冲区。缓冲区按原样用作字符存储库：所做的唯一更改是put操作的结果。不执行缓冲区的翻转（flipping）或重绕（rewinding）。
		【Throws】：
			IOException 如果发生I/O错误。
			NullPointerException - 如果target为null。
			ReadOnlyBufferException - 如果目标是只读缓冲区
	ready():boolean 
		指示是否已准备好读取此流。
		如果保证下一个read()不会阻止输入，则返回true，否则返回false。请注意，返回false并不保证下一次读取将被阻塞。
		【Throws】：
			IOException 如果发生I/O错误。
	reset():void 
		重置流。如果流已被标记，则尝试将其重新定位到标记处。如果流未被标记，则尝试以某种适合特定流的方式重置它，例如将其重新定位到其起点。不是所有的字符输入流都支持reset()操作，有些支持reset()而不支持mark()。
		【Throws】：
			IOException 如果流未被标记，或者标记已失效，或者流不支持reset()，或者发生其他I/O错误。
	skip(long n):long 
		n - 要跳过的字符数
		跳过n个字符。此方法将阻塞，直到某些字符可用、发生I/O错误或到达流的末尾。
		返回实际跳过的字符数。
		【Throws】：
			IllegalArgumentException 如果n为负数。
			IOException 如果发生I/O错误。
			
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
附录：
	1、注：文档中的△符号表示覆盖重写方法，✘符号表示已淘汰的方法。	
	2、注：文档中的★符号表示抽象方法或者直接抛出UnsupportedOperationException异常的方法，总之没有实现具体功能代码的方法。	













		