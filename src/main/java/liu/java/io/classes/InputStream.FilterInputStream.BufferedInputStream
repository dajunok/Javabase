----------------------------------------BufferedInputStream--------------------------------------------------------------------------------------------------------------
BufferedInputStream：缓冲输入流	【Since:JDK1.0】
	BufferedInputStream为另一个输入流添加了功能，即缓冲输入并支持mark和reset方法的能力。创建BufferedInputStream时，将创建一个内部缓冲区数组。当读取或跳过流中的字节时，根据需要从包含的输入流中重新填充内部缓冲区，一次填充多个字节。mark操作会记住输入流中的一个点，reset操作会导致在从包含的输入流中获取新字节之前重新读取自最新mark操作以来读取的所有字节。
	
		
	类定义	：public class BufferedInputStream extends FilterInputStream
	实现接口	：AutoCloseable, Closeable	
------------------------------------------------------------------------------------------------------------------------------------------------------
Field Summary（字段概要）：
	buf : byte[]	
		存储数据的内部缓冲区数组。必要时，可以用另一个大小不同的数组替换。	
	count : int
		索引1大于缓冲区中最后一个有效字节的索引。此值始终在0到buf.length的范围内；元素buf[0]到buf[count-1]包含从基础输入流获取的缓冲输入数据。
	marklimit : int
		在调用mark方法之后，对reset方法的后续调用失败之前所允许的最大提前读取量。当pos和markpos之间的差异超过marklimit时，可以通过将markpos设置为-1来删除标记。
	markpos : int
		上次调用mark方法时的pos字段值。
		此值始终在-1到pos范围内。如果输入流中没有标记的位置，则此字段为-1。如果输入流中有标记的位置，那么buf[markpos]是重置操作后要作为输入提供的第一个字节。如果markpos不是-1，那么从位置buf[markpos]到buf[pos-1]的所有字节必须保留在缓冲区数组中（尽管它们可以移动到缓冲区数组中的另一个位置，并对count、pos和markpos的值进行适当的调整）；除非和直到位置和markpos之间的差异超过marklimit，否则不能丢弃它们。
	pos : int
		缓冲区中的当前位置。这是要从buf数组中读取的下一个字符的索引。
		此值始终在0到count的范围内。如果小于count，则buf[pos]是要作为输入提供的下一个字节；如果等于count，则下一个读取或跳过操作将需要从包含的输入流中读取更多的字节。
		
Constructor Summary（构造器概要）：
	public BufferedInputStream(InputStream in)
		in - 基础输入流。
		创建BufferedInputStream并保存其参数（输入流）以供以后使用。内部缓冲区数组被创建并存储在buf中。
	public BufferedInputStream(InputStream in, int size)
		in - 基础输入流。
		size - 缓冲区大小。
		创建具有指定缓冲区大小的BufferedInputStream，并将其参数（输入流）保存在中，以供以后使用。创建一个长度为size的内部缓冲区数组，并将其存储在buf中。
		【Throws】：
			IllegalArgumentException 如果size <= 0.
			
Method Summary（方法概要）：
	available():int 
		△  返回可以从此输入流中读取（或跳过）的字节数的估计值，而不被此输入流方法的下一个调用方阻塞。下一次调用可能是同一个线程或另一个线程。单个读取或跳过这么多字节不会阻塞，但可能会读取或跳过更少的字节。
		此方法返回缓冲区中剩余要读取的字节数（count-pos）和调用in.available()的结果之和。
		【Throws】：
			IOException 如果此输入流已通过调用其close()方法关闭，或发生I/O错误。
	close():void 
		△  关闭此输入流并释放与该流关联的任何系统资源。关闭流后，进一步的read()、available()、reset()或skip()调用将引发IOException。关闭以前关闭的流没有效果。
		【Throws】：
			IOException 如果发生I/O错误。
	mark(int readlimit):synchronized void 
		readlimit - 标记位置无效之前可以读取的最大字节数限制。
		△  标记此输入流中的当前位置。对reset方法的后续调用将此流重新定位到最后标记的位置，以便后续读取重新读取相同的字节。
	markSupported():boolean 
		△  测试此输入流是否支持mark和reset方法。BufferedInputStream的markSupported方法返回true。
	read():int 
		△  从输入流中读取下一个字节数据。值byte作为int返回，范围在0到255之间。如果由于到达流结尾而没有字节可用，则返回值-1。此方法将一直阻塞，直到输入数据可用、检测到流的结尾或引发异常为止。
		【Throws】：
			IOException 如果此输入流已通过调用其close()方法关闭，或发生I/O错误。
	read(byte b[], int off, int len):int
		b - 读取数据的缓冲区。
		off - 数组b中写入数据的起始偏移量。
		len - 要读取的最大字节数。		
		△  从给定的偏移量开始，将字节输入流中的字节读取到指定的字节数组中。
		此方法实现了InputStream类的相应读取方法的一般约定。作为一种额外的便利，它尝试通过重复调用底层流的read方法来读取尽可能多的字节。此迭代读取将继续进行，直到满足以下条件之一：
			● 已读取指定的字节数，
			● 底层流的read方法返回-1，表示文件结束，或者
			● 基础流的available方法返回0，表示进一步的输入请求将被阻塞。
		如果对基础流的第一次读取返回-1以指示文件结束，则此方法返回-1。否则，此方法返回实际读取的字节数。
		鼓励类的子类（但不是必需的）尝试以相同的方式读取尽可能多的字节。
		【Throws】：
			IOException 如果第一个字节由于除文件结尾以外的任何原因无法读取，或者输入流已关闭，或者发生其他I/O错误。	
	reset():synchronized void 
		△  将此流重新定位到此输入流上一次调用mark方法时的位置。
		流标记用于需要提前阅读以查看流中的内容的情况。通常，通过调用一些通用的解析器最容易做到这一点。如果流是由解析处理的类型，那么它只是顺其自然。如果流不是那种类型，那么解析器应该在失败时抛出异常。如果在readlimit字节内发生这种情况，则允许外部代码重置流并尝试另一个解析器。
		【Throws】：
			IOException - 如果此流未被标记，或者标记已失效，或者通过调用其close()方法关闭了该流，或者发生了I/O错误。
	skip(long n):long
		n - 要跳过的字节数。
		△  跳过并丢弃此输入流中的n字节数据。由于各种原因，skip方法可能会跳过一些较小的字节，可能是0。将返回跳过的实际字节数。
		【Throws】：
			IOException - 如果此流未被标记，或者标记已失效，或者通过调用其close()方法关闭了该流，或者发生了I/O错误。
			
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
附录：
	1、注：文档中的△符号表示覆盖重写方法，✘符号表示已淘汰的方法。	
	2、注：文档中的★符号表示抽象方法或者直接抛出UnsupportedOperationException异常的方法，总之没有实现具体功能代码的方法。	













		