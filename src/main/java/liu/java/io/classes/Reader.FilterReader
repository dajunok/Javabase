----------------------------------------FilterReader--------------------------------------------------------------------------------------------------------------
FilterReader：过滤阅读器	【Since:JDK1.1】
	用于读取过滤字符流的抽象类。抽象类FilterReader本身提供了将所有请求传递到所包含流的默认方法。FilterReader的子类应该覆盖其中的一些方法，还可以提供额外的方法和字段。
	
	
	
	类定义	：public abstract class FilterReader extends Reader
	实现接口	：AutoCloseable, Closeable ,Readable
	直接子类	：PushbackReader
------------------------------------------------------------------------------------------------------------------------------------------------------
Field Summary（字段概要）
	Reader.lock : Object
		用于同步此流上的操作的对象。为了提高效率，字符流对象可以使用自身以外的对象来保护关键部分。因此，子类应该在此字段中使用对象，而不是此方法或同步方法。
	in : Reader
		底层字符输入流。

Constructor Summary（构造器概要）：
	protected FilterReader(Reader in)
		in - 提供底层流的读取器对象。
		创建新的过滤阅读器。
		【Throws】：
			NullPointerException 如果in为null。
	
Method Summary（方法概要）：
	close():void 
		△ 关闭流并释放与其关联的任何系统资源。流关闭后，进一步的read()、ready()、mark()、reset()或skip()调用将引发IOException。关闭以前关闭的流没有效果。
		【Throws】：
			IOException 如果发生I/O错误。
	mark(int readAheadLimit):void 
		readAheadLimit - 限制在保留标记的同时可以读取的字符数。读取这么多字符后，尝试重置流可能会失败。
		标记流中的当前位置。
		【Throws】：
			IOException 如果发生I/O错误。
	markSupported():boolean 
		指示此流是否支持mark()操作。
		如果且仅当此流支持标记操作时返回true。
	read():int 
		读取单个字符。
		返回以0到65535（0x00-0xffff）范围内的整数形式读取的字符，如果已到达流的结尾，则返回-1。
		【Throws】：
			IOException 如果发生I/O错误。
	read(char cbuf[], int off, int len):int 
		cbuf - 目标缓冲区
		off - 开始存储字符的偏移量
		len - 要读取的最大字符数
		将字符读入数组的一部分。
		返回已读取的字符数，如果已到达流的结尾，则返回-1。
		【Throws】：
			IOException 如果发生I/O错误。
	ready():boolean 
		指示是否已准备好读取此流。
		如果保证下一个read()不会阻塞输入，则返回true，否则返回false。请注意，返回false并不保证下一次读取将被阻塞。
		【Throws】：
			IOException 如果发生I/O错误。
	reset():void 
		重置流。
		【Throws】：
			IOException 如果发生I/O错误。
	skip(long n):long 
		n - 要跳过的字符数。
		返回实际跳过的字符数。
		【Throws】：
			IOException 如果发生I/O错误。
			
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
附录：
	1、注：文档中的△符号表示覆盖重写方法，✘符号表示已淘汰的方法。	
	2、注：文档中的★符号表示抽象方法或者直接抛出UnsupportedOperationException异常的方法，总之没有实现具体功能代码的方法。	













		