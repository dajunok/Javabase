----------------------------------------FilePermission--------------------------------------------------------------------------------------------------------------
FilePermission：文件权限【Since:1.2】
	此类表示对文件或目录的访问。FilePermission由一个路径名和一组对该路径名有效的操作组成。
	pathname是授予指定操作的文件或目录的路径名。以“/”（其中“/”是文件分隔符File.separatorChar）结尾的路径名表示该目录中包含的所有文件和目录。以“/-”结尾的路径名（递归地）表示该目录中包含的所有文件和子目录。包含特殊标记 "<<ALL FILES>>"的路径名与任何文件匹配。
	注意：由单个“*”组成的路径名表示当前目录中的所有文件，而由单个“-”组成的路径名表示当前目录中的所有文件，以及（递归地）当前目录中包含的所有文件和子目录。
	要授予的操作将以包含一个或多个逗号分隔关键字列表的字符串的形式传递给构造函数。可能的关键字有“read”、“write”、“execute”、“delete”和“readlink”。其含义定义如下：
		● read		读取权限
		● write		写入权限
		● execute	执行权限。允许调用Runtime.exec。对应于SecurityManager.checkExec。
		● delete	删除权限。允许调用File.delete。对应于SecurityManager.checkDelete。
		● readlink	读取链接权限。允许通过调用readSymbolicLink方法读取符号链接的目标。
	操作字符串在处理前转换为小写。
	授予FilePermissions时要小心。考虑授予对各种文件和目录的读写访问权限的含义。写操作的"<<ALL FILES>>"权限特别危险。这将授予对整个文件系统的写入权限。这有效地允许的一件事是替换系统二进制文件，包括JVM运行时环境。
	请注意：代码总是可以从它所在的同一目录（或该目录的子目录）中读取文件；它不需要显式的权限来执行此操作。
		
	
	类定义	：public final class FilePermission extends Permission implements Serializable
	实现接口	：Guard, Serializable
------------------------------------------------------------------------------------------------------------------------------------------------------
Constructor Summary（构造器概要）
	public FilePermission(String path, String actions)
		path - 文件/目录的路径名。
		actions - 操作字符串。
		使用指定的操作创建新的FilePermission对象。path是文件或目录的路径名，actions包含对文件或目录授予的所需操作的逗号分隔列表。可能的操作有"read", "write", "execute", "delete", and "readlink"。			
		以“/”（其中“/”是文件分隔符File.separatorChar）结尾的路径名表示该目录中包含的所有文件和目录。以“-”结尾的路径名（递归地）表示该目录中包含的所有文件和子目录。特殊路径名"<<ALL FILES>>"匹配任何文件。
		由单个“*”组成的路径名表示当前目录中的所有文件，而由单个“-”组成的路径名表示当前目录中的所有文件，以及（递归地）当前目录中包含的所有文件和子目录。
		包含空字符串的路径名表示空路径。
		【Throws】：
			IllegalArgumentException 如果操作为null或包含指定的可能操作以外的操作。
			
Method Summary（方法概要）
	equals(Object obj):boolean 
		obj - 我们正在测试的对象是否与此对象相等。
		检查两个FilePermission对象是否相等。检查obj是否为FilePermission，以及是否与此对象具有相同的路径名和操作。
		如果obj是FilePermission，并且与此FilePermission对象具有相同的路径名和操作，则返回true，否则返回false。
	getActions():String 
		返回操作的“规范字符串表示形式”。也就是说，此方法始终按以下顺序返回当前操作：read、write、execute、delete、readlink。例如，如果此FilePermission对象同时允许写操作和读操作，则对GetActions的调用将返回字符串"read,write"。
		返回操作的规范字符串表示形式。
	hashCode():int 
		返回此对象的哈希代码值。
	implies(Permission p):boolean 
		p - 检查的权限。
		检查此FilePermission对象是否“包含”指定的权限。
		更具体地说，如果：
			● p是FilePermission的实例，
			● p的动作是该对象动作的一个子集，并且
			● p的路径名由该对象的路径名隐含。例如，“/tmp/*”表示“/tmp/foo”，因为“/tmp/*”包含“/tmp”目录中的所有文件，包括名为“foo”的文件。
		如果指定的权限不为null并且被此对象包含，则返回true，否则返回false。
	newPermissionCollection():PermissionCollection 
		返回用于存储FilePermission对象的新PermissionCollection对象。
		FilePermission对象的存储方式必须允许它们以任何顺序插入到集合中，但这也使PermissionCollection意味着要以有效（且一致）的方式实现方法。
		例如，如果您有两个文件权限：
			1、"/tmp/-", "read"
			2、"/tmp/scratch/foo", "write"
		您正在使用FilePermission调用隐含方法：
			"/tmp/scratch/foo", "read,write",
		那么implies函数必须同时考虑“/tmp/-”和“/tmp/scratch/foo”权限，因此有效权限为"read,write"，并且implies返回true。FilePermission的“implies”语义由newPermissionCollection方法返回的PermissionCollection对象正确处理。
		返回适用于存储FilePermission的新PermissionCollection对象。
	
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
附录：
	1、注：文档中的△符号表示覆盖重写方法，✘符号表示已淘汰的方法。	
	2、注：文档中的★符号表示抽象方法或者直接抛出UnsupportedOperationException异常的方法，总之没有实现具体功能代码的方法。	
	3、UNC：（Universal Naming Convention）路径：UNC指的是通用命名规则，也称通用命名规范、通用命名约定。UNC路径就是类似\\softer这样的形式的网络路径。
		格式：\\servername\sharename，其中servername是服务器名。sharename是共享资源的名称。UNC共享就是指网络硬盘的共享当访问softer计算机中名为it168的共享文件夹，用UNC表示就是\\softer\it168；如果是softer计算机的默认管理共享C$则用\\softer\c$来表示。我们访问网上邻居所采用的命令行访问法，实际上应该称作UNC路径访问法。
	4、echo：回显。













		