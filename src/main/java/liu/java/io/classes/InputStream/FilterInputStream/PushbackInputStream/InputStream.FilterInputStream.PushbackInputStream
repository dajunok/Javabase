----------------------------------------PushbackInputStream--------------------------------------------------------------------------------------------------------------
PushbackInputStream：回推输入流	【Since:JDK1.0】
	PushbackInputStream向另一个输入流增加了功能，即“回推”或“不读取”一个字节的能力。这在代码片段读取由特定字节值分隔的不定数量的数据字节方便的情况下很有用；在读取终止字节后，代码片段可以“不读取”它，以便输入流上的下一个读取操作将重新读取回推的字节。例如，表示构成标识符的字符的字节可以由表示运算符字符的字节终止；其任务是只读取标识符的方法可以读取，直到它看到运算符，然后将该运算符向回推以重新读取。
	
	
	
	类定义	：public class PushbackInputStream extends FilterInputStream
	实现接口	：AutoCloseable, Closeable
------------------------------------------------------------------------------------------------------------------------------------------------------
Field Summary（字段概要）：
	in : InputStream
		要过滤的输入流。
	buf : byte[]
		回推缓冲区。
	pos : int		
		在回推缓冲区中，从中读取下一个字节的位置。当缓冲区为空时，pos等于buf.length；当缓冲区满时，pos等于零。

Constructor Summary（构造器概要）：
	public PushbackInputStream(InputStream in)
		in - 从中读取字节的输入流。
		创建一个PushbackInputStream并保存它的参数输入流in，供以后使用。最初，没有回推字节（pushBack字段初始化为-1）。
	public PushbackInputStream(InputStream in, int size)
		in - 从中读取字节的输入流。
		size - 回推缓存大小。		
		创建一个具有指定大小的回推缓冲区的PushbackInputStream，并将其参数（输入流）保存在中，供以后使用。最初，没有回推字节（pushBack字段初始化为-1）。
		【Throws】：
			IllegalArgumentException 如果size <= 0。

Method Summary（方法概要）：
	available():int 
		返回可以从此输入流中读取（或跳过）的字节数的估计值，而不受此输入流下一次方法调用的阻塞。下一次调用可能是同一个线程或另一个线程。单个读取或跳过这么多字节不会阻塞，但可能会读取或跳过更少的字节。
		该方法返回已回滚的字节数与available返回的值之和。
		返回可以从输入流中读取（或跳过）而不阻塞的字节数。
		【Throws】：
			IOException 如果此输入流已通过调用其close()方法关闭，或发生I/O错误。
	close():synchronized void 
		关闭此输入流并释放与该流关联的任何系统资源。流关闭后，进一步的read()、unread()、available()、reset()或skip()调用将引发IOException异常。关闭以前关闭的流没有效果。
		【Throws】：
			IOException 如果发生I/O错误。
	mark(int readlimit):synchronized void 
		readlimit - 标记位置无效之前可以读取的最大字节数限制。
		标记此输入流中的当前位置。
		PushbackInputStream的mark方法不起任何作用。
	markSupported():boolean 
		测试此输入流是否支持它不支持的标记和重置方法。
		返回false。因为此类不支持标记和重置方法。
	read():int 
		从这个输入流中读取数据的下一个字节。值字节在0到255之间作为int返回。如果由于到达流的结尾而没有字节可用，则返回值-1。此方法将一直阻塞，直到输入数据可用、检测到流的结尾或引发异常为止。
		此方法返回最近被会推的字节（如果有），否则调用其底层输入流的read方法并返回该方法返回的任何值。
		返回数据的下一个字节，如果到达流的末尾，则返回-1。
		【Throws】：
			IOException 如果此输入流已通过调用其close()方法关闭，或发生I/O错误。
	read(byte[] b, int off, int len):int 
		b - 读取数据的缓冲区。
		off - 数组b中写入数据的起始偏移量。
		len - 要读取的最大字节数。		
		将此输入流中最多len个字节的数据读取到一个字节数组中。此方法首先读取任何回推字节；之后，如果读取的长度小于len字节，则从底层输入流读取。如果len不为零，方法将一直阻塞，直到至少有1个字节的输入可用；否则，将不读取任何字节，并返回0。
		读取缓冲区的总字节数，如果由于到达流的末尾而没有更多数据，则为-1。
		【Throws】：
			NullPointerException 如果b为null。
			IndexOutOfBoundsException 如果off为负，len为负，或者len大于b.length-off。
			IOException 如果此输入流已通过调用其close()方法关闭，或发生I/O错误。			
	reset():synchronized void 
		将此流重新定位到此输入流上一次调用mark方法时的位置。
		PushbackInputStream类的方法reset除了引发IOException外什么也不做。
	skip(long n):long 
		n - 要跳过的字节数。
		跳过并丢弃此输入流中的n字节数据。由于各种原因，skip方法可能会跳过一些较小的字节，可能为零。如果n为负，则不跳过任何字节。
		PushbackInputStream的skip方法首先跳过pushBack会推缓冲区中的字节（如果有）。然后，如果需要跳过更多的字节，它将调用底层输入流的skip方法。将返回跳过的实际字节数。
		返回跳过的实际字节数。
		【Throws】：
			IOException 如果流不支持seek，或者通过调用其close()方法关闭了流，或者发生了I/O错误。
	unread(byte[] b):void 
		b - 要回推的字节数组
		通过将一个字节数组复制到回推缓冲区的前面来将其回推。此方法返回后，要读取的下一个字节将具有值b[0]，之后的字节将具有值b[1]等等。
		【Throws】：
			IOException 如果会推缓冲区中没有足够的空间容纳指定的字节数，或者此输入流已通过调用其close()方法关闭。
	unread(byte[] b, int off, int len):void 
		b - 要回推的字节数组
		off - 数据的起始偏移量。
		len - 要回推的字节数。	
		通过将字节数组的一部分复制到回推缓冲区的前面来将其回推。此方法返回后，要读取的下一个字节将具有值b[off]，之后的字节将具有值b[off+1]，依此类推。	
		【Throws】：
			IOException 如果回推缓冲区中没有足够的空间容纳指定的字节数，或者此输入流已通过调用其close()方法关闭。
	unread(int b):void 
		b - 其低位字节将被回推的int值。
		通过将字节复制到回推缓冲区的前面来将其回推。此方法返回后，要读取的下一个字节将具有值（字节）b。
		【Throws】：
			IOException 如果回推缓冲区中没有足够的空间容纳字节，或者通过调用其close()方法关闭了此输入流。
	
			
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
附录：
	1、注：文档中的△符号表示覆盖重写方法，✘符号表示已淘汰的方法。	
	2、注：文档中的★符号表示抽象方法或者直接抛出UnsupportedOperationException异常的方法，总之没有实现具体功能代码的方法。	
	3、pushback：回推。用于输入流，以允许读取字节，然后再将它们返回（回推）到流中。












		