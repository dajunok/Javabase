----------------------------------------PipedInputStream--------------------------------------------------------------------------------------------------------------
PipedInputStream：管道输入流	【Since:JDK1.0】
	管道输入流应连接到管道输出流；然后管道输入流提供写入管道输出流的任何数据字节。通常，数据由一个线程从PipedInputStream对象中读取，数据由其他线程写入相应的PipedOutputStream。不建议同时使用单个线程中的两个对象，因为这可能会导致线程死锁。管道输入流包含一个缓冲区，在限制范围内将读操作与写操作分离。如果向连接的管道输出流提供数据字节的线程不再活动，则称管道已断开。
	
	
	类定义	：public class PipedInputStream extends InputStream
	实现接口	：AutoCloseable, Closeable
------------------------------------------------------------------------------------------------------------------------------------------------------
Field Summary（字段概要）：
	PIPE_SIZE : int
		管道循环输入缓冲区的默认大小。
	buffer : byte[]
		将输入数据放入其中的循环缓冲区。
	in : int
		循环缓冲区中的位置索引，当从连接的管道输出流接收数据时，将在该位置存储下一个字节的数据。in<0表示缓冲区为空，in==out表示缓冲区已满
	out : int
		循环缓冲区中的位置索引，在该索引处，此管道输入流将读取下一个字节的数据。
	

Constructor Summary（构造器概要）：
	public PipedInputStream()
		创建PipedInputStream，使其尚未连接。它必须连接到PipedOutputStream才能使用。
	public PipedInputStream(int pipeSize)
		pipeSize - 管道缓冲区的大小。
		创建PipedInputStream，使其尚未连接，并为管道缓冲区使用指定的管道大小。它必须连接到PipedOutputStream才能使用。
		【Throws】：
			IllegalArgumentException 如果pipeSize <= 0。
	public PipedInputStream(PipedOutputStream src)
		src - 要连接的管道输出流。
		创建PipedInputStream，以便将其连接到管道输出流src。然后，写入src的数据字节将可用作此流的输入。
		【Throws】：
			IOException 如果发生I/O错误。
	public PipedInputStream(PipedOutputStream src, int pipeSize)
		src - 要连接的管道输出流。
		pipeSize - 管道缓冲区的大小。
		创建PipedInputStream，使其连接到管道输出流src，并使用指定的管道大小作为管道缓冲区。然后，写入src的数据字节将可用作此流的输入。
		
	
	
Method Summary（方法概要）：
	available():int 
		△ 返回可以从此输入流中读取而不阻塞的字节数。
		返回可以不阻塞地从此输入流中读取的字节数，或者如果此输入流已通过调用其close()方法关闭，或者管道未连接或断开，则返回0。
		【Throws】：
			IOException 如果发生I/O错误。
	close():void 
		△ 关闭此管道输入流并释放与该流关联的任何系统资源。
		【Throws】：
			IOException 如果发生I/O错误。
	connect(PipedOutputStream src):void 
		src - 要连接的管道输出流。
		使此管道输入流连接到管道输出流src。如果此对象已连接到其他管道输出流，则会引发IOException异常。
		如果src是未连接的管道输出流，而snk是未连接的管道输入流，则可以通过以下任一调用连接它们：
			snk.connect(src) 
		或者调用：
			src.connect(snk) 
		这两个调用有相同的效果。
		【Throws】：
			IOException 如果发生I/O错误。	
	read():int 
		△ 从这个管道输入流读取下一个字节的数据。值字节在0到255之间作为int返回。此方法将一直阻塞，直到输入数据可用、检测到流的结尾或引发异常为止。
		返回数据的下一个字节，如果到达流的末尾，则返回-1。
		【Throws】：
			IOException 如果管道未连接、断开、关闭或发生I/O错误。
	read(byte b[], int off, int len):int
		b - 读取数据的缓冲区。
		off - 数组b中写入数据的起始偏移量。
		len - 要读取的最大字节数。		
		△ 从这个管道输入流读取最多len字节的数据到一个字节数组中。如果到达数据流的结尾或len超过管道的缓冲区大小，将读取小于len的字节。如果len为零，则不读取任何字节并返回0；否则，方法将阻塞，直到至少有1个字节的输入可用、检测到流结尾或引发异常为止。
		返回读取缓冲区的总字节数，如果由于到达流的末尾而没有更多数据，则返回-1。
		【Throws】：
			IOException 如果管道断开、未连接、关闭或发生I/O错误。
			NullPointerException 如果b为null。
			IndexOutOfBoundsException 如果off为负，len为负，或者len大于b.length-off。	
	receive(int b):protected synchronized void 
		b - 正在接收的字节
		接收一个字节的数据。如果没有可用的输入，此方法将阻塞。
		【Throws】：
			IOException 如果管道断开、未连接、关闭或发生I/O错误。
			
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
附录：
	1、注：文档中的△符号表示覆盖重写方法，✘符号表示已淘汰的方法。	
	2、注：文档中的★符号表示抽象方法或者直接抛出UnsupportedOperationException异常的方法，总之没有实现具体功能代码的方法。	













		