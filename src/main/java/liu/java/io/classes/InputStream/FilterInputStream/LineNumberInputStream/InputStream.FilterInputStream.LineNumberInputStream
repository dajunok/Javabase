----------------------------------------LineNumberInputStream--------------------------------------------------------------------------------------------------------------
LineNumberInputStream：行号输入流	【Since:JDK1.0】
	✘ 已淘汰类。
	此类错误地假定字节充分表示字符。从JDK1.1开始，对字符流进行操作的首选方法是通过新的字符流类，其中包括用于计算行号的类。
	
	这个类是一个输入流过滤器，它提供了跟踪当前行号的附加功能。
	行是以回车符（“\r”）、换行符（“\n”）或紧跟换行符的回车符结尾的字节序列。在这三种情况下，行终止字符作为单个换行符返回。
	行号从0开始，当read返回换行符时，行号增加1。
	
	
	类定义	：public class LineNumberInputStream extends FilterInputStream
	实现接口	：AutoCloseable, Closeable
------------------------------------------------------------------------------------------------------------------------------------------------------
Field Summary（字段概要）：
	FilterInputStream.in 
		要过滤的输入流。
		


Constructor Summary（构造器概要）：
	public LineNumberInputStream(InputStream in)
		in - 底层输入流。
		✘ 已淘汰。
		构造从指定的输入流读取其输入的换行数输入流。
	
	
Method Summary（方法概要）：
	available():int 
		✘ 已淘汰。
		△  返回可以从此输入流中读取而不阻塞的字节数。
		请注意，如果底层输入流能够在不阻塞的情况下提供k个输入字符，则LineNumberInputStream只能保证在不阻塞的情况下提供k/2字符，因为底层输入流中的k个字符可能由k/2对'\r'和'\n'组成，这些对转换为k/2'\n'字符。
		返回可以从此输入流中读取而不阻塞的字节数。
		【Throws】：
			IOException 如果发生I/O错误。
	getLineNumber():int 
		✘ 已淘汰。
		返回当前行号。
	mark(int readlimit):synchronized void 
		readlimit - 标记位置无效之前可以读取的最大字节数限制。
		✘ 已淘汰。
		△  标记此输入流中的当前位置。对reset方法的后续调用将此流重新定位到最后标记的位置，以便后续读取重新读取相同的字节。
		LineNumberInputStream的mark方法记住private变量中的当前行号，然后调用底层输入流的mark方法。
	read():int 
		✘ 已淘汰。
		△  从这个输入流中读取数据的下一个字节。值字节在0到255之间作为int返回。如果由于到达流结尾而没有字节可用，则返回值-1。此方法将一直阻塞，直到输入数据可用、检测到流的结尾或引发异常为止。
		LineNumberInputStream的read调用底层输入流的read方法。它检查输入中的回车符和换行符，并根据需要修改当前行号。回车符或回车后跟换行符都转换为单个换行符。
		【Throws】：
			IOException 如果发生I/O错误。
	read(byte b[], int off, int len):int
		b - 读取数据的缓冲区。
		off - 数组b中写入数据的起始偏移量。
		len - 要读取的最大字节数。		
		✘ 已淘汰。
		△  将此输入流中最多len个字节的数据读取到一个字节数组中。此方法将一直阻塞，直到有一些输入可用。
		LineNumberInputStream的read方法重复调用零参数的read方法来填充字节数组。
		【Throws】：
			IOException 如果发生其他I/O错误。
	reset():synchronized void 
		✘ 已淘汰。
		△  将此流重新定位到此输入流上一次调用mark方法时的位置。
		LineNumberInputStream的Reset方法将行号重置为调用mark方法时的行号，然后调用底层输入流的reset方法。
		流标记用于需要提前读取以查看流中的内容的情况。通常，通过调用一些通用的解析器最容易做到这一点。如果流是由解析器处理的类型，那么它会很高兴地运行。如果流不是那种类型，那么当它失败时，解析器应该抛出一个异常，如果它发生在readlimit字节内，则允许外部代码重置流并尝试另一个解析器。
		【Throws】：
			IOException 如果发生其他I/O错误。
	setLineNumber(int lineNumber):void 
		lineNumber - 新的行号。
		✘ 已淘汰。
		将行号设置为指定的参数。
	skip(long n):long
		n - 要跳过的字节数。
		✘ 已淘汰。
		△ 跳过并丢弃此输入流中的n字节数据。由于各种原因，skip方法可能会跳过一些较小的字节，可能是0。将返回跳过的实际字节数。如果n为负，则不跳过任何字节。
		LineNumberInputStream的skip方法创建一个字节数组，然后反复读取该数组，直到读取n个字节或到达流的末尾。
		返回实际跳过的字节数。
		【Throws】：
			IOException 如果发生其他I/O错误。
			
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
附录：
	1、注：文档中的△符号表示覆盖重写方法，✘符号表示已淘汰的方法。	
	2、注：文档中的★符号表示抽象方法或者直接抛出UnsupportedOperationException异常的方法，总之没有实现具体功能代码的方法。	













		