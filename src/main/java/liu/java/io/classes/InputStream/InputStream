----------------------------------------InputStream--------------------------------------------------------------------------------------------------------------
InputStream：输入流	【Since:JDK1.0】
	这个抽象类是表示字节输入流的所有类的超类。
	需要定义InputStream子类的应用程序必须始终提供返回下一个输入字节的方法。
	
	
	类定义	：public abstract class InputStream implements Closeable
	实现接口	：AutoCloseable, Closeable
	直接子类	：AudioInputStream, ByteArrayInputStream, FileInputStream, FilterInputStream, InputStream, ObjectInputStream, PipedInputStream, SequenceInputStream, StringBufferInputStream
------------------------------------------------------------------------------------------------------------------------------------------------------
Constructor Summary（构造器概要）：
	public InputStream()
	
	
Method Summary（方法概要）：
	available():int 
		返回可以从此输入流中读取（或跳过）的字节数的估计值，而不受此输入流下一次方法调用的阻塞。下一次调用可能是同一个线程或另一个线程。单个读取或跳过这么多字节不会阻塞，但可能会读取或跳过更少的字节。
		注意，虽然一些InputStream的实现将返回流中的字节总数，但许多实现不会返回。使用此方法的返回值分配用于保存此流中所有数据的缓冲区永远不正确。
		如果通过调用close()方法关闭了此输入流，则此方法的子类实现可以选择引发IOException异常。
		类InputStream的available方法始终返回0。
		此方法应被子类重写。
		【Throws】：
			IOException 如果发生I/O错误。
	close():void 
		△ 关闭此输入流并释放与该流关联的任何系统资源。
		InputStream的close方法不起任何作用。
		【Throws】：
			IOException 如果发生I/O错误。
	mark(int readlimit):synchronized void 
		readlimit - 标记位置无效之前可以读取的最大字节数限制。
		标记此输入流中的当前位置。对reset方法的后续调用将此流重新定位到最后标记的位置，以便后续读取重新读取相同的字节。
		readlimit参数告诉此输入流允许在标记位置失效之前读取许多字节。
		mark的一般约定是，如果markSupported方法返回true，流以某种方式记住调用mark后读取的所有字节，并准备在调用方法reset时再次提供这些相同的字节。但是，如果在调用reset之前从流中读取的字节数超过readlimit，则不需要流记住任何数据。
		标记关闭的流对该流不应有任何影响。
		InputStream的mark方法不起任何作用。
	markSupported():boolean 
		测试此输入流是否支持mark和reset方法。是否支持mark和reset是特定输入流实例的一个不变属性。InputStream的markSupported方法返回false。
		如果此流实例支持mark和rese方法，则返回true；否则返回false。
	read():abstract int 
		★ 从输入流中读取数据的下一个字节。值byte在0到255之间作为int返回。如果由于到达流结尾而没有字节可用，则返回值-1。此方法将一直阻塞，直到输入数据可用、检测到流的结尾或引发异常为止。
		子类必须提供此方法的实现。
		【Throws】：
			IOException 如果发生I/O错误。
	read(byte b[]):int
		b - 读取数据的缓冲区。
		从输入流中读取一些字节数并将其存储到缓冲区数组b中。实际读取的字节数作为整数返回。此方法将一直阻塞，直到输入数据可用、检测到文件结尾或引发异常为止。
		如果b的长度为零，则不读取字节，返回0；否则，将尝试读取至少一个字节。如果由于流位于文件末尾而没有字节可用，则返回值-1；否则，至少读取一个字节并将其存储到b中。
		第一个字节读取被存储到元素b[0] 中，下一个字节读取到b[1]中，依此类推。读取的字节数最多等于b的长度。设k为实际读取的字节数；这些字节将存储在元素b[0]到b[k-1]中，不影响元素b[k]到b[b.length-1]。
		类类inputstream的read(b)方法与以下方法具有相同的效果：的read（b）方法与以下方法具有相同的效果：
			read(b, 0, b.length) 
		返回读取缓冲区的总字节数，如果由于到达流的末尾而没有更多数据，则为-1。
		【Throws】：
			IOException 如果由于除文件结尾以外的任何原因无法读取第一个字节，或者输入流已关闭，或者发生了其他I/O错误。
			NullPointerException 如果b为null。
	read(byte b[], int off, int len):int
		b - 读取数据的缓冲区。
		off - 数组b中写入数据的起始偏移量。
		len - 要读取的最大字节数。		
		从输入流读取最多len个字节的数据到一个字节数组中。试图读取最多len字节，但可以读取较小的数字。实际读取的字节数返回为整数。
		此方法将一直阻塞，直到输入数据可用、检测到文件结尾或引发异常为止。
		如果len为零，则不读取任何字节并返回0；否则，将尝试读取至少一个字节。如果由于流位于文件末尾而没有字节可用，则返回值-1；否则，至少读取一个字节并将其存储到b中。
		第一个字节读取被存储到元素b[off]中，下一个字节读取到b[off+1]中，依此类推。读取的字节数最多等于len。设k为实际读取的字节数；这些字节将存储在元素b[off]到b[off+k-1]中，使元素b[off+k]到b[off+len-1]不受影响。
		在任何情况下，元素b[0]到b[off]和元素b[off+len]到b[b.length-1]都不受影响。
		类InputStream的read(b, off, len)方法只需重复调用方法read() 。如果第一个此类调用导致IOException，则从对read(b, off, len)方法的调用中返回该异常。如果对read()的任何后续调用导致IOException，则会捕获该异常并将其视为文件结尾；到该点为止读取的字节将存储到b中，并返回在发生异常之前读取的字节数。此方法的默认实现将一直阻塞，直到读取请求的输入数据长度、检测到文件结尾或引发异常为止。鼓励子类提供更有效的方法实现。		
		【Throws】：
			IOException 如果第一个字节由于除文件结尾以外的任何原因无法读取，或者输入流已关闭，或者发生其他I/O错误。
			NullPointerException 如果b为null。
			IndexOutOfBoundsException 如果off为负，len为负，或者len大于b.length-off。	
	reset():synchronized void 
		将此流重新定位到此输入流上一次调用mark方法时的位置。
		重置的一般约定是：
			1、如果markSupported方法返回true，则：
				● 如果自创建流以来未调用mark方法，或者自上次调用mark以来从流中读取的字节数大于上次调用时要标记的参数，则可能引发IOException。
				● 如果未引发此类IOException，则流将重置为一种状态，以便将来自最近mark调用（或自文件开始以来，如果未调用mark）以来读取的所有字节重新提供给该read方法的后续调用方，然后是任何字节，否则在调用重置时将成为下一个输入数据。
			2、如果markSupported方法返回false，则：
				● 调用重置可能引发IOException。
				● 如果未引发IOException，则流将重置为固定状态，该状态取决于输入流的特定类型及其创建方式。将提供给read方法的后续调用程序的字节取决于输入流的特定类型。
		类InputStream的方法reset除了引发IOException外什么也不做。	
	skip(long n):long
		n - 要跳过的字节数。
		跳过并丢弃此输入流中的n字节数据。由于各种原因，skip方法可能会跳过一些较小的字节，可能是0。这可能是由许多条件中的任何一种造成的；在跳过n个字节之前到达文件结尾只是一种可能。将返回跳过的实际字节数。如果n为负，则类InputStream的Skip方法始终返回0，不跳过任何字节。子类可以不同地处理负值。
		此类的skip方法创建一个字节数组，然后反复读取该数组，直到读取n个字节或到达流的末尾。鼓励子类提供更有效的方法实现。例如，实现可能依赖于查找的能力。
		【Throws】：
			IOException 如果流不支持seek，或者发生其他I/O错误。
			
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
附录：
	1、注：文档中的△符号表示覆盖重写方法，✘符号表示已淘汰的方法。	
	2、注：文档中的★符号表示抽象方法或者直接抛出UnsupportedOperationException异常的方法，总之没有实现具体功能代码的方法。	













		