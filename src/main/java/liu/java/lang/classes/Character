----------------------------------------Character--------------------------------------------------------------------------------------------------------------
Character：字符类		【Since:JDK1.0】
	Character类在对象中包装原始类型char的值。Character类的对象包含类型为char的单个字段。
	此外，此类还提供了大量静态（static）方法，用于确定字符的类别（小写字母、数字等），以及将字符从大写转换为小写，反之亦然。
	
	Unicode一致性：
		Character类的字段和方法是根据Unicode标准中的字符信息定义的，特别是作为Unicode字符数据库一部分的UnicodeData文件。此文件指定每个指定的Unicode码位或字符范围的属性，包括名称和类别。该文件可从Unicode联盟获得，网址为http://www.unicode.org。
		JavaSE 8平台使用Unicode标准的版本6.2的字符信息，具有两个扩展。首先，JavaSE 8平台允许Character类的实现，使用6.2码后的Unicode标准的第一个版本的日文代码点Japanese Era code point, U+32FF。其次，为了识别到新货币频繁出现的事实，JavaSE 8平台允许Character类的实现使用Unicode标准的版本10的货币符号块。因此，在处理前面提到的代码点（除了版本6.2之外），Java字符集8的实现过程中的字段和方法的Character类的行为可能会有所不同，除了定义Java标识符的以下方法：isJavaIdentifierStart(int)、isJavaIdentifierStart(char)、isJavaIdentifierPart(int)、和isJavaIdentifierPart(char)。Java标识符中的代码点必须从Unicode标准的6.2版本中提取。
	
	Unicode字符表示
		char数据类型（由此Character对象封装的值）基于原始的Unicode规范，该规范将字符定义为固定宽度的16位实体。Unicode标准已经更改为允许字符的表示需要16位以上。合法代码点的范围现在是U+0000到U+10FFFF，称为Unicode标量值。（参考Unicode标准中U+n符号的定义。）
		从U+0000到U+FFFF的字符集有时被称为基本多语言平面（BMP）。代码点大于U+FFFF的字符称为补充字符。Java平台在char数组、String、和StringBuffer类中使用UTF-16表示。在此表示中，补充字符表示为一对字符值，第一个字符来自高代理范围 (\uD800-\uDBFF)，第二个字符来自低代理范围(\uDC00-\uDFFF)。
		因此，char值表示基本的多语言平面（BMP）代码点，包括代理代码点或UTF-16编码的代码单位。int值表示所有Unicode代码点，包括补充代码点。int的低位（最低有效）21位用于表示Unicode码位，高位（最高有效）11位必须为零。除非另有规定，有关补充字符和代理项字符值的行为如下：
			● 只接受char值的方法不支持补充字符。它们将代理范围中的字符值视为未定义的字符。例如，Character.isLetter('\uD840')返回false，即使该特定值（如果后跟字符串中的任何低代理值）将表示一个字母。
			● 接受int值的方法支持所有Unicode字符，包括补充字符。例如，Character.isLetter(0x2F81A)返回true，因为代码点值表示字母（CJK象形文字）。
		在Java SE API文档中，Unicode代码点用于U+0000和U+U+10FFFF之间的字符值，Unicode代码单元用于16位字符值，这些值是UTF-16编码的代码单元。有关Unicode术语的更多信息，请参阅Unicode术语表。	
		
	
	类定义	：public final class Character implements java.io.Serializable, Comparable<Character>
	实现接口	：Serializable,Comparable<Boolean>
	嵌套类	：Subset,UnicodeBlock
------------------------------------------------------------------------------------------------------------------------------------------------------
Field Summary（字段概要）
	BYTES : int
		用于以无符号二进制形式表示char值的字节数。
	COMBINING_SPACING_MARK : byte
		Unicode规范中的通用类别“Mc”（组合用分隔符）。
	CONNECTOR_PUNCTUATION : byte
		Unicode规范中的通用类别“Pc”（连接符标点符号）。
	CONTROL : byte
		Unicode规范中的通用类别“Cc”（控制符）。
	CURRENCY_SYMBOL : byte
		Unicode规范中的通用类别“Sc”（当前符号）。
	DASH_PUNCTUATION : byte
		Unicode规范中的通用类别“Pd”（破折号）。
	DECIMAL_DIGIT_NUMBER : byte
		Unicode规范中的通用类别“Nd”（十进制数字）。
	DIRECTIONALITY_ARABIC_NUMBER : byte
		Unicode规范中的弱双向字符类型“AN”。
	DIRECTIONALITY_BOUNDARY_NEUTRAL : byte
		Unicode规范中的弱双向字符类型“BN”。
	DIRECTIONALITY_COMMON_NUMBER_SEPARATOR : byte
		Unicode规范中的弱双向字符类型“CS”。
	DIRECTIONALITY_EUROPEAN_NUMBER : byte
		Unicode规范中的弱双向字符类型“EN”。
	DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR : byte
		Unicode规范中的弱双向字符类型“ES”。
	DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR : byte
		Unicode规范中的弱双向字符类型“ET”。
	DIRECTIONALITY_LEFT_TO_RIGHT : byte
		Unicode规范中的强双向字符类型“L”。
	DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING : byte
		Unicode规范中的强双向字符类型“LRE”。
	DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE : byte
		Unicode规范中的强双向字符类型“LRO”。
	DIRECTIONALITY_NONSPACING_MARK : byte
		Unicode规范中的弱双向字符类型“NSM”。
	DIRECTIONALITY_OTHER_NEUTRALS : byte
		Unicode规范中的中性双向字符类型“ON”。
	DIRECTIONALITY_PARAGRAPH_SEPARATOR : byte
		Unicode规范中的中性双向字符类型“B”。
	DIRECTIONALITY_POP_DIRECTIONAL_FORMAT : byte
		Unicode规范中的弱双向字符类型“PDF”。
	DIRECTIONALITY_RIGHT_TO_LEFT : byte
		Unicode规范中的强双向字符类型“R”。
	DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC : byte
		Unicode规范中的强双向字符类型“AL”。
	DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING : byte
		Unicode规范中的强双向字符类型“RLE”。
	DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE : byte
		Unicode规范中的强双向字符类型“RLO”。
	DIRECTIONALITY_SEGMENT_SEPARATOR : byte
		Unicode规范中的中性双向字符类型“S”。
	DIRECTIONALITY_UNDEFINED : byte
		未定义的双向字符类型。未定义的字符值在Unicode规范中具有未定义的方向性。
	DIRECTIONALITY_WHITESPACE : byte
		Unicode规范中的中性双向字符类型“WS”。
	ENCLOSING_MARK : byte
		Unicode规范中的常规类别“Me”。
	END_PUNCTUATION : byte
		Unicode规范中的一般类别“Pe”（结束标点符号）。
	FINAL_QUOTE_PUNCTUATION : byte
		Unicode规范中的通用类别“Pf”（最后的标点符号）。
	FORMAT : byte
		Unicode规范中的通用类别“Cf”（格式化）。
	INITIAL_QUOTE_PUNCTUATION : byte
		Unicode规范中的通用类别“Pi”（首引号）。
	LETTER_NUMBER : byte
		Unicode规范中的通用类别“Nl”。
	LINE_SEPARATOR : byte
		Unicode规范中的通用类别“Zl”（线性分离器）。
	LOWERCASE_LETTER : byte
		Unicode规范中的通用类别“Ll”（小写字母）。
	MATH_SYMBOL : byte
		Unicode规范中的通用类别“Sm”（数学符号）。
	MAX_CODE_POINT : int
		Unicode码位的最大值，常数U+10FFFF。
	MAX_HIGH_SURROGATE : char
		以UTF-16编码表示的Unicode高代理代码单元的最大值，常量'\uDBFF'。高代理也称为领先代理。
	MAX_LOW_SURROGATE : char
		以utf-16编码表示的Unicode低代理代码单元的最大值，常量'\uDFFF'。低代理也称为尾随代理。
	MAX_RADIX : int
		可转换为字符串或从字符串转换为字符串的最大基数。此字段的常量值是基数转换方法（如digit方法、ForDigit方法和类整数的toString方法）中基数参数允许的最大值。
	MAX_SURROGATE : char
		以UTF-16编码表示的Unicode代理代码单元的最大值，常量'\uDFFF'。
	MAX_VALUE : char
		此字段的常量值是char、'\uFFFF'类型的最大值。
	MIN_CODE_POINT : int
		Unicode码位的最小值，常量U+0000。
	MIN_HIGH_SURROGATE : char
		以UTF-16编码表示的Unicode高代理代码单元的最小值，常量 '\uD800'。高代理也称为领先代理。
	MIN_LOW_SURROGATE : char
		以UTF-16编码表示的Unicode低代理代码单元的最小值，常量'\uDC00'。低代理也称为尾随代理。
	MIN_RADIX : int
		用于与字符串之间转换的最小基数。此字段的常量值是基数转换方法（如digit方法、forDigit方法和类整数的toString方法）中基数参数允许的最小值。
	MIN_SUPPLEMENTARY_CODE_POINT : int
		Unicode补充码位的最小值，常数U+10000。
	MIN_SURROGATE : char
		以UTF-16编码表示的Unicode代理代码单元的最小值，常量'\uD800'。
	MIN_VALUE : char
		此字段的常量值是char类型的最小值，即'\u0000'。
	MODIFIER_LETTER : byte
		Unicode规范中的通用类别“Lm”（修饰字母）。
	MODIFIER_SYMBOL : byte
		Unicode规范中的通用类别“Sk”（修正符号）。
	NON_SPACING_MARK : byte
		Unicode规范中的通用类别“Mn”（非间距标记）。
	OTHER_LETTER : byte
		Unicode规范中的通用类别“Lo”（其他字母）。
	OTHER_NUMBER : byte
		Unicode规范中的通用类别“No”（其他数字）。
	OTHER_PUNCTUATION : byte
		Unicode规范中的通用类别“Po”（其他标点符号）。
	OTHER_SYMBOL : byte
		Unicode规范中的通用类别“So”（其他符号）。
	PARAGRAPH_SEPARATOR : byte
		Unicode规范中的通用类别“Zp”（段落分隔符）。
	PRIVATE_USE : byte
		Unicode规范中的通用类别“Co”（私用）。
	SIZE : int
		以无符号二进制形式表示char值的位数，常量16。
	SPACE_SEPARATOR : byte
		Unicode规范中的通用类别“Zs”（空白分离器）。
	START_PUNCTUATION : byte
		Unicode规范中的一般类别“Ps”（开始标点符号）。
	SURROGATE : byte
		Unicode规范中的通用类别“Cs”（代理）。
	TITLECASE_LETTER : byte
		Unicode规范中的通用类别“Lt”（标题大写字母）。
	TYPE : Class<Character>
		表示原始类型char的类实例。
	UNASSIGNED : byte
		Unicode规范中的通用类别“Cn”（未指派的）。
	UPPERCASE_LETTER : byte	
		Unicode规范中的通用类别“Lu”（大写字母）。
		
		
		
Constructor Summary（构造器概要）：
	public Character(char value)
		value - 要由字符对象表示的值。
		构造表示指定char值的新分配的Character对象。

Method Summary（方法概要）：
	charCount(int codePoint):static int 
	codePointAt(char[] a, int index):static int 
	codePointAt(char[] a, int index, int limit):static int 
	codePointAt(CharSequence seq, int index):static int 
	codePointBefore(char[] a, int index):static int 
	codePointBefore(char[] a, int index, int start):static int 
	codePointBefore(CharSequence seq, int index):static int 
	codePointCount(char[] a, int offset, int count):static int 
	codePointCount(CharSequence seq, int beginIndex, int endIndex):static int 
	compare(char x, char y):static int 
	digit(char ch, int radix):static int 
	digit(int codePoint, int radix):static int 
	forDigit(int digit, int radix):static char 
	getDirectionality(char ch):static byte 
	getDirectionality(int codePoint):static byte 
	getName(int codePoint):static String s
	getNumericValue(char ch):static int 
	getNumericValue(int codePoint):static int 
	getType(char ch):static int 
	getType(int codePoint):static int 
	hashCode(char value):static int 
	highSurrogate(int codePoint):static char 
	isAlphabetic(int codePoint):static boolean 
	isBmpCodePoint(int codePoint):static boolean 
	isDefined(char ch):static boolean 
	isDefined(int codePoint):static boolean 
	isDigit(char ch):static boolean 
	isDigit(int codePoint):static boolean 
	isHighSurrogate(char ch):static boolean 
	isIdentifierIgnorable(char ch):static boolean 
	isIdentifierIgnorable(int codePoint):static boolean 
	isIdeographic(int codePoint):static boolean 
	isISOControl(char ch):static boolean 
	isISOControl(int codePoint):static boolean 
	isJavaIdentifierPart(char ch):static boolean 
	isJavaIdentifierPart(int codePoint):static boolean 
	isJavaIdentifierStart(char ch):static boolean 
	isJavaIdentifierStart(int codePoint):static boolean 
	isJavaLetter(char ch):static boolean 
	isJavaLetterOrDigit(char ch):static boolean 
	isLetter(char ch):static boolean 
	isLetter(int codePoint):static boolean 
	isLetterOrDigit(char ch):static boolean 
	isLetterOrDigit(int codePoint):static boolean 
	isLowerCase(char ch):static boolean 
	isLowerCase(int codePoint): static boolean 
	isLowSurrogate(char ch):static boolean 
	isMirrored(char ch):static boolean 
	isMirrored(int codePoint):static boolean 
	isSpace(char ch):static boolean 
	isSpaceChar(char ch):static boolean 
	isSpaceChar(int codePoint):static boolean 
	isSupplementaryCodePoint(int codePoint):static boolean 
	isSurrogate(char ch):static boolean 
	isSurrogatePair(char high, char low):static boolean 
	isTitleCase(char ch):static boolean 
	isTitleCase(int codePoint):static boolean 
	isUnicodeIdentifierPart(char ch):static boolean 
	isUnicodeIdentifierPart(int codePoint):static boolean 
	isUnicodeIdentifierStart(char ch):static boolean 
	isUnicodeIdentifierStart(int codePoint):tatic boolean 
	isUpperCase(char ch):static boolean 
	isUpperCase(int codePoint):static boolean 
	isValidCodePoint(int codePoint):static boolean 
	isWhitespace(char ch):static boolean 
	isWhitespace(int codePoint):static boolean 
	lowSurrogate(int codePoint):static char 
	offsetByCodePoints(char[] a, int start, int count,int index, int codePointOffset):static int 
	offsetByCodePoints(CharSequence seq, int index,int codePointOffset):static int 
	reverseBytes(char ch):static char 
	toChars(int codePoint):static char[] 
	toChars(int codePoint, char[] dst, int dstIndex):static int 
	toCodePoint(char high, char low):static int 
	toLowerCase(char ch):static char 
	toLowerCase(int codePoint):static int 
	toString(char c):static String 
	toTitleCase(char ch):static char 
	toTitleCase(int codePoint):static int 
	toUpperCase(char ch):static char 
	toUpperCase(int codePoint):static int 
	valueOf(char c):static Character 
	charValue():char 
	compareTo(Character anotherCharacter):int 
	equals(Object obj):boolean 
	hashCode():int 
	toString():String 
	
			
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
附录：
	1、注：文档中的△符号表示覆盖重写方法，✘符号表示已淘汰的方法。	
	2、注：文档中的★符号表示抽象方法或者直接抛出UnsupportedOperationException异常的方法，总之没有实现具体功能代码的方法。	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	