----------------------------------------Thread$State-------------------------------------------------------------------------------------------------------------
State：线程状态枚举类。【Since:1.5】
	线程状态。线程可以处于以下状态之一：
		NEW				尚未启动的线程处于此状态。
		RUNNABLE		在Java虚拟机中执行的线程处于该状态。
		BLOCKED			被阻塞，等待monitor锁（监视器锁）的线程处于此状态。
		WAITING			无限期等待另一个线程执行特定操作的线程处于此状态。
		TIMED_WAITING	在指定的等待时间内等待另一个线程执行操作的线程处于此状态。
		TERMINATED		已退出的线程处于此状态。	
	线程在给定时间点只能处于一种状态。这些状态是不反映任何操作系统线程状态的虚拟机状态。

	枚举定义	：public static enum Thread.State extends Enum<Thread.State>
	语法糖	：public enum State
	实现接口	：Comparable<E>, Serializable
------------------------------------------------------------------------------------------------------------------------------------------------------
Enum Constant Detail（枚举常量详情描述）：
	NEW
		尚未启动的线程的线程状态。
	RUNNABLE
		可运行线程的线程状态。可运行状态中的线程在Java虚拟机中执行，但它可能等待来自操作系统（如处理器）的其他资源。
	BLOCKED
		线程被阻塞正在等待监视器锁的线程状态。处于阻塞状态的线程正在等待监视器锁进入同步块/方法，或在调用Object.wait后重新进入同步块/方法。
	WAITING
		等待线程的线程状态。由于调用以下方法之一，线程处于等待状态：
			● 调用Object.wait方法而没有超时
			● 调用Thread.join方法而没有超时
			● 调用LockSupport.park
		处于等待状态的线程正在等待另一个线程执行特定操作。例如，一个在对象上调用Object.wait()的线程正在等待另一个线程在该对象上调用Object.notify()或Object.notifyAll()。调用Thread.join()的线程正在等待指定线程终止。
	TIMED_WAITING
		具有指定等待时间的等待线程的线程状态。由于使用指定的正数等待时间调用以下方法之一，线程处于正等待状态：
			● 调用Thread.sleep方法
			● 调用Object.wait方法而没有超时
			● 调用Thread.join方法而没有超时
			● 调用LockSupport.parkNanos方法
			● 调用LockSupport.parkUntil方法
	TERMINATED
		终止线程的线程状态。线程已完成执行。		
		
	
			
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
附录：
	1、注：文档中的△符号表示覆盖重写方法，✘符号表示已被淘汰掉的方法。	
	2、注：文档中的★符号表示抽象方法或者直接抛出UnsupportedOperationException异常的方法，总之没有实现具体功能代码的方法。
	3、loadFactor：负载因子（或称为负载系数），它等于“size/capacity”（即大小与容量的比率）。负载因子为0，表示空的hash表，0.5表示半满的散列表，依此类推。轻负载的散列表具有冲突少、适宜插入与查询的特点（但是使用Iterator迭代元素时比较慢）
	4、initialCapacity：初始容量。创建hash表时桶的数量，并发操作时ConcurrentHashMap是一次锁住一个桶。ConcurrentHashMap默认将hash表分为16个桶，诸如get、put、remove等常用操作只锁住当前需要用到的桶。这样，原来只能一个线程进入，现在却能同时有16个写线程执行，并发性能的提升是显而易见的。
	5、java并发一致性：
		对于一致性，可以分为从客户端和服务端两个不同的视角。从客户端来看，一致性主要指的是多并发访问时更新过的数据如何获取的问题。从服务端来看，则是更新如何复制分布到整个系统，以保证数据最终一致。一致性是因为有并发读写才有的问题，因此在理解一致性的问题时，一定要注意结合考虑并发读写的场景。
		从客户端角度，多进程并发访问时，更新过的数据在不同进程如何获取的不同策略，决定了不同的一致性。对于关系型数据库，要求更新过的数据能被后续的访问都能看到，这是“强一致性”。如果能容忍后续的部分或者全部访问不到，则是“弱一致性”。如果经过一段时间后要求能访问到更新后的数据，则是“最终一致性”。
	6、SkipList：跳表。	使用“空间换时间”的算法，令链表的每个结点不仅记录next结点位置，还可以按照level层级分别记录后继第level个结点。在查找时，首先按照层级查找，比如：当前跳表最高层级为3，即每个结点中不仅记录了next结点（层级1），还记录了next的next（层级2）、next的next的next（层级3）结点。现在查找一个结点，则从头结点开始先按高层级开始查：head->head的next的next的next->。。。直到找到结点或者当前结点q的值大于所查结点，则此时当前查找层级的q的前一节点p开始，在p~q之间进行下一层级（隔1个结点）的查找......直到最终迫近、找到结点。此法使用的就是“先大步查找确定范围，再逐渐缩小迫近”的思想进行的查找。	
	7、constant-time（常量时间）：意思就是无论n是什么值运算所花时间都一样。
	8、Linear-time（线性时间）：则是说多大n就花多少时间。
	9、Multiple-time（多项式时间）：则意味着随着n增大，n每增加1所花的时间增长越来越多。对于n^2-3这样一个多项式时间来说，n=2的时候可能只要花1的时间，甚至低于线性时间，但n=4的时候可能就要花13的时间了，可以想象再大一些这个数值会变得巨大。但是它又不及指数时间增长快(m^n)，且m^n不能写成多项式形式，所以它又和多项式时间有区别。	
	10、	Copy-On-Write：简称COW，是一种用于程序设计中的优化策略。其基本思路是，从一开始大家都在共享同一个内容，当某个人想要修改这个内容的时候，才会真正把内容Copy出去形成一个新的内容然后再改，这是一种延时懒惰策略。从JDK1.5开始Java并发包里提供了两个使用CopyOnWrite机制实现的并发容器,它们是CopyOnWriteArrayList和CopyOnWriteArraySet。CopyOnWrite容器非常有用，可以在非常多的并发场景中使用到。
		CopyOnWrite容器即写时复制的容器。通俗的理解是当我们往一个容器添加元素的时候，不直接往当前容器添加，而是先将当前容器进行Copy，复制出一个新的容器，然后新的容器里添加元素，添加完元素之后，再将原容器的引用指向新的容器。这样做的好处是我们可以对CopyOnWrite容器进行并发的读，而不需要加锁，因为当前容器不会添加任何元素。所以CopyOnWrite容器也是一种读写分离的思想，读和写不同的容器。
		
		